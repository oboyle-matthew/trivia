{"version":3,"sources":["components/host/HostHomePage.js","components/old_stuff/Questions.js","components/old_stuff/LevenshteinDistance.js","components/host/question_components/Question.js","components/host/question_components/QuestionType.js","components/host/answer_components/TextAnswer.js","components/host/answer_components/NumberAnswer.js","components/host/answer_components/ClosestNumber.js","components/host/answer_components/MultipleChoice.js","components/host/answer_components/SpeedRound.js","components/host/answer_components/MultipleAnswers.js","components/host/score_components/SingleScore.js","components/host/QuestionCreator.js","helpers/QuestionPoster.js","components/media_display/ImageDisplay.js","components/host/RoundCreator.js","helpers/RoundNameSorter.js","components/host/QuizCreator.js","components/participant/ParticipantHomePage.js","components/results/Scoreboard.js","components/participant/QuizTaker.js","components/participant/user_input/TextInput.js","components/participant/user_input/NumberInput.js","components/participant/user_input/MultipleChoice.js","components/participant/speed_clues/SpeedClues.js","helpers/AnswerPoster.js","components/participant/user_input/MultipleAnswersInput.js","components/participant/RoundTaker.js","components/register/Register.js","components/results/RoundResults.js","components/host/results/HostRoundResults.js","components/participant/results/ParticipantRoundResults.js","components/participant/results/ParticipantRoundTeamResults.js","components/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["Host","props","removeQuiz","quizName","quizzes","state","toDelete","quizzesRef","set","deletedRef","firebase","database","ref","once","snapshot","toAdd","exists","val","name","displayQuiz","quiz","i","style","display","flexDirection","date","to","addNewQuiz","newQuizName","hasOwnProperty","setState","error","changeNewQuizName","e","target","value","displayErrorMessage","self","this","on","Object","keys","map","onPressEnter","onChange","width","onClick","React","Component","Select","Option","Question","updateQuestionString","questionString","QuestionType","questionType","height","update","TextAnswer","changeNewAnswer","newAnswer","changeAnswerType","answerType","addPossibleAnswer","possibleAnswers","toLowerCase","removePossibleAnswer","splice","getInfoForPosting","length","indexOf","push","grid","column","dataSource","renderItem","item","Item","placeholder","NumberAnswer","changeAnswer","isNaN","numberAnswer","changeMargin","margin","changeMinInput","maxInput","newNumberAnswer","newMargin","invalidNumber","parseFloat","Math","abs","minInput","changeMaxInput","num","renderAnswerInput","ClosestNumber","updateScore","positionScoring","addPosition","removePosition","renderPositionScores","score","MultipleChoice","choices","correctChoice","changeNewOption","newOption","addChoice","removeOption","Group","choice","SpeedRound","clues","scoreType","cluesRevealedScore","positionScores","infoForPosting","textAnswerRef","current","clue","updateClue","removeClue","addClue","renderClues","changeScoreType","updatePositionScore","removePositionScore","addPositionScore","renderScoring","renderCluesRevealedScores","updateCluesRevealedScore","createRef","MultipleAnswers","multipleScores","scores","multipleAnswers","scoresRefs","addAnswer","removeLastAnswer","pop","elem","SingleScore","placeHolder","QuestionCreator","updateQuestionType","displayPossibleAnswers","possibleAnswersRef","getImage","image","question","questionRef","currentTime","Date","getTime","imageId","info","forEach","key","scoreRef","displayScores","handleImageAsFile","reader","FileReader","file","files","onloadend","imagePreviewUrl","result","readAsDataURL","cancelImageUpload","imageInputRef","imageUpload","type","src","modalOpen","questionTypeRef","message","submitQuestion","data","round","roundRef","invalidScoringArray","filter","invalidClues","arr","invalidAnswers","validateInput","questions","ImageDisplay","imageSrc","storage","getDownloadURL","then","res","maxConstraints","TextArea","Input","ordinalSuffix","j","k","renderAnswers","text","record","toUpperCase","join","answer","renderScores","renderMedia","RoundCreator","moveUp","oldAbove","moveDown","oldBelow","renderPosition","deleteQuestion","renderDeleteRow","beginSpeedRound","qRef","child","begin","endSpeedRound","show","showClue","clueIndex","clueRef","hideClue","renderSpeedClues","clueButton","renderQuestions","index","addQuestion","uploadImageToFirebase","put","handleOk","questionCreatorRef","questionError","err","handleCancel","toggleShowRound","toggleFinishedRound","finished","setCustomScoring","customScoringEnabled","customScores","updateCustomScore","Number","isInteger","parseInt","renderCustomScoring","marginTop","marginBottom","updateDescription","description","renderDescription","autoSize","minRows","columns","title","dataIndex","render","checked","marginLeft","pagination","visible","onOk","onCancel","getSortedRoundNames","rounds","sort","a","b","position","sortByPosition","Panel","Collapse","QuizCreator","addNewRound","roundIndex","quizRef","removeTeam","teamName","teams","renderTeams","renderPanel","roundName","deleteRound","stopPropagation","pos","deletePanel","placement","onConfirm","okText","cancelText","updateNewRoundName","newRoundNames","changeRoundName","newRoundName","oldRoundName","moveRoundUp","sortedRounds","roundAbove","currRound","posAbove","currPosition","moveRoundDown","roundBelow","posBelow","renderEditFileNames","editRoundNames","viewResults","match","params","viewParticipantView","extra","header","withRouter","ParticipantHomePage","className","teamNameColumn","totalColumn","Scoreboard","createTotalTeamScores","teamScores","teamScore","total","roundNames","roundColumns","substring","QuizTaker","marginRight","TextInput","updateAnswer","NumberInput","SpeedClues","submitAnswer","answers","points","undefined","gradeTextQuestion","correctAnswer","gradeNumberQuestion","userAnswer","userAnswers","closenessOrder","getClosenessOrder","scoring","team","gradeClosestQuestion","gradeMultipleChoiceQuestion","numCorrect","guesses","cluesRevealed","correct","guess","correctAnswers","gradeSpeedQuestion","gradeQuestion","updateDatabase","console","log","possibleAnswer","includes","MultipleAnswersInput","RoundTaker","userInput","userInputRefs","submit","submitSpeedQuestion","changeCustomScore","customScoresError","numbers","number","selectCustomScore","color","displayQuestion","Array","isArray","border","selectedTeam","submitRound","changeSelectedTeam","selectTeam","teamRef","split","line","flexWrap","q","updateTeamName","updateNewTeamMember","newTeamMember","addTeamMember","teamMembers","submitTeam","member","RoundResults","renderOtherInfo","filteredGuesses","g","questionIndex","other","teamAnswer","HostRoundResults","changePoints","getColumns","clearAllScores","renderClearButton","ParticipantRoundResults","ParticipantRoundTeamResults","renderUserAnswer","renderTeamAnswer","renderTeamScore","totalScore","hasSpeedQuestions","renderTopBottomButtons","HomePage","basename","exact","path","Register","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e4e35eec.chunk.js","sourcesContent":["import React from 'react';\nimport firebase from 'firebase';\nimport { Input } from \"antd\";\nimport {\n    Link\n} from \"react-router-dom\";\n\nexport default class Host extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quizzes: {},\n            newQuizName: '',\n            error: false,\n        };\n    }\n\n    componentDidMount() {\n        const self = this;\n        this.quizzesRef = firebase.database().ref('quizzes');\n        this.quizzesRef.on('value', snapshot => {\n            self.setState({\n                quizzes: snapshot.val(),\n                newQuizName: '',\n            });\n        });\n    }\n\n    removeQuiz = (quizName) => {\n        const { quizzes } = this.state;\n        const toDelete = quizzes[quizName];\n        delete quizzes[quizName];\n        this.quizzesRef.set(quizzes);\n        this.deletedRef = firebase.database().ref('deleted');\n        this.deletedRef.once(\"value\", snapshot => {\n            let toAdd = {};\n            if (snapshot.exists()) {\n                toAdd = snapshot.val();\n            }\n            toAdd[toDelete.name] = toDelete;\n            this.deletedRef.set(toAdd);\n        });\n    };\n\n    displayQuiz = (quiz, i) => {\n        return <div style={{display: 'flex', flexDirection: 'row'}}>\n            <p>{quiz.name}</p>\n            <p>{quiz.date}</p>\n            &nbsp; &nbsp;\n            <Link to={'/host/' + quiz.name}>View</Link>\n            {/*{quiz.name !== 'Example quiz' && <button onClick={() => this.removeQuiz(quiz.name)}>X</button>}*/}\n        </div>\n    };\n\n    addNewQuiz = () => {\n        const { quizzes, newQuizName } = this.state;\n        if (quizzes.hasOwnProperty(newQuizName)) {\n            this.setState({\n                error: true,\n            })\n        } else {\n            quizzes[newQuizName] = {'name': newQuizName, 'rounds': []};\n            this.quizzesRef.set(quizzes);\n        }\n    };\n\n    changeNewQuizName = (e) => {\n        this.setState({\n            newQuizName: e.target.value,\n            error: false,\n        })\n    };\n\n    displayErrorMessage = () => {\n        return <div>\n            A quiz with this name already exists\n        </div>\n    };\n\n    render() {\n        const { quizzes, newQuizName, error } = this.state;\n        return (\n            <div>\n                <h1>Host home page</h1>\n                {Object.keys(quizzes).map((quizName, i) => this.displayQuiz(quizzes[quizName], i))}\n                New Quiz Name: <Input value={newQuizName} onPressEnter={this.addNewQuiz} onChange={this.changeNewQuizName} style={{width: 300}} />\n                <button onClick={this.addNewQuiz}>Add</button>\n                {error && this.displayErrorMessage()}\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\n\nconst { Option } = Select;\n\nexport default class Questions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answers: [],\n            score: null,\n            results: [],\n        };\n    }\n\n    componentDidMount() {\n        const { questions } = this.props;\n        this.setState({\n            answers: questions.map(elem => ''),\n            results: questions.map(elem => ''),\n        })\n    }\n\n    updateAnswer = (e, i) => {\n        let { answers } = this.state;\n        answers[i] = e.target.value.toLowerCase();\n        this.setState({\n            answers: answers,\n        })\n    };\n\n    submit = () => {\n        const { questions } = this.props;\n        let { answers, results } = this.state;\n        let score = 0;\n        questions.forEach((question, index) => {\n            const answer = answers[index];\n            if (answer === undefined) {\n                results[index] = \"Answer should have \" +(question.type === 'exactly' ? 'exactly matched' : 'matched one of') + \" answer choices ([\" + question.answers.join(\", \") + \"])\"\n                return;\n            }\n            if (question.type === 'exactly') {\n                const i = question.answers.indexOf(answer);\n                if (i >= 0) {\n                    score += 1;\n                    results[index] = \"CORRECT! \" + answer + \" exactly matches \" + \"index \" + i + \" of answer choices ([\" + question.answers.join(\", \") + \"])\";\n                } else {\n                    results[index] = \"INCORRECT! Answer should have exactly matched one of answer choices ([\" + question.answers.join(\", \") + \"])\"\n                }\n            } else if (question.type === 'contains') {\n                const filteredAnswers = question.answers.filter(a => answer.includes(a));\n                if (filteredAnswers.length > 0) {\n                    score += 1;\n                    results[index] = \"CORRECT! \" + answer + \"contains \\\"\" + filteredAnswers[0] + \"\\\" from index \" + index + \" of answer choices ([\" + question.answers.join(\", \") + \"])\";\n                } else {\n                    results[index] = \"INCORRECT! Answer should have contained one of answer choices ([\" + question.answers.join(\", \") + \"])\"\n                }\n            }\n        });\n        this.setState({\n            score: score,\n            results: results,\n        })\n    };\n\n    render() {\n        const { questions } = this.props;\n        const { answers, score, results } = this.state;\n        return (\n            <div>\n                <h1>Below is the example quiz, based on the questions created above</h1>\n                {questions.map((question, i) => {\n                    return <div style={{marginBottom: 50}}>\n                        <p>Question {i+1}: {question.question}</p>\n                        <div style={{display: 'flex', flexDirection: 'row'}}>\n                            Your answer for q{i+1}: <Input style={{width: 500}} value={answers[i]} onChange={e => this.updateAnswer(e, i)} />\n                            {results[i]}\n                        </div>\n                    </div>\n                })}\n                <button onClick={this.submit}>Submit</button>\n                <div>\n                    Your score: {score}/{questions.length}\n                </div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\n\nconst { Option } = Select;\n\nexport default class Questions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            s1: '',\n            s2: '',\n            score: 0,\n            similar: false,\n        };\n    }\n\n    calculate = () => {\n        const { s1, s2 } = this.state;\n        const a = s1;\n        const b = s2;\n        if (a.length == 0) return b.length;\n        if (b.length == 0) return a.length;\n\n        var matrix = [];\n\n        // increment along the first column of each row\n        var i;\n        for (i = 0; i <= b.length; i++) {\n            matrix[i] = [i];\n        }\n\n        // increment each column in the first row\n        var j;\n        for (j = 0; j <= a.length; j++) {\n            matrix[0][j] = j;\n        }\n\n        // Fill in the rest of the matrix\n        for (i = 1; i <= b.length; i++) {\n            for (j = 1; j <= a.length; j++) {\n                if (b.charAt(i - 1) == a.charAt(j - 1)) {\n                    matrix[i][j] = matrix[i - 1][j - 1];\n                } else {\n                    matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // substitution\n                        Math.min(matrix[i][j - 1] + 1, // insertion\n                            matrix[i - 1][j] + 1)); // deletion\n                }\n            }\n        }\n\n        const ans = matrix[b.length][a.length] / a.length;\n        if (ans < 0.4) {\n            this.setState({\n                similar: true,\n                score: ans,\n            })\n        } else {\n            this.setState({\n                similar: false,\n                score: ans,\n            })\n        }\n    }\n\n    updates1 = (e) => {\n        this.setState({\n            s1: e.target.value.toLowerCase().trim(),\n        })\n    };\n\n    updates2 = (e) => {\n        this.setState({\n            s2: e.target.value.toLowerCase().trim(),\n        })\n    };\n\n    render() {\n        const { s1, s2, score, similar } = this.state;\n        return (\n            <div>\n                <h1>This is a test view of the (Levenshtein Distance / length of first string) to test similarity of strings. Threshold set at 0.4 currently.</h1>\n                s1: <Input value={s1} id={0} onChange={this.updates1} />\n                s2: <Input value={s2} id={1} onChange={this.updates2} />\n                <button onClick={this.calculate}>Calculate</button>\n                {score}: {similar ? \"similar\" : \"NOT similar\"}\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport app from 'firebase/app';\nimport firebase from 'firebase';\nimport { Input, Table, Modal } from \"antd\";\nimport { storage } from \"firebase\";\n\nexport default class Question extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questionString: '',\n        };\n    }\n\n    updateQuestionString = (e) => {\n        this.setState({\n            questionString: e.target.value,\n        })\n    };\n\n    render() {\n        return (\n            <div>\n                <div>Question:</div>\n                <Input onChange={this.updateQuestionString} />\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport app from 'firebase/app';\nimport firebase from 'firebase';\nimport { Input, Table, Modal, Select } from \"antd\";\nimport { storage } from \"firebase\";\n\nconst { Option } = Select;\n\nexport default class QuestionType extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questionType: 'text',\n        };\n    }\n\n    render() {\n        const { questionType } = this.props;\n        return (\n            <div>\n                <div>Question Type:</div>\n                <Select value={questionType} style={{width: 200, height: 40}} onChange={this.props.update}>\n                    <Option value=\"text\">Text</Option>\n                    <Option value=\"number\">Number</Option>\n                    <Option value=\"closest\">Closest Number</Option>\n                    <Option value=\"multiple_choice\">Multiple Choice</Option>\n                    <Option value=\"multiple_answers\">Multiple Answers</Option>\n                    <Option value=\"speed\">Speed round</Option>\n                </Select>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\n\nconst { Option } = Select;\n\nexport default class TextAnswer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answerType: 'exactly',\n            possibleAnswers: [],\n            newAnswer: '',\n        };\n    }\n\n    changeNewAnswer = (e) => {\n        this.setState({\n            newAnswer: e.target.value\n        })\n    };\n\n    changeAnswerType = (e) => {\n        this.setState({\n            answerType: e\n        })\n    };\n\n    addPossibleAnswer = () => {\n        const { possibleAnswers, newAnswer } = this.state;\n        this.setState({\n            possibleAnswers: [...possibleAnswers, newAnswer.toLowerCase()],\n            newAnswer: '',\n        })\n    };\n\n    removePossibleAnswer = (i) => {\n        let { possibleAnswers } = this.state;\n        possibleAnswers.splice(i, 1);\n        this.setState({\n            possibleAnswers: possibleAnswers,\n        })\n    };\n\n    getInfoForPosting = () => {\n        const { answerType, possibleAnswers, newAnswer } = this.state;\n        if (newAnswer.length > 0 && possibleAnswers.indexOf(newAnswer) === -1) {\n            possibleAnswers.push(newAnswer.toLowerCase());\n            this.setState({\n                possibleAnswers: possibleAnswers,\n                newAnswer: '',\n            })\n        }\n        return {answerType, possibleAnswers};\n    };\n\n    render() {\n        const { newAnswer, answerType, possibleAnswers } = this.state;\n        return (\n            <div>\n                <div>\n                    <div>Answer Type: </div>\n                    <Select value={answerType} style={{width: 200, height: 40}} onChange={this.changeAnswerType}>\n                        <Option value=\"exactly\">Is Exactly...</Option>\n                        <Option value=\"contains\">Contains...</Option>\n                        {/*<Option value=\"regex\">Matches regex...</Option>*/}\n                    </Select>\n                    <br/>\n                </div>\n                <h4>Possible answers: </h4>\n                <div>\n                    {possibleAnswers.length === 0 ? \"No answer options yet...\" : <List grid={{column: 5}}\n                        dataSource={possibleAnswers}\n                        renderItem={(item, i) => (\n                            <List.Item>{item}\n                            <button onClick={() => this.removePossibleAnswer(i)}>X</button>\n                            </List.Item>\n                        )}\n                    />}\n                    <div>\n                        Input an answer (Enter to add it to the list):\n                        <div style={{display: 'flex', flexDirection: 'row'}}>\n                            <Input style={{width: 400}} onPressEnter={this.addPossibleAnswer} value={newAnswer} onChange={this.changeNewAnswer} placeholder=\"Answer\" />\n                            <button onClick={this.addPossibleAnswer}>Add possible answer</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\n\nconst { Option } = Select;\n\nexport default class NumberAnswer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            numberAnswer: null,\n            margin: 0,\n            answerType: 'plusMinus',\n            minInput: null,\n            maxInput: null,\n        };\n    }\n\n    getInfoForPosting = () => {\n        return this.state;\n    };\n\n    changeAnswer = (e) => {\n        const value = e.target.value;\n        if (value === '-' || value === '' || !isNaN(value) || value.indexOf('e') === value.length-1) {\n            this.setState({numberAnswer: value})\n        }\n    };\n\n    changeMargin = (e) => {\n        const value = e.target.value;\n        if (value === '-' || value === '' || !isNaN(value) || value.indexOf('e') === value.length-1) {\n            this.setState({margin: value})\n        }\n    };\n\n    changeMinInput = (e) => {\n        const { maxInput } = this.state;\n        const value = e.target.value;\n        if (value === '-' || value === '' || !isNaN(value) || value.indexOf('e') === value.length-1) {\n            let newNumberAnswer = null;\n            let newMargin = 0;\n            if (!this.invalidNumber(value) && !this.invalidNumber(maxInput)) {\n                newNumberAnswer = ((parseFloat(maxInput) + parseFloat(value)) / 2);\n                newMargin = ((parseFloat(maxInput) - parseFloat(value)) / 2);\n            }\n            this.setState({\n                numberAnswer: newNumberAnswer,\n                margin: Math.abs(newMargin),\n                minInput: value,\n            })\n        }\n    };\n\n    changeMaxInput = (e) => {\n        const { minInput } = this.state;\n        const value = e.target.value;\n        if (value === '-' || value === '' || !isNaN(value) || value.indexOf('e') === value.length-1) {\n            let newNumberAnswer = null;\n            let newMargin = 0;\n            if (!this.invalidNumber(minInput) && !this.invalidNumber(value)) {\n                newNumberAnswer = ((parseFloat(value) + parseFloat(minInput)) / 2);\n                newMargin = ((parseFloat(value) - parseFloat(minInput)) / 2);\n            }\n            this.setState({\n                numberAnswer: newNumberAnswer,\n                margin: Math.abs(newMargin),\n                maxInput: value,\n            })\n        }\n    };\n\n    invalidNumber = (num) => {\n        return num === '' || num === null || isNaN(num);\n    };\n\n    changeAnswerType = (e) => {\n        this.setState({\n            answerType: e\n        })\n    };\n\n    renderAnswerInput = () => {\n        const { numberAnswer, margin, answerType, minInput, maxInput } = this.state;\n        return (\n            answerType === 'plusMinus' ? <div style={{display: 'flex', flexDirection: 'row'}}>\n                Answer: <Input style={{width: 200}} value={numberAnswer} onChange={this.changeAnswer} />\n                +- <Input style={{width: 200}} value={margin} onChange={this.changeMargin} />\n            </div> : <div>\n                Min: <Input style={{width: 200}} value={minInput} onChange={this.changeMinInput} />\n                Max: <Input style={{width: 200}} value={maxInput} onChange={this.changeMaxInput} />\n            </div>\n        )\n    }\n\n    render() {\n        const { numberAnswer, margin, answerType } = this.state;\n        return (\n            <div >\n                <div>\n                    <div>Answer Type: </div>\n                    <Select value={answerType} style={{width: 200, height: 40}} onChange={this.changeAnswerType}>\n                        <Option value=\"plusMinus\">Plus/Minus</Option>\n                        <Option value=\"minMax\">Min/Max</Option>\n                    </Select>\n                </div>\n                {this.renderAnswerInput()}\n                (Answers accepted between: {parseFloat(numberAnswer) - parseFloat(margin)} and {parseFloat(numberAnswer) + parseFloat(margin)})\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\n\n\nconst { Option } = Select;\n\nexport default class ClosestNumber extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            numberAnswer: null,\n            positionScoring: [3,2,1,0,0],\n        };\n    }\n\n    getInfoForPosting = () => {\n        return this.state;\n    };\n\n    changeAnswer = (e) => {\n        const value = e.target.value;\n        if (value === '-' || value === '' || !isNaN(value) || value.indexOf('e') === value.length-1) {\n            this.setState({numberAnswer: value})\n        }\n    };\n\n    updateScore = (e, i) => {\n        const { positionScoring } = this.state;\n        const value = e.target.value;\n        if (value === '' || !isNaN(value)) {\n            positionScoring[i] = value;\n            this.setState(positionScoring);\n        }\n    };\n\n    addPosition = () => {\n        const { positionScoring } = this.state;\n        this.setState({\n            positionScoring: [... positionScoring, 0]\n        })\n    };\n\n    removePosition = (i) => {\n        const { positionScoring } = this.state;\n        positionScoring.splice(i, 1);\n        this.setState({\n            positionScoring: positionScoring,\n        })\n    };\n\n    renderPositionScores = () => {\n        const { positionScoring } = this.state;\n        return <div>\n            {positionScoring.map((score, i) => {\n                return <div>\n                    Position {i+1}:\n                    <Input style={{width: 50}} value={score} onChange={e => this.updateScore(e, i)} />\n                    <button onClick={() => this.removePosition(i)}>X</button>\n                </div>\n            })}\n            <button onClick={this.addPosition}>Add position</button>\n        </div>\n    };\n\n    render() {\n        const { numberAnswer } = this.state;\n        return (\n            <div>\n                Answer: <Input style={{width: 200, height: 30}} value={numberAnswer} onChange={this.changeAnswer} />\n                {this.renderPositionScores()}\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List, Radio} from 'antd';\n\nconst { Option } = Select;\n\nexport default class MultipleChoice extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            choices: [],\n            newOption: '',\n            correctChoice: null,\n        };\n    }\n\n    getInfoForPosting = () => {\n        const { choices, correctChoice } = this.state;\n        return { choices, correctChoice };\n    };\n\n    changeNewOption = (e) => {\n        this.setState({\n            newOption: e.target.value\n        });\n    };\n\n    addChoice = () => {\n        const { choices, newOption } = this.state;\n        this.setState({\n            choices: [...choices, newOption],\n            newOption: '',\n        })\n    };\n\n    removeOption = (i) => {\n        const { choices } = this.state;\n        choices.splice(i, 1);\n        this.setState({\n            choices: choices,\n        })\n    };\n\n    onChange = e => {\n        this.setState({\n            correctChoice: e.target.value,\n        });\n    };\n\n    render() {\n        const { choices, newOption, correctChoice } = this.state;\n        return (\n            <div>\n                <Radio.Group onChange={this.onChange} value={correctChoice}>\n                    {choices.map((choice, i) => {\n                        return <div>\n                            <Radio value={choice}>{choice}</Radio>\n                            <button onClick={() => this.removeOption(i)}>X</button>\n                        </div>\n                    })}\n                </Radio.Group>\n                <div>\n                    <Input onPressEnter={this.addChoice} style={{width: 200}} value={newOption} onChange={this.changeNewOption} />\n                    <button onClick={this.addChoice}>Add</button>\n                </div>\n\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\nimport TextAnswer from \"./TextAnswer\";\n\nconst { Option } = Select;\n\nexport default class SpeedRound extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            clues: [''],\n            scoreType: 'clues_revealed',\n            cluesRevealedScore: [1],\n            positionScores: [3,2,1,0,0,0],\n        };\n        this.textAnswerRef = React.createRef();\n    }\n\n    getInfoForPosting = () => {\n        const { clues, scoreType, cluesRevealedScore, positionScores } = this.state;\n        const infoForPosting = this.textAnswerRef.current.getInfoForPosting();\n        infoForPosting.clues = clues.map(clue => {\n            return {clue: clue}\n        });\n        infoForPosting.scoreType = scoreType;\n        infoForPosting.positionScoring = scoreType === 'clues_revealed' ? cluesRevealedScore : positionScores;\n        return infoForPosting;\n    };\n\n    updateClue = (e, i) => {\n        const { clues } = this.state;\n        clues[i] = e.target.value;\n        this.setState({\n            clues: clues,\n        })\n    };\n\n    removeClue = (i) => {\n        const { clues, cluesRevealedScore } = this.state;\n        clues.splice(i,1);\n        cluesRevealedScore.splice(0,1);\n        this.setState({\n            clues: clues,\n            cluesRevealedScore: cluesRevealedScore,\n        })\n    };\n\n    addClue = () => {\n        const { clues, cluesRevealedScore } = this.state;\n        this.setState({\n            clues: [...clues, ''],\n            cluesRevealedScore: [parseFloat(cluesRevealedScore[0])+1, ...cluesRevealedScore],\n        })\n    };\n\n    renderClues = () => {\n        const { clues } = this.state;\n        return (\n            <div>\n                {clues.map((clue, i) => {\n                    return (\n                        <div style={{display: 'flex', flexDirection: 'row'}}>\n                            Clue {i+1}: <Input style={{width: 800}} value={clue} onChange={e => this.updateClue(e, i)} />\n                            {i > 0 && <button onClick={() => this.removeClue(i)}>X</button>}\n                        </div>\n                    )\n                })}\n                <button onClick={this.addClue}>Add Clue</button>\n            </div>\n        )\n    };\n\n    changeScoreType = (e) => {\n        this.setState({\n            scoreType: e\n        })\n    };\n\n    updatePositionScore = (e, i) => {\n        const { positionScores } = this.state;\n        const value = e.target.value;\n        if (value === '' || !isNaN(value)) {\n            positionScores[i] = value;\n            this.setState({positionScores: positionScores})\n        }\n    };\n\n    removePositionScore = (i) => {\n        const { positionScores } = this.state;\n        positionScores.splice(i, 1);\n        this.setState({\n            positionScores: positionScores,\n        })\n    };\n\n    addPositionScore = () => {\n        const { positionScores } = this.state;\n        this.setState({\n            positionScores: [... positionScores, 0]\n        })\n    };\n\n    renderPositionScores = () => {\n        const { positionScores } = this.state;\n        return <div>\n            {positionScores.map((score, i) => {\n                return <div>\n                    Position {i+1}:\n                    <Input style={{width: 50}} value={score} onChange={e => this.updatePositionScore(e, i)} />\n                    <button onClick={() => this.removePositionScore(i)}>X</button>\n                </div>\n            })}\n            <button onClick={this.addPositionScore}>Add position</button>\n        </div>\n    };\n\n    renderScoring = () => {\n        const { scoreType } = this.state;\n        return (\n            <div>\n                <div>Scores determined by:</div>\n                <Select value={scoreType} style={{width: 200, height: 40}} onChange={this.changeScoreType}>\n                    <Option value=\"clues_revealed\">Clues Revealed</Option>\n                    <Option value=\"position\">Position</Option>\n                </Select>\n                {scoreType === 'clues_revealed' ? this.renderCluesRevealedScores() : this.renderPositionScores()}\n            </div>\n        )\n    };\n\n    updateCluesRevealedScore = (e,i) => {\n        const {cluesRevealedScore} = this.state;\n        const value = e.target.value;\n        if (value === '' || !isNaN(value)) {\n            cluesRevealedScore[i] = value;\n            this.setState({cluesRevealedScore: cluesRevealedScore})\n        }\n    };\n\n    renderCluesRevealedScores = () => {\n        const { cluesRevealedScore } = this.state;\n        return <div>\n            {cluesRevealedScore.map((score, i) => {\n                return <div>\n                    Guessing after clue {i+1} =\n                    <Input style={{width: 50}} value={score} onChange={e => this.updateCluesRevealedScore(e, i)} />\n                    points\n                </div>\n            })}\n        </div>\n    };\n\n    render() {\n        return (\n            <div>\n                {this.renderClues()}\n                <TextAnswer ref={this.textAnswerRef} />\n                {this.renderScoring()}\n\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\nimport TextAnswer from \"./TextAnswer\";\n\nconst { Option } = Select;\n\nexport default class MultipleAnswers extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            scores: [1],\n        };\n        this.scoresRefs = [React.createRef()];\n    }\n\n    getInfoForPosting = () => {\n        const { scores } = this.state;\n        const multipleAnswers = this.scoresRefs.map(ref => ref.current.getInfoForPosting());\n        return { multipleScores: scores, multipleAnswers }\n    };\n\n    addAnswer = () => {\n        const { scores } = this.state;\n        this.setState({\n            scores: [...scores, parseFloat(scores[scores.length-1])+1]\n        });\n        this.scoresRefs.push(React.createRef());\n    };\n\n    removeLastAnswer = () => {\n        const { scores } = this.state;\n        scores.pop();\n        this.setState({\n            scores: scores\n        });\n        this.scoresRefs.pop();\n    };\n\n    updateScore = (e, i) => {\n        const { scores } = this.state;\n        const value = e.target.value;\n        if (value === '' || !isNaN(value)) {\n            scores[i] = value;\n            this.setState({scores: scores})\n        }\n    };\n\n    render() {\n        const { scores } = this.state;\n        return (\n            <div>\n                {scores.map((elem, i) => {\n                    return (\n                        <div>\n                            <hr/>\n                            <h3>Answer {i+1}:</h3>\n                            <TextAnswer ref={this.scoresRefs[i]}/>\n                        </div>\n                    )\n                })}\n                <hr/>\n                <button onClick={this.addAnswer}>Add another answer</button>\n                {scores.length > 1 && <button onClick={this.removeLastAnswer}>Remove last answer</button>}\n\n                {scores.map((score, i) => {\n                    return (\n                        <div>\n                            {i+1} correct = <Input style={{width: 50}} value={score} onChange={e => this.updateScore(e, i)} /> points\n                        </div>\n                    )\n                })}\n\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input } from \"antd\";\n\nexport default class SingleScore extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            score: 1,\n        };\n    }\n\n    updateScore = (e) => {\n        const value = e.target.value;\n        if (value === '' || !isNaN(value)) {\n            this.setState({score: value})\n        }\n    };\n\n    render() {\n        const { score } = this.state;\n        return (\n            <div>\n                Correct answer: <Input style={{width: 50}} placeHolder={'score...'} value={score} onChange={this.updateScore} /> points\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport app from 'firebase/app';\nimport firebase from 'firebase';\nimport Questions from \"../old_stuff/Questions\";\nimport LevenshteinDistance from \"../old_stuff/LevenshteinDistance\";\nimport {Table, Modal, Alert} from \"antd\";\nimport { storage } from \"firebase\";\nimport Question from \"./question_components/Question\";\nimport QuestionType from \"./question_components/QuestionType\";\nimport TextAnswer from \"./answer_components/TextAnswer\";\nimport NumberAnswer from \"./answer_components/NumberAnswer\";\nimport ClosestNumber from \"./answer_components/ClosestNumber\";\nimport MultipleChoice from \"./answer_components/MultipleChoice\";\nimport SpeedRound from \"./answer_components/SpeedRound\";\nimport MultipleAnswers from \"./answer_components/MultipleAnswers\";\nimport SingleScore from \"./score_components/SingleScore\";\n\nexport default class QuestionCreator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questionType: 'text',\n            modalOpen: false,\n            image: null,\n        };\n        this.questionRef = React.createRef();\n        this.questionTypeRef = React.createRef();\n        this.possibleAnswersRef = React.createRef();\n        this.scoreRef = React.createRef();\n        this.imageInputRef = React.createRef();\n    }\n\n    updateQuestionType = (e) => {\n        this.setState({\n            questionType: e,\n        })\n    };\n\n    displayPossibleAnswers = () => {\n        const { questionType } = this.state;\n        if (questionType === 'text') {\n            return <TextAnswer ref={this.possibleAnswersRef} />\n        } else if (questionType === 'number') {\n            return <NumberAnswer ref={this.possibleAnswersRef}/>\n        } else if (questionType === 'closest') {\n            return <ClosestNumber ref={this.possibleAnswersRef}/>\n        } else if (questionType === 'multiple_choice') {\n            return <MultipleChoice ref={this.possibleAnswersRef}/>\n        } else if (questionType === 'speed') {\n            return <SpeedRound ref={this.possibleAnswersRef}/>\n        } else if (questionType === 'multiple_answers') {\n            return <MultipleAnswers ref={this.possibleAnswersRef}/>\n        }\n    };\n\n    getImage = () => {\n        return this.state.image;\n    };\n\n    getInfoForPosting = () => {\n        const { questionType, image } = this.state;\n        const question = this.questionRef.current.state.questionString;\n        const infoForPosting = {question: question, questionType};\n        const currentTime = new Date().getTime();\n        // Need a unique_id for uploading image -- use current time!\n        if (image) {\n            infoForPosting.imageId = currentTime;\n        }\n        const info = this.possibleAnswersRef.current.getInfoForPosting();\n        Object.keys(info).forEach(key => infoForPosting[key] = info[key]);\n        if (this.scoreRef.current) {\n            infoForPosting.score = this.scoreRef.current.state.score;\n        }\n        return infoForPosting;\n    };\n\n    displayScores = () => {\n        const { questionType } = this.state;\n        if (questionType === 'text' || questionType === 'number' || questionType === 'multiple_choice') {\n            return <SingleScore ref={this.scoreRef}/>\n        }\n    };\n\n    handleImageAsFile = (e) => {\n        let reader = new FileReader();\n        let file = e.target.files[0];\n        reader.onloadend = () => {\n            this.setState({\n                image: file,\n                imagePreviewUrl: reader.result\n            });\n        };\n        reader.readAsDataURL(file)\n    };\n\n    cancelImageUpload = () => {\n        this.imageInputRef.current.value = '';\n        this.setState({\n            imagePreviewUrl: null,\n            image: null,\n        });\n    };\n\n    imageUpload = () => {\n        // TODO: This def should've been its own component, with a ref to get image value for upload\n        const { imagePreviewUrl } = this.state;\n        return (\n            <div>\n                <input\n                    type=\"file\"\n                    onChange={this.handleImageAsFile}\n                    ref={this.imageInputRef}\n                />\n                {imagePreviewUrl && <div>\n                    <img style={{width: 200, height: 200}} src={imagePreviewUrl} />\n                    <button onClick={this.cancelImageUpload}>Remove image</button>\n                </div>}\n            </div>\n        )\n    };\n\n    render() {\n        const { error } = this.props;\n        const { questionType } = this.state;\n        return (\n            <div>\n                {error && <Alert message={error} type=\"error\" />}\n                {this.imageUpload()}\n                <Question ref={this.questionRef}/>\n                <QuestionType ref={this.questionTypeRef} questionType={questionType} update={this.updateQuestionType}/>\n                {this.displayPossibleAnswers()}\n                {this.displayScores()}\n            </div>\n        );\n    }\n\n}","export function submitQuestion(data, round, roundRef) {\n    validateInput(data);\n    const questions = round.questions;\n    if (questions) {\n        round.questions = [...round.questions, data]\n    } else {\n        round.questions = [data];\n    }\n    roundRef.set(round);\n}\n\nfunction validateInput(data) {\n    const { question, possibleAnswers, numberAnswer, score, positionScoring, clues } = data;\n    if (question === '') {\n        throw \"Must have a question string\";\n    }\n    if (possibleAnswers && possibleAnswers.length === 0) {\n        throw \"Must have at least one correct answer\";\n    }\n    if (data.hasOwnProperty('numberAnswer') && invalidNumber(numberAnswer)) {\n        throw \"Must be a valid number\";\n    }\n    if (data.hasOwnProperty('score') && invalidNumber(score)) {\n        throw \"Must have a score for the question\";\n    }\n    if (data.hasOwnProperty('positionScoring') && invalidScoringArray(positionScoring)) {\n        throw \"Must have at least one team scoring\";\n    }\n    if (data.hasOwnProperty('clues') && invalidClues(clues)) {\n        throw \"Must have at least one clue for speed round\";\n    }\n    if (data.hasOwnProperty('choices')) {\n        const { choices, correctChoice } = data;\n        if (choices.length <= 1) {\n            throw \"Must have at least 2 options\";\n        }\n        if (correctChoice === null) {\n            throw \"Must select a correct option for multiple choice\";\n        }\n    }\n    if (data.hasOwnProperty('multipleAnswers')) {\n        const { multipleAnswers, multipleScores } = data;\n        if (invalidAnswers(multipleAnswers)) {\n            throw \"All options for answers must have a possible answer\";\n        }\n        if (invalidScoringArray(multipleScores)) {\n            throw \"Must be possible to score points\";\n        }\n    }\n}\n\nfunction invalidNumber(num) {\n    return num === '' || num === null || isNaN(num);\n}\n\nfunction invalidScoringArray(arr) {\n    const filteredArray = arr.filter(elem => {\n        return !(elem === '' || isNaN(elem) || elem === null || parseFloat(elem) === 0)\n    });\n    return filteredArray.length === 0;\n}\n\nfunction invalidClues(clues) {\n    return clues.filter(clue => clue !== '').length === 0\n}\n\nfunction invalidAnswers(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].possibleAnswers.length === 0) {\n            return true;\n        }\n    }\n    return false;\n}","import React from 'react';\nimport 'antd/dist/antd.css'\nimport firebase from 'firebase';\nimport { Resizable, ResizableBox } from 'react-resizable';\nimport 'react-resizable/css/styles.css';\n\nexport default class ImageDisplay extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            imageSrc: null,\n        }\n    }\n\n    componentDidMount() {\n        const { imageId } = this.props;\n        if (imageId) {\n            const imageRef = firebase.storage().ref(`/images/${imageId}`);\n            imageRef.getDownloadURL().then(res => {\n                this.setState({\n                    imageSrc: res\n                });\n            })\n        }\n    }\n\n    render() {\n        const { imageSrc } = this.state;\n        const { width, height } = this.props;\n        return (\n            imageSrc && <ResizableBox width={width} height={height} maxConstraints={[1500, 700]}>\n                <img\n                    style={{width: '100%', height: '100%'}}\n                    src={imageSrc}\n                />\n            </ResizableBox>\n        )\n        // return (\n        //     imageSrc && <ResizableBox style={this.props.style}>\n        //\n        //     </ResizableBox>\n        // );\n    }\n}","import React from 'react';\nimport app from 'firebase/app';\nimport firebase from 'firebase';\nimport Questions from \"../old_stuff/Questions\";\nimport LevenshteinDistance from \"../old_stuff/LevenshteinDistance\";\nimport {Table, Modal, Switch, Input} from \"antd\";\nimport { storage } from \"firebase\";\nimport QuestionCreator from \"./QuestionCreator\";\nimport {submitQuestion} from \"../../helpers/QuestionPoster\";\nimport ImageDisplay from \"../media_display/ImageDisplay\";\n\nconst { TextArea } = Input;\n\nconst ordinalSuffix = (i) => {\n    var j = i % 10,\n        k = i % 100;\n    if (j == 1 && k != 11) {\n        return i + \"st\";\n    }\n    if (j == 2 && k != 12) {\n        return i + \"nd\";\n    }\n    if (j == 3 && k != 13) {\n        return i + \"rd\";\n    }\n    return i + \"th\";\n};\n\nconst renderAnswers = (text, record) => {\n    const { questionType } = record;\n    if (questionType === 'text' || questionType === 'speed') {\n        return <div>\n            {record.answerType.toUpperCase()} [{record.possibleAnswers.join(', ')}]\n        </div>\n    }\n    if (questionType === 'number' || questionType === 'closest') {\n        const num = parseFloat(record.numberAnswer);\n        const margin = parseFloat(record.margin);\n        return <div>\n            {record.margin ? (num - margin) + \" - \" + (num + margin) : num}\n        </div>\n    }\n    if (questionType === 'multiple_answers') {\n        return <div>\n            {record.multipleAnswers.map((answer, i) => {\n                return <div>\n                    {i+1}: {answer.answerType.toUpperCase()} [{answer.possibleAnswers.join(', ')}]\n                </div>\n            })}\n        </div>\n    }\n    if (questionType === 'multiple_choice') {\n        return <div>\n            {record.correctChoice.toUpperCase()} from [{record.choices.join(', ')}]\n        </div>\n    }\n    return text;\n};\n\nconst renderScores = (text, record) => {\n    const { questionType } = record;\n    if (questionType === 'text' || questionType === 'number' || questionType === 'multiple_choice') {\n        return <div>\n            {record.score} point(s)\n        </div>\n    }\n    if (questionType === 'closest') {\n        return record.positionScoring.map((score, i) => <div>{ordinalSuffix(i+1)} closest: {score} point(s)</div>)\n    }\n    if (questionType === 'multiple_answers') {\n        return record.multipleScores.map((score, i) => <div>{i+1} Correct: {score} point(s)</div>)\n    }\n    if (questionType === 'speed') {\n        if (record.scoreType === 'clues_revealed') {\n            return record.positionScoring.map((score, i) => <div>{i+1} clue(s) revealed: {score} point(s)</div>)\n        }\n        if (record.scoreType === 'position') {\n            return record.positionScoring.map((score, i) => <div>{ordinalSuffix(i+1)}: {score} point(s)</div>)\n        }\n    }\n    return text;\n};\n\nconst renderMedia = (text, record) => {\n    return <ImageDisplay width={100} height={100} imageId={record.imageId}/>\n}\n\nexport default class RoundCreator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            modalOpen: false,\n            questionError: null,\n            description: props.round.description,\n        };\n        this.questionCreatorRef = React.createRef();\n        this.columns = [\n            {\n                title: 'Position',\n                dataIndex: 'pos',\n                key: 'question',\n                render: this.renderPosition,\n            },\n            {\n                title: 'Question',\n                dataIndex: 'question',\n                key: 'question',\n                render: this.renderQuestions,\n            },\n            {\n                title: 'Media',\n                dataIndex: 'media',\n                key: 'media',\n                render: renderMedia,\n            },\n            {\n                title: 'Question Type',\n                dataIndex: 'questionType',\n                key: 'question_type',\n            },\n            {\n                title: 'Clues/Options',\n                dataIndex: 'clues',\n                key: 'clues',\n                render: this.renderClues,\n            },\n            {\n                title: 'Answers',\n                dataIndex: 'answers',\n                key: 'answers',\n                render: renderAnswers,\n            },\n            {\n                title: 'Scoring',\n                dataIndex: 'scoring',\n                key: 'scoring',\n                render: renderScores,\n            },\n            {\n                title: 'Delete',\n                dataIndex: 'delete',\n                key: 'delete',\n                render: this.renderDeleteRow,\n            }\n        ];\n    }\n\n    moveUp = (i) => {\n        const { round, roundRef } = this.props;\n        const oldAbove = round.questions[i-1];\n        round.questions[i-1] = round.questions[i];\n        round.questions[i] = oldAbove;\n        roundRef.set(round);\n    };\n\n    moveDown = (i) => {\n        const { round, roundRef } = this.props;\n        const oldBelow = round.questions[i+1];\n        round.questions[i+1] = round.questions[i];\n        round.questions[i] = oldBelow;\n        roundRef.set(round);\n    };\n\n    renderPosition = (text, record, i) => {\n        const { round } = this.props;\n        return <div>\n            {i > 0 && <button onClick={() => this.moveUp(i)}>Move up</button>}\n            {i < round.questions.length-1 && <button onClick={() => this.moveDown(i)}>Move down</button>}\n        </div>\n    };\n\n    deleteQuestion = (i) => {\n        const { round, roundRef } = this.props;\n        round.questions.splice(i,1);\n        roundRef.set(round);\n    };\n\n    renderDeleteRow = (text,record,i) => {\n        return <button onClick={() => this.deleteQuestion(i)}>X</button>\n    };\n\n    beginSpeedRound = (record, i) => {\n        const { roundRef } = this.props;\n        const qRef = roundRef.child('questions').child(i);\n        record.begin = true;\n        qRef.set(record);\n    };\n\n    endSpeedRound = (record, i) => {\n        const { roundRef } = this.props;\n        const qRef = roundRef.child('questions').child(i);\n        record.begin = false;\n        record.clues.forEach(clue => clue.show = false);\n        qRef.set(record);\n    };\n\n    showClue = (clue, i, clueIndex) => {\n        const { roundRef } = this.props;\n        const clueRef = roundRef.child('questions').child(i).child('clues').child(clueIndex);\n        clue.show = true;\n        clueRef.set(clue);\n    };\n\n    hideClue = (clue, i, clueIndex) => {\n        const { roundRef } = this.props;\n        const clueRef = roundRef.child('questions').child(i).child('clues').child(clueIndex);\n        clue.show = false;\n        clueRef.set(clue);\n    };\n\n    renderSpeedClues = (record, i) => {\n        return record.clues.map((clue, clueIndex) => {\n            let clueButton;\n            if (clue.show) {\n                clueButton = <button onClick={() => this.hideClue(clue, i, clueIndex)}>Hide</button>\n            } else {\n                clueButton = <button onClick={() => this.showClue(clue, i, clueIndex)}>Show</button>\n            }\n            return <div>\n                Clue {clueIndex+1}: {clue.clue}\n                {record.begin && clueButton}\n            </div>\n        })\n    };\n\n    renderClues = (text, record, i) => {\n        const { questionType } = record;\n        if (questionType === 'multiple_choice') {\n            return record.choices.map(choice => <div>{choice}</div>);\n        }\n        if (questionType === 'speed') {\n            return this.renderSpeedClues(record, i);\n        }\n        return text;\n    };\n\n    renderQuestions = (text, record, index) => {\n        const { questionType } = record;\n        if (questionType === 'speed') {\n            return <div>\n                {text}\n                {record.begin ? <button\n                    onClick={() => this.endSpeedRound(record, index)}>\n                    End\n                </button> : <button\n                    onClick={() => this.beginSpeedRound(record, index)}>\n                    Begin\n                </button>\n                }\n            </div>\n        }\n        return text;\n    };\n\n    addQuestion = () => {\n        this.setState({\n            modalOpen: true,\n        })\n    };\n\n    uploadImageToFirebase = (image, imageId) => {\n        firebase.storage().ref(`/images/${imageId}`).put(image)\n    };\n\n    handleOk = () => {\n        const { round, roundRef } = this.props;\n        const infoForPosting = this.questionCreatorRef.current.getInfoForPosting();\n        try {\n            submitQuestion(infoForPosting, round, roundRef);\n            if (infoForPosting.imageId) {\n                this.uploadImageToFirebase(this.questionCreatorRef.current.getImage(), infoForPosting.imageId);\n            }\n            this.setState({\n                questionError: null,\n                modalOpen: false,\n            })\n        } catch(err) {\n            this.setState({\n                questionError: err,\n            })\n        }\n    };\n\n    handleCancel = () => {\n        this.setState({\n            modalOpen: false,\n        })\n    };\n\n    toggleShowRound = (e, round) => {\n        const { roundRef } = this.props;\n        round.show = e;\n        round.questions.forEach((question, i) => {\n            if (question.questionType === 'speed') {\n                question.begin = false;\n                question.clues.forEach(clue => clue.show = false);\n            }\n        });\n        roundRef.set(round);\n    };\n\n    toggleFinishedRound = (e, round) => {\n        const { roundRef } = this.props;\n        round.finished = e;\n        roundRef.set(round);\n    };\n\n    setCustomScoring = (val) => {\n        const { round, roundRef } = this.props;\n        round.customScoringEnabled = val;\n        if (val && !round.customScores) {\n            round.customScores = [0,0,0];\n        }\n        roundRef.set(round);\n    };\n\n    updateCustomScore = (e, i) => {\n        const { round, roundRef } = this.props;\n        const value = e.target.value;\n        if (value === '' || (!isNaN(value) && Number.isInteger(parseInt(value)))) {\n            round.customScores[i] = value;\n            roundRef.set(round);\n        }\n    };\n\n    renderCustomScoring = () => {\n        const { round } = this.props;\n        const { customScoringEnabled, customScores } = round;\n        return <div style={{marginTop: 20, marginBottom: 20}}>\n            <button onClick={() => this.setCustomScoring(!customScoringEnabled)}>{customScoringEnabled ? \"Disable \" : \"Enable \"} custom scoring</button>\n            (Overrides all basic scores)\n            {customScoringEnabled && customScores && <div>\n                {customScores.map((score, i) => {\n                    return <div style={{display: 'flex', flexDirection: 'row'}}>\n                        {i+1} points: <Input style={{width: 200}} value={score} onChange={e => this.updateCustomScore(e, i)} />\n                    </div>\n                })}\n            </div>}\n        </div>\n    };\n\n    updateDescription = () => {\n        const { round, roundRef } = this.props;\n        const { description } = this.state;\n        round.description = description;\n        roundRef.set(round);\n    };\n\n    renderDescription = () => {\n        const { description } = this.state;\n        return <div>\n            <TextArea\n                value={description}\n                onChange={e => this.setState({description: e.target.value})}\n                placeholder=\"Description....\"\n                autoSize={{ minRows: 1 }}\n            />\n            <button onClick={this.updateDescription}>Update description</button>\n        </div>\n    };\n\n    render() {\n        const { round } = this.props;\n        const { modalOpen, questionError } = this.state;\n        return (\n            <div>\n                <div>\n                    <div style={{display: 'flex', flexDirection: 'row'}}>\n                        <div>\n                            Show round: <Switch checked={round.show} onChange={e => this.toggleShowRound(e,round)} />\n                        </div>\n                        <div style={{marginLeft: 30}}>\n                            Show results: <Switch checked={round.finished} onChange={e => this.toggleFinishedRound(e,round)} />\n                        </div>\n                    </div>\n                    {this.renderCustomScoring()}\n                    {this.renderDescription()}\n                    {round.questions && <Table columns={this.columns} dataSource={round.questions} pagination={false} />}\n                    <button onClick={this.addQuestion}>Add question</button>\n                    <Modal\n                        title=\"Create a question\"\n                        visible={modalOpen}\n                        onOk={this.handleOk}\n                        onCancel={this.handleCancel}\n                    >\n                        <QuestionCreator error={questionError} ref={this.questionCreatorRef}/>\n                    </Modal>\n                </div>\n            </div>\n        );\n    }\n}","function sortByPosition(a,b,rounds) {\n    return rounds[a].position - rounds[b].position;\n}\n\nexport function getSortedRoundNames(rounds) {\n    return Object.keys(rounds).sort((a,b) => sortByPosition(a,b,rounds))\n}","import React from 'react';\nimport firebase from 'firebase';\nimport {Collapse, Input, Popconfirm} from 'antd';\nimport {\n    Link,\n    useParams,\n    withRouter,\n} from \"react-router-dom\";\nimport RoundCreator from \"./RoundCreator\";\nimport {getSortedRoundNames} from \"../../helpers/RoundNameSorter\";\n\nconst { Panel } = Collapse;\n\n\nclass QuizCreator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quiz: {},\n            editRoundNames: false,\n            newRoundNames: [],\n        };\n    }\n\n    componentDidMount() {\n        const { name } = this.props.match.params;\n        const self = this;\n        this.quizRef = firebase.database().ref('quizzes').child(name);\n        this.quizRef.on('value', snapshot => {\n            const quiz = snapshot.val();\n            let newRoundNames = [];\n            if (quiz && quiz.rounds) {\n                if (Object.keys(quiz.rounds).length !== newRoundNames.length) {\n                    newRoundNames = getSortedRoundNames(quiz.rounds)\n                }\n            }\n            self.setState({\n                quiz,\n                newRoundNames\n            });\n        });\n    }\n\n    addNewRound = () => {\n        const { quiz } = this.state;\n        const rounds = quiz.rounds;\n        if (rounds) {\n            const roundIndex = Object.keys(rounds).length;\n            quiz.rounds['Round ' + (roundIndex+1)] = {'name': 'Round ' + (roundIndex+1), 'position': roundIndex};\n        } else {\n            quiz.rounds = {'Round 1': {'name': 'Round 1', 'position': 0}};\n        }\n        this.quizRef.set(quiz);\n    };\n\n    removeTeam = (teamName) => {\n        //TODO: Should prob remove all their results to avoid errors, but that won't really happen in real uses\n        const { quiz } = this.state;\n        delete quiz.teams[teamName];\n        this.quizRef.set(quiz);\n    };\n\n    renderTeams = () => {\n        const { quiz } = this.state;\n        const teams = quiz.teams;\n        return teams && (\n            <div>\n                <h3>Teams registered:</h3>\n                {Object.keys(teams).map(teamName => {\n                    return <div>\n                        {teamName}\n                        <button onClick={() => this.removeTeam(teamName)}>X</button>\n                    </div>\n                })}\n            </div>\n        )\n    };\n\n    renderPanel = (roundName) => {\n        return roundName\n    };\n\n    deleteRound = (e, roundName) => {\n        const { quiz } = this.state;\n        e.stopPropagation();\n        const pos = quiz.rounds[roundName].position;\n        delete quiz.rounds[roundName];\n        Object.keys(quiz.rounds).forEach(roundName => {\n            const round = quiz.rounds[roundName];\n            if (pos < round.position) {\n                round.position = round.position-1;\n            }\n        });\n        this.quizRef.set(quiz);\n    };\n\n    deletePanel = (roundName) => {\n        return <Popconfirm\n            placement=\"topRight\"\n            title=\"Are you sure delete this round? This will remove all questions in it permanently\"\n            onConfirm={(e) => this.deleteRound(e, roundName)}\n            onCancel={(e) => e.stopPropagation()}\n            okText=\"Yes\"\n            cancelText=\"No\"\n        >\n            <button onClick={e => e.stopPropagation()}>Delete</button>\n        </Popconfirm>\n    };\n\n    updateNewRoundName = (e,i) => {\n        const { newRoundNames } = this.state;\n        newRoundNames[i] = e.target.value;\n        this.setState({\n            newRoundNames\n        })\n    };\n\n    changeRoundName = (i) => {\n        const { newRoundNames, quiz } = this.state;\n        const newRoundName = newRoundNames[i];\n        const oldRoundName = getSortedRoundNames(quiz.rounds)[i];\n        if (oldRoundName !== newRoundName) {\n            quiz.rounds[newRoundName] = quiz.rounds[oldRoundName];\n            quiz.rounds[newRoundName].name = newRoundName;\n            delete quiz.rounds[oldRoundName];\n            this.quizRef.set(quiz);\n        }\n    };\n\n    moveRoundUp = (i) => {\n        const { quiz } = this.state;\n        const sortedRounds = getSortedRoundNames(quiz.rounds);\n        const roundAbove = quiz.rounds[sortedRounds[i-1]];\n        const currRound = quiz.rounds[sortedRounds[i]];\n        const posAbove = roundAbove.position;\n        const currPosition = currRound.position;\n        roundAbove.position = currPosition;\n        currRound.position = posAbove;\n        this.quizRef.set(quiz);\n    }\n\n    moveRoundDown = (i) => {\n        const { quiz } = this.state;\n        const sortedRounds = getSortedRoundNames(quiz.rounds);\n        const roundBelow = quiz.rounds[sortedRounds[i+1]];\n        const currRound = quiz.rounds[sortedRounds[i]];\n        const posBelow = roundBelow.position;\n        const currPosition = currRound.position;\n        roundBelow.position = currPosition;\n        currRound.position = posBelow;\n        this.quizRef.set(quiz);\n    }\n\n    renderEditFileNames = () => {\n        const { newRoundNames, editRoundNames } = this.state;\n        return <div>\n            <button onClick={() => this.setState({editRoundNames: !editRoundNames})}>{(editRoundNames ? \"Hide \" : \"Show \") + \" edit round names/positions\"}</button>\n            {editRoundNames && newRoundNames.map((roundName, i) => {\n                return <div style={{display: 'flex', flexDirection: 'row'}}>\n                    <Input style={{width: 300}} value={roundName} onChange={e => this.updateNewRoundName(e,i)} />\n                    {i > 0 && <button onClick={() => this.moveRoundUp(i)}>Move Up</button>}\n                    {i < newRoundNames.length-1 && <button onClick={() => this.moveRoundDown(i)}>Move Down</button>}\n                    <button onClick={() => this.changeRoundName(i)}>Update</button>\n                </div>\n            })}\n        </div>\n    };\n\n    viewResults = (roundName) => {\n        const { name } = this.props.match.params;\n        return <Link to={`/host/${name}/${roundName}/results`}>\n            <button>View Results</button>\n        </Link>\n    };\n\n    viewParticipantView = (roundName) => {\n        const { name } = this.props.match.params;\n        return <Link to={`/participant/${name}/${roundName}`}>\n            <button>Take this round</button>\n        </Link>\n    };\n\n    extra = (roundName) => {\n        return <div style={{display: 'flex', flexDirection: 'row'}}>\n            {this.viewParticipantView(roundName)}\n            {this.viewResults(roundName)}\n            {this.deletePanel(roundName)}\n        </div>\n    };\n\n    render() {\n        const { quiz, newRoundNames } = this.state;\n        const rounds = quiz.rounds;\n        return (\n            <div>\n                <h1>{quiz && quiz.name}</h1>\n                <Link to={'/register/' + quiz.name}>\n                    <button>Register a new team</button>\n                </Link>\n                {this.renderTeams()}\n                <Collapse>\n                    {rounds && getSortedRoundNames(rounds).map((roundName, i) => {\n                        const round = rounds[roundName];\n                        return <Panel header={this.renderPanel(roundName)} key={i} extra={this.extra(roundName)}>\n                            <RoundCreator round={round} roundRef={this.quizRef.child('rounds').child(roundName)} />\n                        </Panel>\n                    })}\n                </Collapse>\n                <button onClick={this.addNewRound}>Add New Round</button>\n                {this.renderEditFileNames()}\n            </div>\n        );\n    }\n}\n\nexport default withRouter(QuizCreator)","import React from 'react';\nimport firebase from 'firebase';\nimport { Input } from \"antd\";\nimport {\n    Link\n} from \"react-router-dom\";\n\nexport default class ParticipantHomePage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quizzes: {},\n        };\n    }\n\n    componentDidMount() {\n        const self = this;\n        this.quizzesRef = firebase.database().ref('quizzes');\n        this.quizzesRef.on('value', snapshot => {\n            self.setState({\n                quizzes: snapshot.val(),\n            });\n        });\n    }\n\n    displayQuiz = (quiz, i) => {\n        return <Link to={'/participant/' + quiz.name}>\n            <button>{quiz.name}</button>\n        </Link>\n    };\n\n    render() {\n        const { quizzes } = this.state;\n        return (\n            <div className=\"tt-background-outer\">\n                <div className=\"tt-background-inner\">\n                    <div className='quiz-container'>\n\n                        {Object.keys(quizzes).map((quizName, i) => {\n                            return <div style={{margin: 30}}>\n                                    {this.displayQuiz(quizzes[quizName], i)}\n                            </div>\n                        })}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport firebase from 'firebase';\nimport { Select, Table } from 'antd';\nimport {\n    Link,\n    useParams,\n    withRouter,\n} from \"react-router-dom\";\nimport {getSortedRoundNames} from \"../../helpers/RoundNameSorter\";\n\nconst { Option } = Select;\n\nconst teamNameColumn = {\n    title: 'Team Name',\n    dataIndex: 'teamName',\n    key: 'teamName',\n};\n\nconst totalColumn = {\n    title: 'Total',\n    dataIndex: 'total',\n    key: 'total',\n};\n\nclass Scoreboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quiz: {},\n        };\n    }\n\n    componentDidMount() {\n        const { name } = this.props.match.params;\n        const self = this;\n        this.quizRef = firebase.database().ref('quizzes').child(name);\n        this.quizRef.on('value', snapshot => {\n            const quiz = snapshot.val();\n            self.setState({\n                quiz,\n            });\n        });\n    }\n\n    createTotalTeamScores = (teamScores) => {\n        teamScores.forEach(teamScore => {\n            let total = 0;\n            Object.keys(teamScore).filter(key => key !== 'teamName' && key !== 'total').forEach(key => {\n                total += parseFloat(teamScore[key]);\n            });\n            teamScore.total = total;\n        })\n    };\n\n    render() {\n        const { quiz } = this.state;\n        const { teams, rounds } = quiz;\n        let teamScores;\n        if (teams) {\n            teamScores = Object.keys(teams).map(teamName => {\n                return {teamName: teamName}\n            });\n        }\n        let roundNames = [];\n        if (rounds) {\n            roundNames = getSortedRoundNames(rounds);\n            roundNames.forEach(roundName => {\n                const round = rounds[roundName];\n                if (round.questions) {\n                    round.questions.forEach(question => {\n                        if (question.scores) {\n                            Object.keys(question.scores).forEach(teamName => {\n                                let teamScore = teamScores.filter(elem => elem.teamName === teamName)[0];\n                                if (!teamScore) {\n                                    return;\n                                }\n                                let score;\n                                if (isNaN(question.scores[teamName]) || question.scores[teamName] === '') {\n                                    score = 0;\n                                } else {\n                                    score = parseFloat(question.scores[teamName]);\n                                }\n                                if (teamScore.hasOwnProperty(round.name)) {\n                                    teamScore[round.name] += score;\n                                } else {\n                                    teamScore[round.name] = score;\n                                }\n                            })\n                        }\n                    })\n                }\n            })\n        }\n        const roundColumns = roundNames.map(roundName => {\n            return {\n                title: roundName.length > 30 ? roundName.substring(0,30) + '...' : roundName,\n                dataIndex: roundName,\n                key: roundName,\n            }\n        });\n        if (teamScores) {\n            this.createTotalTeamScores(teamScores);\n            teamScores.sort((a,b) => b.total - a.total);\n        }\n        const columns = [teamNameColumn, ...roundColumns, totalColumn];\n        return (\n            <div>\n                <Table columns={columns} dataSource={teamScores}/>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Scoreboard)","import React from 'react';\nimport firebase from 'firebase';\nimport { Collapse } from 'antd';\nimport {\n    Link,\n    useParams,\n    withRouter,\n} from \"react-router-dom\";\nimport {getSortedRoundNames} from \"../../helpers/RoundNameSorter\";\nimport Scoreboard from \"../results/Scoreboard\";\n\nclass QuizTaker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quiz: {},\n        };\n    }\n\n    componentDidMount() {\n        const { name } = this.props.match.params;\n        const self = this;\n        this.quizRef = firebase.database().ref('quizzes').child(name);\n        this.quizRef.on('value', snapshot => {\n            self.setState({\n                quiz: snapshot.val(),\n            });\n        });\n    }\n\n    render() {\n        const { quiz } = this.state;\n        const rounds = quiz.rounds;\n        return (\n            <div>\n                <h1>{quiz && quiz.name}</h1>\n                {rounds && getSortedRoundNames(rounds).map((roundName, i) => {\n                    const round = rounds[roundName];\n                    return <div style={{display: 'flex', flexDirection: 'row'}}>\n                        <p>{roundName}</p>\n                        <div style={{marginLeft: 10, marginRight: 30}}>\n                            {round.show && <Link to={`/participant/${quiz.name}/${round.name}`}>Take round</Link>}\n                        </div>\n                        <div>\n                            {round.finished && <Link to={`/participant/${quiz.name}/${round.name}/results`}>View results</Link>}\n                        </div>\n                    </div>\n                })}\n                <Scoreboard/>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(QuizTaker)","import React from 'react';\nimport { Input } from \"antd\";\n\nexport default class TextInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer: '',\n        };\n    }\n\n    updateAnswer = (e) => {\n        this.setState({\n            answer: e.target.value,\n        })\n    };\n\n    render() {\n        const { answer } = this.state;\n        return (\n            <Input value={answer} onChange={this.updateAnswer} />\n        );\n    }\n\n}","import React from 'react';\nimport { Input } from \"antd\";\n\nexport default class NumberInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer: '',\n        };\n    }\n\n    updateAnswer = (e) => {\n        const value = e.target.value;\n        if (value === '-' || value === '' || !isNaN(value) || value.indexOf('e') === value.length-1) {\n            this.setState({answer: value})\n        }\n    };\n\n    render() {\n        const { answer } = this.state;\n        return (\n            <Input value={answer} onChange={this.updateAnswer} />\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, Radio} from 'antd';\n\nconst { Option } = Select;\n\nexport default class MultipleChoice extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer: null,\n        };\n    }\n\n    onChange = e => {\n        this.setState({\n            answer: e.target.value,\n        });\n    };\n\n    render() {\n        const { choices } = this.props;\n        const { answer } = this.state;\n        return (\n            <div>\n                <Radio.Group onChange={this.onChange} value={answer}>\n                    {choices.map((choice, i) => {\n                        return <div>\n                            <Radio value={choice}>{choice}</Radio>\n                        </div>\n                    })}\n                </Radio.Group>\n\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport {Input} from \"antd\";\n\nexport default class SpeedClues extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer: '',\n        };\n    }\n\n    updateAnswer = (e) => {\n        this.setState({\n            answer: e.target.value,\n        })\n    };\n\n    render() {\n        const { clues } = this.props;\n        const { answer } = this.state;\n        return (\n            <div>\n                {clues.map(clue => {\n                    return clue.show && <div>\n                        {clue.clue}\n                    </div>\n                })}\n                <Input value={answer} onChange={this.updateAnswer}/>\n            </div>\n        );\n    }\n\n}","export function submitAnswer(answers, name, round, roundRef, teamName, customScores) {\n    const { questions } = round;\n    questions.forEach((question, i) => {\n        if (answers[i]) {\n            const questionRef = roundRef.child('questions').child(i);\n            let score = parseFloat(question.score);\n\n            // Update for custom, user-assigned scoring\n            if (round.customScoringEnabled && customScores[i]) {\n                score = parseFloat(customScores[i]);\n                if (question.questionType === 'multiple_answers') {\n                    question.customScores = [];\n                    for (let j = 0; j < question.multipleScores.length; j++) {\n                        if (j === question.multipleScores.length-1) {\n                            question.customScores.push(score);\n                        } else {\n                            question.customScores.push(0);\n                        }\n                    }\n                }\n            }\n\n            const points = gradeQuestion(question, answers[i].answer, questionRef, teamName, score);\n            let userAnswer = answers[i].answer;\n            if (round.customScoringEnabled && customScores[i]) {\n                userAnswer += (' (for ' + customScores[i] + \"point(s))\");\n            }\n            if (question.questionType !== 'closest') {\n                updateDatabase(question, questionRef, points, teamName, userAnswer);\n            }\n            console.log(\"Question \" + (i+1) + \": \" + points + \" points\");\n        }\n    });\n}\n\nfunction updateDatabase(question, questionRef, points, teamName, userAnswer) {\n    questionRef.child('userAnswer').update({[teamName]: userAnswer});\n    questionRef.child('scores').update({[teamName]: points})\n}\n\nfunction gradeQuestion(question, answer, questionRef, teamName, score) {\n    if (answer === '' || answer === undefined || answer === null) {\n        return 0;\n    } else {\n        try {\n            answer = answer.toLowerCase();\n        } catch(err) {\n            // Numbers can't go to lower case\n        }\n        const { questionType } = question;\n        if (questionType === 'text') {\n            return gradeTextQuestion(question, answer) ? score : 0;\n        }\n        if (questionType === 'number') {\n            return gradeNumberQuestion(question, answer) ? score : 0;\n        }\n        if (questionType === 'closest') {\n            return gradeClosestQuestion(question, answer, questionRef, teamName);\n        }\n        if (questionType === 'multiple_choice') {\n            return gradeMultipleChoiceQuestion(question, answer) ? score : 0;\n        }\n        if (questionType === 'multiple_answers') {\n            let numCorrect = 0;\n            question.multipleAnswers.forEach((a,i) => {\n                for (let j = 0; j < answer.length; j++) {\n                    if (gradeTextQuestion(a, answer[j])) {\n                        numCorrect++;\n                        break;\n                    }\n                }\n            });\n            if (numCorrect > 0) {\n                if (question.customScores) {\n                    return question.customScores[numCorrect-1]\n                } else {\n                    return question.multipleScores[numCorrect-1];\n                }\n            }\n            return 0;\n        }\n        if (questionType === 'speed') {\n            return gradeSpeedQuestion(question, answer, questionRef, teamName);\n        }\n    }\n}\n\nfunction gradeTextQuestion(question, answer) {\n    const { answerType, possibleAnswers } = question;\n    for (let i = 0; i < possibleAnswers.length; i++) {\n        try {\n            answer = answer.toLowerCase();\n        } catch(err) {\n\n        }\n        let possibleAnswer = possibleAnswers[i];\n        try {\n            possibleAnswer = possibleAnswers[i].toLowerCase();\n        } catch(err) {\n            // Numbers can't go to lower case\n        }\n        if (answerType === 'exactly' && possibleAnswer === answer) {\n            return true;\n        }\n        if (answerType === 'contains' && answer.includes(possibleAnswer)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction gradeNumberQuestion(question, answer) {\n    let margin;\n    try {\n        margin = parseFloat(question.margin);\n    } catch(err) {\n        margin = 0;\n    }\n    const correctAnswer = parseFloat(question.numberAnswer);\n    return (parseFloat(answer) >= (correctAnswer - margin) && parseFloat(answer) <= (correctAnswer + margin));\n}\n\nfunction gradeMultipleChoiceQuestion(question, answer) {\n    let correctChoice = question.correctChoice;\n    try {\n        correctChoice = correctChoice.toLowerCase();\n    } catch(err) {\n\n    }\n    return correctChoice === answer;\n}\n\nfunction gradeClosestQuestion(question, userAnswer, questionRef, teamName) {\n    let { numberAnswer, positionScoring } = question;\n    questionRef.child('userAnswer').update({[teamName]: userAnswer}).then(() => {\n        // This avoids the case where 2 people submit at the same time, and so they don't know about each-other\n        questionRef.child('userAnswer').once('value').then(data => {\n            const userAnswers = data.val();\n            const closenessOrder = getClosenessOrder(userAnswers, numberAnswer);\n            const scoring = {};\n            closenessOrder.forEach((team, i) => {\n                if (i > 0 && parseFloat(userAnswers[closenessOrder[i-1]]) === parseFloat(userAnswers[team])) {\n                    scoring[team] = scoring[closenessOrder[i-1]];\n                } else {\n                    if (i < positionScoring.length) {\n                        scoring[team] = parseFloat(positionScoring[i]);\n                    } else {\n                        scoring[team] = 0;\n                    }\n                }\n            });\n            questionRef.child('scores').set(scoring);\n        });\n    });\n}\n\nfunction gradeSpeedQuestion(question, answer, questionRef, teamName) {\n    let { guesses, scoreType, clues, positionScoring } = question;\n    if (guesses === undefined) {\n        guesses = [];\n    }\n    let cluesRevealed = 0;\n    clues.forEach(clue => {\n        if (clue.show) {\n            cluesRevealed++;\n        }\n    });\n    const correct = gradeTextQuestion(question, answer);\n    guesses.push({guess: answer, teamName: teamName, cluesRevealed: cluesRevealed, correct: correct});\n    question.guesses = guesses;\n    questionRef.set(question);\n    if (!correct) {\n        // Incorrect answer\n        return 0;\n    }\n    if (scoreType === 'clues_revealed') {\n        if (cluesRevealed === 0) {\n            // Guess before any clues are revealed?\n            return positionScoring[0];\n        } else {\n            return positionScoring[cluesRevealed-1];\n        }\n    }\n    if (scoreType === 'position') {\n        const correctAnswers = guesses.filter(guess => gradeTextQuestion(question, guess.guess));\n        if (correctAnswers.length > positionScoring.length) {\n            return 0;\n        } else {\n            return positionScoring[correctAnswers.length-1];\n        }\n    }\n}\n\nfunction getClosenessOrder(userAnswers, numberAnswer) {\n    return Object.keys(userAnswers).sort((a,b) => {\n        return Math.abs(parseFloat(userAnswers[a]) - parseFloat(numberAnswer)) - Math.abs(parseFloat(userAnswers[b]) - parseFloat(numberAnswer));\n    })\n}","import React from 'react';\nimport TextInput from \"./TextInput\";\nimport {Input} from \"antd\";\n\nexport default class MultipleAnswersInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer: props.multipleAnswers.map(() => ''),\n        };\n    }\n\n    updateAnswer = (e, i) => {\n        const { answer } = this.state;\n        answer[i] = e.target.value;\n        this.setState({\n            answer\n        })\n    };\n\n    render() {\n        const { multipleAnswers } = this.props;\n        const { answer } = this.state;\n        return multipleAnswers ? multipleAnswers.map((answer, i) => {\n            return <div style={{display: 'flex', flexDirection: 'row'}}>\n                Answer {i+1}: <Input value={answer[i]} onChange={e => this.updateAnswer(e,i)} />\n            </div>\n        }) : <div/>\n    }\n\n}","import React from 'react';\nimport firebase from 'firebase';\nimport {Alert, Select} from 'antd';\nimport {\n    Link,\n    useParams,\n    withRouter,\n} from \"react-router-dom\";\nimport TextInput from \"./user_input/TextInput\";\nimport NumberInput from \"./user_input/NumberInput\";\nimport MultipleChoice from \"./user_input/MultipleChoice\";\nimport SpeedClues from \"./speed_clues/SpeedClues\";\nimport {submitAnswer, submitSpeedAnswer} from \"../../helpers/AnswerPoster\";\nimport MultipleAnswersInput from \"./user_input/MultipleAnswersInput\";\nimport ImageDisplay from \"../media_display/ImageDisplay\";\nimport {ResizableBox} from \"react-resizable\";\n\nconst { Option } = Select;\n\nclass RoundTaker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            round: {},\n            userInputRefs: [],\n            selectedTeam: null,\n            teams: [],\n            customScores: [],\n            customScoresError: null,\n        };\n    }\n\n    componentDidMount() {\n        const { name, round } = this.props.match.params;\n        const self = this;\n        this.roundRef = firebase.database().ref('quizzes').child(name).child('rounds').child(round);\n        this.roundRef.on('value', snapshot => {\n            const round = snapshot.val();\n            let { customScores, userInputRefs } = self.state;\n            if (customScores.length !== round.questions.length) {\n                customScores = round.questions.map(() => undefined);\n                userInputRefs = round.questions.map(() => React.createRef());\n            }\n            self.setState({\n                round,\n                userInputRefs: userInputRefs,\n                customScores: customScores,\n            });\n        });\n        this.teamRef = firebase.database().ref('quizzes').child(name).child('teams');\n        this.teamRef.on('value', snapshot => {\n            const teams = snapshot.val();\n            self.setState({\n                teams,\n            });\n        });\n    }\n\n    userInput = (question, i) => {\n        const { questionType } = question;\n        const { userInputRefs } = this.state;\n        if (questionType === 'text') {\n            return <TextInput ref={userInputRefs[i]}/>\n        }\n        if (questionType === 'number' || questionType === 'closest') {\n            return <NumberInput ref={userInputRefs[i]}/>\n        }\n        if (questionType === 'multiple_choice') {\n            return <MultipleChoice choices={question.choices} ref={userInputRefs[i]}/>\n        }\n        if (questionType === 'speed') {\n            return <SpeedClues clues={question.clues} ref={userInputRefs[i]} submit={answer => this.submitSpeedQuestion(answer, i)}/>\n        }\n        if (questionType === 'multiple_answers') {\n            return <MultipleAnswersInput multipleAnswers={question.multipleAnswers} ref={userInputRefs[i]}/>\n        }\n    };\n\n    changeCustomScore = (e,i) => {\n        const { customScores, round } = this.state;\n        customScores[i] = e;\n        let customScoresError = false;\n        let numbers = [0,0,0];\n        customScores.forEach(score => {\n            if (score === '1') {\n                numbers[0]++;\n            } else if (score === '2') {\n                numbers[1]++;\n            } else if (score === '3') {\n                numbers[2]++;\n            }\n        });\n        numbers.forEach((number, i) => {\n            if (number > parseInt(round.customScores[i])) {\n                customScoresError = \"Too many \" + (i+1) + \" points\";\n            }\n        });\n        this.setState({\n            customScores,\n            customScoresError\n        })\n    };\n\n    selectCustomScore = (i) => {\n        const { customScores, customScoresError } = this.state;\n        return <div style={{display: 'flex', flexDirection: 'row'}}>\n            <Select placeholder=\"points...\" value={customScores[i]} style={{width: 100, height: 40}} onChange={e => this.changeCustomScore(e,i)}>\n                <Option value={'0'}>0</Option>\n                <Option value={'1'}>1</Option>\n                <Option value={'2'}>2</Option>\n                <Option value={'3'}>3</Option>\n            </Select>\n            {customScoresError && <p style={{color: 'red'}}>{customScoresError}</p>}\n        </div>\n    };\n\n    displayQuestion = (question, i, customScoringEnabled) => {\n        if (question.questionType === 'speed' && !question.begin) {\n            return;\n        }\n        let score;\n        try {\n            if (question.score) {\n                score = `(${question.score} point(s))`\n            }\n            if (question.multipleScores && Array.isArray(question.multipleScores) && question.multipleScores.length > 0) {\n                score = `(${question.multipleScores[question.multipleScores.length-1]} point(s))`\n            }\n        } catch(err) {\n            // Trouble parsing score -- Idk why this would happen\n        }\n\n        return <div style={{border: '2px solid black', width: question.imageId ? \"\" : \"100%\"}}>\n            {/*If the question doesn't have media, it should take up the whole row*/}\n            <div>\n                <div style={{display: 'flex', flexDirection: 'row'}}>\n                    <h4>Q{i+1}: {question.question} {score}</h4>\n                    {customScoringEnabled && this.selectCustomScore(i)}\n                </div>\n                {question.imageId && <ImageDisplay width={600} height={600} imageId={question.imageId}/>}\n            </div>\n            {this.userInput(question, i)}\n        </div>\n    };\n\n    submitSpeedQuestion = (answer, i) => {\n        const { name } = this.props.match.params;\n        const { round, selectedTeam } = this.state;\n        if (selectedTeam === null) {\n            return;\n        }\n        const answers = round.questions.map(() => null);\n        answers[i] = {\"answer\": answer};\n        submitAnswer(answers, name, round, this.roundRef, selectedTeam);\n    };\n\n    submitRound = () => {\n        const { name } = this.props.match.params;\n        const { round, userInputRefs, selectedTeam, customScores } = this.state;\n        if (selectedTeam === null) {\n            return;\n        }\n        const answers = [];\n        userInputRefs.forEach(ref => {\n            if (ref.current) {\n                answers.push(ref.current.state)\n            } else {\n                answers.push(null);\n            }\n        });\n        submitAnswer(answers, name, round, this.roundRef, selectedTeam, customScores);\n    };\n\n    changeSelectedTeam = (e) => {\n        this.setState({\n            selectedTeam: e,\n        })\n    };\n\n    selectTeam = () => {\n        const { selectedTeam, teams } = this.state;\n        return <Select value={selectedTeam} style={{width: 200, height: 40}} onChange={this.changeSelectedTeam}>\n            {teams && Object.keys(teams).map(teamName => <Option value={teamName}>{teamName}</Option>)}\n        </Select>\n    };\n\n    render() {\n        const { round, selectedTeam } = this.state;\n        const { name } = this.props.match.params;\n        this.userInputRefs = [];\n        return (\n            <div>\n                <Link to={'/participant/' + name}>\n                    <button>Home screen</button>\n                </Link>\n                <br/>\n                {round.description && <div style={{border: '2px solid black'}}>\n                    <h3>Round description:</h3>\n                    {round.description.split(\"\\n\").map(line => <div>{line}</div>)}\n                </div>}\n                <br/>\n                Select your team: {this.selectTeam()}\n                {!selectedTeam && <Alert message={\"You must select a team before submitting\"} type=\"warning\" />}\n                <h1>{round && round.name}</h1>\n                <div style={{display: 'flex', flexWrap: 'wrap'}}>\n                    {round && round.questions && round.questions.map((q, i) => this.displayQuestion(q,i,round.customScoringEnabled))}\n                </div>\n                {!selectedTeam && <Alert message={\"You must select a team before submitting\"} type=\"warning\" />}\n                {selectedTeam && <Link to={'/participant/' + name + '/' + round.name + '/results/' + selectedTeam} >\n                    <button onClick={this.submitRound}>Submit all answers for this round</button>\n                </Link>}\n            </div>\n        );\n    }\n}\n\nexport default withRouter(RoundTaker)","import React from 'react';\nimport firebase from 'firebase';\nimport { Input} from 'antd';\nimport {\n    withRouter,\n} from \"react-router-dom\";\n\nclass QuizTaker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quiz: {},\n            teamName: '',\n            teamMembers: [],\n            newTeamMember: '',\n        };\n    }\n\n    componentDidMount() {\n        const { name } = this.props.match.params;\n        const self = this;\n        this.quizRef = firebase.database().ref('quizzes').child(name);\n        this.quizRef.on('value', snapshot => {\n            self.setState({\n                quiz: snapshot.val(),\n            });\n        });\n    }\n\n    updateTeamName = (e) => {\n        this.setState({\n            teamName: e.target.value,\n        })\n    };\n\n    updateNewTeamMember = (e) => {\n        this.setState({\n            newTeamMember: e.target.value,\n        })\n    };\n\n    addTeamMember = () => {\n        const { teamMembers, newTeamMember } = this.state;\n        this.setState({\n            teamMembers: [...teamMembers, newTeamMember],\n            newTeamMember: '',\n        })\n    };\n\n    submitTeam = () => {\n        const { quiz, teamName, teamMembers} = this.state;\n        const { teams } = quiz;\n        if (!teams) {\n            quiz.teams = {};\n        }\n        quiz.teams[teamName] = {name: teamName, teamMembers: teamMembers};\n        this.quizRef.set(quiz);\n        this.setState({\n            teamMembers: [],\n            teamName: '',\n        })\n    };\n\n    render() {\n        const { quiz, teamName, teamMembers, newTeamMember } = this.state;\n        return (\n            <div>\n                <h1>{quiz && quiz.name}</h1>\n                Team name: <Input value={teamName} onChange={this.updateTeamName} />\n                {teamMembers.map(member => <div>{member}</div>)}\n                Add Team Member: <Input onPressEnter={this.addTeamMember} value={newTeamMember} onChange={this.updateNewTeamMember} />\n                <button onClick={this.submitTeam}>Submit Team</button>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(QuizTaker)","import React from 'react';\nimport firebase from 'firebase';\nimport { Select, Table } from 'antd';\nimport {\n    Link,\n    useParams,\n    withRouter,\n} from \"react-router-dom\";\nimport Scoreboard from \"./Scoreboard\";\n\nconst { Option } = Select;\n\nconst renderAnswers = (record) => {\n    const { questionType } = record;\n    if (questionType === 'text' || questionType === 'speed') {\n        return <div>\n            {record.answerType.toUpperCase()} [{record.possibleAnswers.join(', ')}]\n        </div>\n    }\n    if (questionType === 'number' || questionType === 'closest') {\n        return <div>\n            {record.numberAnswer}\n        </div>\n    }\n    if (questionType === 'multiple_answers') {\n        return <div>\n            {record.multipleAnswers.map((answer, i) => {\n                return <div>\n                    {i+1}: {answer.answerType.toUpperCase()} [{answer.possibleAnswers.join(', ')}]\n                </div>\n            })}\n        </div>\n    }\n    if (questionType === 'multiple_choice') {\n        return <div>\n            {record.correctChoice.toUpperCase()} from [{record.choices.join(', ')}]\n        </div>\n    }\n    return record.possibleAnswers;\n};\n\nclass RoundResults extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            round: {},\n        };\n    }\n\n    componentDidMount() {\n        const { name, round } = this.props.match.params;\n        const self = this;\n        this.roundRef = firebase.database().ref('quizzes').child(name).child('rounds').child(round);\n        this.roundRef.on('value', snapshot => {\n            const round = snapshot.val();\n            self.setState({\n                round,\n            });\n        });\n    }\n\n    renderOtherInfo = (question, teamName) => {\n        let other;\n        if (question.questionType === 'speed') {\n            if (question.guesses) {\n                const filteredGuesses = question.guesses.filter(g => g.teamName === teamName);\n                if (filteredGuesses.length > 0) {\n                    const guess = filteredGuesses[0];\n                    if (guess.cluesRevealed) {\n                        return (guess.correct ? \"CORRECT after \" : \"INCORRECT after \") + guess.cluesRevealed + \" clue(s) revealed\";\n                    }\n                }\n            }\n            return 'Testing';\n        }\n        if (question.questionType === 'multiple_answers') {\n            return question.multipleScores.map((score, i) => {\n                return <div>{`${i+1} correct: ${score} point(s)`}</div>\n            });\n        }\n    };\n\n    renderScores = (question, questionIndex) => {\n        const { columns } = this.props;\n        const { scores } = question;\n        const data = scores && Object.keys(scores).map((teamName, i) => {\n            const other = this.renderOtherInfo(question, teamName);\n            return {\n                teamName: teamName,\n                teamAnswer: question.userAnswer && question.userAnswer[teamName],\n                points: scores[teamName],\n                questionType: question.questionType,\n                questionIndex: questionIndex,\n                other\n            };\n        });\n        return <Table columns={columns} dataSource={data}/>\n    };\n\n    displayQuestion = (question, i) => {\n        let score;\n        if (question.questionType === 'speed') {\n            if (!question.userAnswer) {\n                return;\n            }\n        }\n        try {\n            if (question.score) {\n                score = `(${question.score} point(s))`\n            }\n            if (question.multipleScores && Array.isArray(question.multipleScores) && question.multipleScores.length > 0) {\n                score = `(${question.multipleScores[question.multipleScores.length-1]} point(s))`\n            }\n        } catch(err) {\n            // Trouble parsing score -- Idk why this would happen\n        }\n        return <div style={{border: '2px solid black'}}>\n            <h4>Q{i+1}: {question.question} {score}</h4>\n            {renderAnswers(question)}\n            {this.renderScores(question, i)}\n        </div>\n    };\n\n    render() {\n        const { round } = this.state;\n        return (\n            <div>\n                <h1>{round && round.name}</h1>\n                {round && round.questions && round.questions.map((q, i) => this.displayQuestion(q,i))}\n                <Scoreboard />\n            </div>\n        );\n    }\n}\n\nexport default withRouter(RoundResults)","import React from 'react';\nimport firebase from 'firebase';\nimport {withRouter} from \"react-router-dom\";\nimport RoundResults from \"../../results/RoundResults\";\nimport { Input, Popconfirm } from 'antd';\n\nclass HostRoundResults extends React.Component {\n\n    changePoints = (e, record) => {\n        const { name, round } = this.props.match.params;\n        this.scoreRef = firebase.database().ref('quizzes').child(name).child('rounds').child(round).child('questions').child(record.questionIndex).child('scores').child(record.teamName);\n        const score = e.target.value;\n        this.scoreRef.set(score);\n    };\n\n    renderAnswers = (text, record) => {\n        const { questionType } = record;\n        if (questionType === 'multiple_answers') {\n            if (Array.isArray(record.teamAnswer)) {\n                return <div>\n                    {record.teamAnswer.map(a => <div>{a}</div>)}\n                </div>\n            } else {\n                return text;\n            }\n        } else {\n            return text;\n        }\n    };\n\n    getColumns = () => {\n        return [\n            {\n                title: 'Team Name',\n                dataIndex: 'teamName',\n                key: 'teamName',\n            },\n            {\n                title: 'Team Answer',\n                dataIndex: 'teamAnswer',\n                key: 'teamAnswer',\n                render: this.renderAnswers,\n            },\n            {\n                title: 'Other',\n                dataIndex: 'other',\n                key: 'other',\n            },\n            {\n                title: 'Points',\n                dataIndex: 'points',\n                key: 'points',\n            },\n            {\n                title: 'Update points',\n                dataIndex: 'updatePoints',\n                key: 'updatePoints',\n                render: (text,record) => {\n                    return <Input style={{width: 150}} value={record.points} onChange={e => this.changePoints(e,record)}/>\n                }\n            },\n        ];\n    };\n\n    clearAllScores = () => {\n        const { name, round } = this.props.match.params;\n        firebase.database().ref('quizzes').child(name).child('rounds').child(round).child('questions').once('value').then(data => {\n            const questions = data.val();\n            questions.forEach(question => {\n                question.guesses = null;\n                question.scores = null;\n                question.userAnswer = null;\n            });\n            console.log(questions);\n            data.ref.set(questions);\n        });\n        // console.log(questionsRef);\n    };\n\n    renderClearButton = () => {\n        return <Popconfirm\n            placement=\"topRight\"\n            title=\"Are you sure clear all results for this round? Questions will remain, but all user answers/score will be deleted (used for removing test results)\"\n            onConfirm={this.clearAllScores}\n            okText=\"Yes\"\n            cancelText=\"No\"\n        >\n            <button onClick={e => e.stopPropagation()}>Clear all scores for this round</button>\n        </Popconfirm>\n    };\n\n    render() {\n        return <div>\n            {this.renderClearButton()}\n            <RoundResults columns={this.getColumns()}/>\n        </div>\n    }\n}\n\nexport default withRouter(HostRoundResults)","import React from 'react';\nimport {Link, withRouter} from \"react-router-dom\";\nimport RoundResults from \"../../results/RoundResults\";\n\nconst columns = [\n    {\n        title: 'Team Name',\n        dataIndex: 'teamName',\n        key: 'teamName',\n    },\n    {\n        title: 'Points',\n        dataIndex: 'points',\n        key: 'points',\n    },\n];\n\nclass ParticipantRoundResults extends React.Component {\n    render() {\n        const { name } = this.props.match.params;\n        return <div>\n            <Link to={'/participant/' + name}>\n                <button>Home screen</button>\n            </Link>\n            <br/>\n            <RoundResults columns={columns}/>\n        </div>\n    }\n}\n\nexport default withRouter(ParticipantRoundResults)","import React from 'react';\nimport firebase from 'firebase';\nimport { Select, Table } from 'antd';\nimport {\n    Link,\n    useParams,\n    withRouter,\n} from \"react-router-dom\";\nimport Scoreboard from \"../../results/Scoreboard\";\nimport ImageDisplay from \"../../media_display/ImageDisplay\";\n\nconst renderAnswers = (record) => {\n    const { questionType } = record;\n    if (questionType === 'text' || questionType === 'speed') {\n        return <div>\n            {record.answerType.toUpperCase()} [{record.possibleAnswers.join(', ')}]\n        </div>\n    }\n    if (questionType === 'number' || questionType === 'closest') {\n        return <div>\n            {record.numberAnswer}\n        </div>\n    }\n    if (questionType === 'multiple_answers') {\n        return <div>\n            {record.multipleAnswers.map((answer, i) => {\n                return <div>\n                    {i+1}: {answer.answerType.toUpperCase()} [{answer.possibleAnswers.join(', ')}]\n                </div>\n            })}\n        </div>\n    }\n    if (questionType === 'multiple_choice') {\n        return <div>\n            {record.correctChoice.toUpperCase()} from [{record.choices.join(', ')}]\n        </div>\n    }\n    return record.possibleAnswers;\n};\n\nclass ParticipantRoundTeamResults extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            round: {},\n        };\n    }\n\n    componentDidMount() {\n        const { name, round } = this.props.match.params;\n        const self = this;\n        this.roundRef = firebase.database().ref('quizzes').child(name).child('rounds').child(round);\n        this.roundRef.on('value', snapshot => {\n            const round = snapshot.val();\n            self.setState({\n                round,\n            });\n        });\n    }\n\n    renderUserAnswer = (answer) => {\n        if (Array.isArray(answer)) {\n            return \"[\" + answer.join(\", \") + \"]\";\n        } else {\n            return answer;\n        }\n    };\n\n    renderTeamAnswer = (question) => {\n        const { teamName } = this.props.match.params;\n        return <div>\n            <div>You put: {question.userAnswer && this.renderUserAnswer(question.userAnswer[teamName])}</div>\n            <div style={{display: 'flex', flexDirection: 'row'}}>Correct answer:&nbsp;{renderAnswers(question)}</div>\n            <div>You got: {question.scores && question.scores[teamName]} point(s) for this question</div>\n        </div>\n    };\n\n    displayQuestion = (question, i) => {\n        const { teamName } = this.props.match.params;\n        let score;\n        if (question.questionType === 'speed') {\n            if (!question.userAnswer || !question.userAnswer.hasOwnProperty(teamName)) {\n                return;\n            }\n        }\n        try {\n            if (question.score) {\n                score = `(${question.score} point(s))`\n            }\n            if (question.multipleScores && Array.isArray(question.multipleScores) && question.multipleScores.length > 0) {\n                score = `(${question.multipleScores[question.multipleScores.length-1]} point(s))`\n            }\n        } catch(err) {\n            // Trouble parsing score -- Idk why this would happen\n        }\n        return <div style={{border: '2px solid black'}}>\n            <h4>Q{i+1}: {question.question} {score}</h4>\n            {question.imageId && <ImageDisplay width={300} height={200} imageId={question.imageId}/>}\n            {this.renderTeamAnswer(question)}\n        </div>\n    };\n\n    renderTeamScore = () => {\n        const { round } = this.state;\n        const { teamName } = this.props.match.params;\n        let totalScore = 0;\n        let teamScore = 0;\n        round.questions && round.questions.forEach(question => {\n            const { questionType } = question;\n            if (round.customScoringEnabled && round.customScores) {\n                // Could do this outside loop, but this works\n                totalScore = parseFloat(round.customScores[0]) + (parseFloat(round.customScores[1])*2) + (parseFloat(round.customScores[2])*3)\n            } else {\n                if (questionType === 'text' || questionType === 'number' || questionType === 'multiple_choice') {\n                    totalScore += parseFloat(question.score);\n                } else if (questionType === 'closest' || questionType === 'speed') {\n                    totalScore += parseFloat(question.positionScoring[0])\n                } else if (questionType === 'multiple_answers') {\n                    totalScore += parseFloat(question.multipleScores[question.multipleScores.length - 1]);\n                }\n            }\n            if (question.scores) {\n                teamScore += parseFloat(question.scores[teamName]);\n            }\n        });\n        teamScore = isNaN(teamScore) ? 0 : teamScore;\n        return teamScore + \" / \" + totalScore;\n    };\n\n    renderTopBottomButtons() {\n        const { round } = this.state;\n        const { name } = this.props.match.params;\n        let hasSpeedQuestions = round.questions && round.questions.filter(q => q.questionType === 'speed').length > 0;\n        return <div>\n            <Link to={'/participant/' + name}>\n                <button>Home screen (for next round)</button>\n            </Link>\n            {!hasSpeedQuestions && <Link to={'/participant/' + name + '/' + round.name + '/results'}>\n                <button>See how everyone else did</button>\n            </Link>}\n        </div>\n    }\n\n    render() {\n        const { round } = this.state;\n        const { name, teamName } = this.props.match.params;\n        return (\n            <div>\n                {this.renderTopBottomButtons()}\n                <h1>{round && round.name}. Results for {teamName}: {this.renderTeamScore()}</h1>\n                {round && round.questions && round.questions.map((q, i) => this.displayQuestion(q,i))}\n                <Scoreboard />\n                {this.renderTopBottomButtons()}\n            </div>\n        );\n    }\n}\n\nexport default withRouter(ParticipantRoundTeamResults)","import React from 'react';\nimport 'antd/dist/antd.css'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useParams,\n    HashRouter,\n} from \"react-router-dom\";\nimport HostHomePage from \"./host/HostHomePage\";\nimport QuizCreator from \"./host/QuizCreator\";\nimport ParticipantHomePage from \"./participant/ParticipantHomePage\";\nimport QuizTaker from \"./participant/QuizTaker\";\nimport RoundTaker from \"./participant/RoundTaker\";\nimport Register from \"./register/Register\";\nimport HostRoundResults from \"./host/results/HostRoundResults\";\nimport ParticipantRoundResults from \"./participant/results/ParticipantRoundResults\";\nimport ParticipantRoundTeamResults from \"./participant/results/ParticipantRoundTeamResults\";\n\n\nexport default class HomePage extends React.Component {\n\n    render() {\n        return (\n            <HashRouter basename={'/'}>\n                <Route exact path={'/'}>\n                    <ParticipantHomePage/>\n                </Route>\n                <Route exact path={'/participant'}>\n                    <ParticipantHomePage/>\n                </Route>\n                <Route exact path={'/host'}>\n                    <HostHomePage firebase />\n                </Route>\n                <Route exact path={'/host/:name'}>\n                    <QuizCreator/>\n                </Route>\n                <Route exact path={'/participant/:name'}>\n                    <QuizTaker/>\n                </Route>\n                <Route exact path={'/participant/:name/:round'}>\n                    <RoundTaker/>\n                </Route>\n                <Route exact path={'/participant/:name/:round/results'}>\n                    <ParticipantRoundResults/>\n                </Route>\n                <Route exact path={'/host/:name/:round/results'}>\n                    <HostRoundResults/>\n                </Route>\n                <Route exact path={'/participant/:name/:round/results/:teamName'}>\n                    <ParticipantRoundTeamResults/>\n                </Route>\n                <Route exact path={'/register/:name'}>\n                    <Register/>\n                </Route>\n                {/*<img src={'https://firebasestorage.googleapis.com/v0/b/trivia-7b47d.appspot.com/o/images%2F1592760080949?alt=media&token=3b7faec9-07e1-4e41-afdf-06b8d408fbee.png'}/>*/}\n\n            </HashRouter>\n        );\n    }\n}","import React from 'react';\nimport HomePage from \"./components/HomePage\";\nimport app from 'firebase/app';\nimport 'antd/dist/antd.css'\nimport './App.css';\n\nvar config = {\n    apiKey: \"AIzaSyBfCWC3nO4Dm6t_Mdi023zABHHKzrOdQkI\",\n    authDomain: \"trivia-7b47d.firebaseapp.com\",\n    databaseURL: \"https://trivia-7b47d.firebaseio.com\",\n    projectId: \"trivia-7b47d\",\n    storageBucket: \"trivia-7b47d.appspot.com\",\n    messagingSenderId: \"1017757056711\",\n};\n\napp.initializeApp(config);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <HomePage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}