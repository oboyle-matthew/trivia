{"version":3,"sources":["components/host/HostHomePage.js","components/old_stuff/Questions.js","components/old_stuff/LevenshteinDistance.js","components/host/question_components/Question.js","components/host/question_components/QuestionType.js","components/host/answer_components/TextAnswer.js","components/host/answer_components/NumberAnswer.js","components/host/answer_components/ClosestNumber.js","components/host/answer_components/MultipleChoice.js","components/host/answer_components/SpeedRound.js","components/host/answer_components/MultipleAnswers.js","components/host/score_components/SingleScore.js","components/host/QuestionCreator.js","helpers/QuestionPoster.js","components/host/RoundCreator.js","components/host/QuizCreator.js","components/participant/QuizTaker.js","components/participant/ParticipantHomePage.js","components/participant/user_input/TextInput.js","components/participant/user_input/NumberInput.js","components/participant/user_input/MultipleChoice.js","components/participant/speed_clues/SpeedClues.js","helpers/AnswerPoster.js","components/participant/user_input/MultipleAnswersInput.js","components/participant/RoundTaker.js","components/register/Register.js","components/results/Scoreboard.js","components/results/RoundResults.js","components/host/results/HostRoundResults.js","components/participant/results/ParticipantRoundResults.js","components/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["React","Component","Select","Option","Question","props","updateQuestionString","e","setState","questionString","target","value","state","onChange","this","QuestionType","questionType","style","width","height","update","TextAnswer","changeNewAnswer","newAnswer","changeAnswerType","answerType","addPossibleAnswer","possibleAnswers","toLowerCase","removePossibleAnswer","i","splice","getInfoForPosting","length","indexOf","push","grid","column","dataSource","renderItem","item","Item","onClick","onPressEnter","placeholder","NumberAnswer","changeAnswer","isNaN","numberAnswer","changeMargin","margin","display","flexDirection","parseFloat","ClosestNumber","updateScore","positionScoring","addPosition","removePosition","renderPositionScores","map","score","MultipleChoice","choices","correctChoice","changeNewOption","newOption","addChoice","removeOption","Group","choice","SpeedRound","clues","scoreType","cluesRevealedScore","positionScores","infoForPosting","textAnswerRef","current","clue","updateClue","removeClue","addClue","renderClues","changeScoreType","updatePositionScore","removePositionScore","addPositionScore","renderScoring","renderCluesRevealedScores","updateCluesRevealedScore","createRef","ref","MultipleAnswers","multipleScores","scores","multipleAnswers","scoresRefs","addAnswer","removeLastAnswer","pop","elem","SingleScore","placeHolder","QuestionCreator","updateQuestionType","displayPossibleAnswers","possibleAnswersRef","question","questionRef","info","Object","keys","forEach","key","scoreRef","console","log","displayScores","modalOpen","questionTypeRef","submitQuestion","data","round","roundRef","hasOwnProperty","invalidNumber","invalidScoringArray","filter","invalidClues","arr","invalidAnswers","validateInput","questions","set","num","ordinalSuffix","j","k","renderAnswers","text","record","toUpperCase","join","answer","renderScores","RoundCreator","beginSpeedRound","qRef","child","begin","endSpeedRound","show","showClue","clueIndex","clueRef","hideClue","renderSpeedClues","clueButton","renderQuestions","index","addQuestion","handleOk","questionCreatorRef","err","handleCancel","toggleShowRound","columns","title","dataIndex","render","checked","pagination","visible","onOk","onCancel","Panel","Collapse","QuizCreator","addNewRound","quiz","rounds","roundName","quizRef","renderTeams","teams","teamName","name","match","params","self","firebase","database","on","snapshot","val","header","QuizTaker","withRouter","defaultActiveKey","to","process","TextInput","updateAnswer","NumberInput","SpeedClues","submit","submitAnswer","answers","points","undefined","gradeTextQuestion","correctAnswer","gradeNumberQuestion","guesses","teamGuessIndex","guess","sort","a","b","Math","abs","sortByGuessDistance","scoring","updateScoring","gradeClosestQuestion","gradeMultipleChoiceQuestion","numCorrect","q","cluesRevealed","correct","correctAnswers","gradeSpeedQuestion","gradeQuestion","userAnswer","addScoreToDatabase","possibleAnswer","includes","MultipleAnswersInput","RoundTaker","userInput","userInputRefs","submitSpeedQuestion","displayQuestion","border","selectedTeam","submitRound","changeSelectedTeam","selectTeam","teamRef","updateTeamName","updateNewTeamMember","newTeamMember","addTeamMember","teamMembers","submitTeam","member","teamNameColumn","totalColumn","Scoreboard","createTotalTeamScores","teamScores","teamScore","total","roundNames","roundColumns","RoundResults","renderOtherInfo","filteredGuesses","g","questionIndex","other","teamAnswer","HostRoundResults","changePoints","getColumns","ParticipantRoundResults","HomePage","basename","exact","path","component","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","className","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fe344f7c.chunk.js","sourcesContent":["import React from 'react';\nimport firebase from 'firebase';\nimport { Input } from \"antd\";\nimport {\n    Link\n} from \"react-router-dom\";\n\nexport default class Host extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quizzes: {},\n            newQuizName: '',\n            error: false,\n        };\n    }\n\n    componentDidMount() {\n        const self = this;\n        this.quizzesRef = firebase.database().ref('quizzes');\n        this.quizzesRef.on('value', snapshot => {\n            self.setState({\n                quizzes: snapshot.val(),\n                newQuizName: '',\n            });\n        });\n    }\n\n    removeQuiz = (quizName) => {\n        const { quizzes } = this.state;\n        const toDelete = quizzes[quizName];\n        delete quizzes[quizName];\n        this.quizzesRef.set(quizzes);\n        this.deletedRef = firebase.database().ref('deleted');\n        this.deletedRef.once(\"value\", snapshot => {\n            let toAdd = {};\n            if (snapshot.exists()) {\n                toAdd = snapshot.val();\n            }\n            toAdd[toDelete.name] = toDelete;\n            this.deletedRef.set(toAdd);\n        });\n    };\n\n    displayQuiz = (quiz, i) => {\n        return <div style={{display: 'flex', flexDirection: 'row'}}>\n            <p>{quiz.name}</p>\n            <p>{quiz.date}</p>\n            <Link to={process.env.PUBLIC_URL + '/#/host/' + quiz.name}>View</Link>\n            {quiz.name !== 'Example quiz' && <button onClick={() => this.removeQuiz(quiz.name)}>X</button>}\n        </div>\n    };\n\n    addNewQuiz = () => {\n        const { quizzes, newQuizName } = this.state;\n        if (quizzes.hasOwnProperty(newQuizName)) {\n            this.setState({\n                error: true,\n            })\n        } else {\n            quizzes[newQuizName] = {'name': newQuizName, 'rounds': []};\n            this.quizzesRef.set(quizzes);\n        }\n    };\n\n    changeNewQuizName = (e) => {\n        this.setState({\n            newQuizName: e.target.value,\n            error: false,\n        })\n    };\n\n    displayErrorMessage = () => {\n        return <div>\n            A quiz with this name already exists\n        </div>\n    };\n\n    render() {\n        const { quizzes, newQuizName, error } = this.state;\n        return (\n            <div>\n                <h1>Host home page</h1>\n                {Object.keys(quizzes).map((quizName, i) => this.displayQuiz(quizzes[quizName], i))}\n                New Quiz Name: <Input value={newQuizName} onPressEnter={this.addNewQuiz} onChange={this.changeNewQuizName} style={{width: 300}} />\n                <button onClick={this.addNewQuiz}>Add</button>\n                {error && this.displayErrorMessage()}\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\n\nconst { Option } = Select;\n\nexport default class Questions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answers: [],\n            score: null,\n            results: [],\n        };\n    }\n\n    componentDidMount() {\n        const { questions } = this.props;\n        this.setState({\n            answers: questions.map(elem => ''),\n            results: questions.map(elem => ''),\n        })\n    }\n\n    updateAnswer = (e, i) => {\n        let { answers } = this.state;\n        answers[i] = e.target.value.toLowerCase();\n        this.setState({\n            answers: answers,\n        })\n    };\n\n    submit = () => {\n        const { questions } = this.props;\n        let { answers, results } = this.state;\n        let score = 0;\n        questions.forEach((question, index) => {\n            const answer = answers[index];\n            if (answer === undefined) {\n                results[index] = \"Answer should have \" +(question.type === 'exactly' ? 'exactly matched' : 'matched one of') + \" answer choices ([\" + question.answers.join(\", \") + \"])\"\n                return;\n            }\n            if (question.type === 'exactly') {\n                const i = question.answers.indexOf(answer);\n                if (i >= 0) {\n                    score += 1;\n                    results[index] = \"CORRECT! \" + answer + \" exactly matches \" + \"index \" + i + \" of answer choices ([\" + question.answers.join(\", \") + \"])\";\n                } else {\n                    results[index] = \"INCORRECT! Answer should have exactly matched one of answer choices ([\" + question.answers.join(\", \") + \"])\"\n                }\n            } else if (question.type === 'contains') {\n                const filteredAnswers = question.answers.filter(a => answer.includes(a));\n                if (filteredAnswers.length > 0) {\n                    score += 1;\n                    results[index] = \"CORRECT! \" + answer + \"contains \\\"\" + filteredAnswers[0] + \"\\\" from index \" + index + \" of answer choices ([\" + question.answers.join(\", \") + \"])\";\n                } else {\n                    results[index] = \"INCORRECT! Answer should have contained one of answer choices ([\" + question.answers.join(\", \") + \"])\"\n                }\n            }\n        });\n        this.setState({\n            score: score,\n            results: results,\n        })\n    };\n\n    render() {\n        const { questions } = this.props;\n        const { answers, score, results } = this.state;\n        return (\n            <div>\n                <h1>Below is the example quiz, based on the questions created above</h1>\n                {questions.map((question, i) => {\n                    return <div style={{marginBottom: 50}}>\n                        <p>Question {i+1}: {question.question}</p>\n                        <div style={{display: 'flex', flexDirection: 'row'}}>\n                            Your answer for q{i+1}: <Input style={{width: 500}} value={answers[i]} onChange={e => this.updateAnswer(e, i)} />\n                            {results[i]}\n                        </div>\n                    </div>\n                })}\n                <button onClick={this.submit}>Submit</button>\n                <div>\n                    Your score: {score}/{questions.length}\n                </div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\n\nconst { Option } = Select;\n\nexport default class Questions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            s1: '',\n            s2: '',\n            score: 0,\n            similar: false,\n        };\n    }\n\n    calculate = () => {\n        const { s1, s2 } = this.state;\n        const a = s1;\n        const b = s2;\n        if (a.length == 0) return b.length;\n        if (b.length == 0) return a.length;\n\n        var matrix = [];\n\n        // increment along the first column of each row\n        var i;\n        for (i = 0; i <= b.length; i++) {\n            matrix[i] = [i];\n        }\n\n        // increment each column in the first row\n        var j;\n        for (j = 0; j <= a.length; j++) {\n            matrix[0][j] = j;\n        }\n\n        // Fill in the rest of the matrix\n        for (i = 1; i <= b.length; i++) {\n            for (j = 1; j <= a.length; j++) {\n                if (b.charAt(i - 1) == a.charAt(j - 1)) {\n                    matrix[i][j] = matrix[i - 1][j - 1];\n                } else {\n                    matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // substitution\n                        Math.min(matrix[i][j - 1] + 1, // insertion\n                            matrix[i - 1][j] + 1)); // deletion\n                }\n            }\n        }\n\n        const ans = matrix[b.length][a.length] / a.length;\n        if (ans < 0.4) {\n            this.setState({\n                similar: true,\n                score: ans,\n            })\n        } else {\n            this.setState({\n                similar: false,\n                score: ans,\n            })\n        }\n    }\n\n    updates1 = (e) => {\n        this.setState({\n            s1: e.target.value.toLowerCase().trim(),\n        })\n    };\n\n    updates2 = (e) => {\n        this.setState({\n            s2: e.target.value.toLowerCase().trim(),\n        })\n    };\n\n    render() {\n        const { s1, s2, score, similar } = this.state;\n        return (\n            <div>\n                <h1>This is a test view of the (Levenshtein Distance / length of first string) to test similarity of strings. Threshold set at 0.4 currently.</h1>\n                s1: <Input value={s1} id={0} onChange={this.updates1} />\n                s2: <Input value={s2} id={1} onChange={this.updates2} />\n                <button onClick={this.calculate}>Calculate</button>\n                {score}: {similar ? \"similar\" : \"NOT similar\"}\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport app from 'firebase/app';\nimport firebase from 'firebase';\nimport { Input, Table, Modal } from \"antd\";\nimport { storage } from \"firebase\";\n\nexport default class Question extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questionString: '',\n        };\n    }\n\n    updateQuestionString = (e) => {\n        this.setState({\n            questionString: e.target.value,\n        })\n    };\n\n    render() {\n        return (\n            <div>\n                <div>Question:</div>\n                <Input onChange={this.updateQuestionString} />\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport app from 'firebase/app';\nimport firebase from 'firebase';\nimport { Input, Table, Modal, Select } from \"antd\";\nimport { storage } from \"firebase\";\n\nconst { Option } = Select;\n\nexport default class QuestionType extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questionType: 'text',\n        };\n    }\n\n    render() {\n        const { questionType } = this.props;\n        return (\n            <div>\n                <div>Question Type:</div>\n                <Select value={questionType} style={{width: 200, height: 40}} onChange={this.props.update}>\n                    <Option value=\"text\">Text</Option>\n                    <Option value=\"number\">Number</Option>\n                    <Option value=\"closest\">Closest Number</Option>\n                    <Option value=\"multiple_choice\">Multiple Choice</Option>\n                    <Option value=\"multiple_answers\">Multiple Answers</Option>\n                    <Option value=\"speed\">Speed round</Option>\n                </Select>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\n\nconst { Option } = Select;\n\nexport default class TextAnswer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answerType: 'exactly',\n            possibleAnswers: [],\n            newAnswer: '',\n        };\n    }\n\n    changeNewAnswer = (e) => {\n        this.setState({\n            newAnswer: e.target.value\n        })\n    };\n\n    changeAnswerType = (e) => {\n        this.setState({\n            answerType: e\n        })\n    };\n\n    addPossibleAnswer = (e) => {\n        const { possibleAnswers } = this.state;\n        this.setState({\n            possibleAnswers: [...possibleAnswers, e.target.value.toLowerCase()],\n            newAnswer: '',\n        })\n    };\n\n    removePossibleAnswer = (i) => {\n        let { possibleAnswers } = this.state;\n        possibleAnswers.splice(i, 1);\n        this.setState({\n            possibleAnswers: possibleAnswers,\n        })\n    };\n\n    getInfoForPosting = () => {\n        const { answerType, possibleAnswers, newAnswer } = this.state;\n        if (newAnswer.length > 0 && possibleAnswers.indexOf(newAnswer) === -1) {\n            possibleAnswers.push(newAnswer.toLowerCase());\n            this.setState({\n                possibleAnswers: possibleAnswers,\n                newAnswer: '',\n            })\n        }\n        return {answerType, possibleAnswers};\n    };\n\n    render() {\n        const { newAnswer, answerType, possibleAnswers } = this.state;\n        return (\n            <div>\n                <div>\n                    <div>Answer Type: </div>\n                    <Select value={answerType} style={{width: 200, height: 40}} onChange={this.changeAnswerType}>\n                        <Option value=\"exactly\">Is Exactly...</Option>\n                        <Option value=\"contains\">Contains...</Option>\n                        {/*<Option value=\"regex\">Matches regex...</Option>*/}\n                    </Select>\n                    <br/>\n                </div>\n                <h4>Possible answers: </h4>\n                <div>\n                    {possibleAnswers.length === 0 ? \"No answer options yet...\" : <List grid={{column: 5}}\n                        dataSource={possibleAnswers}\n                        renderItem={(item, i) => (\n                            <List.Item>{item}\n                            <button onClick={() => this.removePossibleAnswer(i)}>X</button>\n                            </List.Item>\n                        )}\n                    />}\n                    <div>\n                        Input an answer (Enter to add it to the list):\n                        <Input style={{width: 400}} onPressEnter={this.addPossibleAnswer} value={newAnswer} onChange={this.changeNewAnswer} placeholder=\"Answer\" />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\n\nconst { Option } = Select;\n\nexport default class NumberAnswer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            numberAnswer: null,\n            margin: 0,\n        };\n    }\n\n    getInfoForPosting = () => {\n        return this.state;\n    };\n\n    changeAnswer = (e) => {\n        const value = e.target.value;\n        if (value === '-' || value === '' || !isNaN(value) || value.indexOf('e') === value.length-1) {\n            this.setState({numberAnswer: value})\n        }\n    };\n\n    changeMargin = (e) => {\n        const value = e.target.value;\n        if (value === '-' || value === '' || !isNaN(value) || value.indexOf('e') === value.length-1) {\n            this.setState({margin: value})\n        }\n    };\n\n    render() {\n        const { numberAnswer, margin } = this.state;\n        return (\n            <div style={{display: 'flex', flexDirection: 'row'}}>\n                Answer: <Input style={{width: 200}} value={numberAnswer} onChange={this.changeAnswer} />\n                +- <Input style={{width: 200}} value={margin} onChange={this.changeMargin} />\n                (Answers accepted between: {parseFloat(numberAnswer) - parseFloat(margin)} and {parseFloat(numberAnswer) + parseFloat(margin)})\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\n\n\nconst { Option } = Select;\n\nexport default class ClosestNumber extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            numberAnswer: null,\n            positionScoring: [3,2,1,0,0],\n        };\n    }\n\n    getInfoForPosting = () => {\n        return this.state;\n    };\n\n    changeAnswer = (e) => {\n        const value = e.target.value;\n        if (value === '-' || value === '' || !isNaN(value) || value.indexOf('e') === value.length-1) {\n            this.setState({numberAnswer: value})\n        }\n    };\n\n    updateScore = (e, i) => {\n        const { positionScoring } = this.state;\n        const value = e.target.value;\n        if (value === '' || !isNaN(value)) {\n            positionScoring[i] = value;\n            this.setState(positionScoring);\n        }\n    };\n\n    addPosition = () => {\n        const { positionScoring } = this.state;\n        this.setState({\n            positionScoring: [... positionScoring, 0]\n        })\n    };\n\n    removePosition = (i) => {\n        const { positionScoring } = this.state;\n        positionScoring.splice(i, 1);\n        this.setState({\n            positionScoring: positionScoring,\n        })\n    };\n\n    renderPositionScores = () => {\n        const { positionScoring } = this.state;\n        return <div>\n            {positionScoring.map((score, i) => {\n                return <div>\n                    Position {i+1}:\n                    <Input style={{width: 50}} value={score} onChange={e => this.updateScore(e, i)} />\n                    <button onClick={() => this.removePosition(i)}>X</button>\n                </div>\n            })}\n            <button onClick={this.addPosition}>Add position</button>\n        </div>\n    };\n\n    render() {\n        const { numberAnswer } = this.state;\n        return (\n            <div>\n                Answer: <Input style={{width: 200, height: 30}} value={numberAnswer} onChange={this.changeAnswer} />\n                {this.renderPositionScores()}\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List, Radio} from 'antd';\n\nconst { Option } = Select;\n\nexport default class MultipleChoice extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            choices: [],\n            newOption: '',\n            correctChoice: null,\n        };\n    }\n\n    getInfoForPosting = () => {\n        const { choices, correctChoice } = this.state;\n        return { choices, correctChoice };\n    };\n\n    changeNewOption = (e) => {\n        this.setState({\n            newOption: e.target.value\n        });\n    };\n\n    addChoice = () => {\n        const { choices, newOption } = this.state;\n        this.setState({\n            choices: [...choices, newOption],\n            newOption: '',\n        })\n    };\n\n    removeOption = (i) => {\n        const { choices } = this.state;\n        choices.splice(i, 1);\n        this.setState({\n            choices: choices,\n        })\n    };\n\n    onChange = e => {\n        this.setState({\n            correctChoice: e.target.value,\n        });\n    };\n\n    render() {\n        const { choices, newOption, correctChoice } = this.state;\n        return (\n            <div>\n                <Radio.Group onChange={this.onChange} value={correctChoice}>\n                    {choices.map((choice, i) => {\n                        return <div>\n                            <Radio value={choice}>{choice}</Radio>\n                            <button onClick={() => this.removeOption(i)}>X</button>\n                        </div>\n                    })}\n                </Radio.Group>\n                <div>\n                    <Input onPressEnter={this.addChoice} style={{width: 200}} value={newOption} onChange={this.changeNewOption} />\n                    <button onClick={this.addChoice}>Add</button>\n                </div>\n\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\nimport TextAnswer from \"./TextAnswer\";\n\nconst { Option } = Select;\n\nexport default class SpeedRound extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            clues: [''],\n            scoreType: 'clues_revealed',\n            cluesRevealedScore: [1],\n            positionScores: [3,2,1,0,0,0],\n        };\n        this.textAnswerRef = React.createRef();\n    }\n\n    getInfoForPosting = () => {\n        const { clues, scoreType, cluesRevealedScore, positionScores } = this.state;\n        const infoForPosting = this.textAnswerRef.current.getInfoForPosting();\n        infoForPosting.clues = clues.map(clue => {\n            return {clue: clue}\n        });\n        infoForPosting.scoreType = scoreType;\n        infoForPosting.positionScoring = scoreType === 'clues_revealed' ? cluesRevealedScore : positionScores;\n        return infoForPosting;\n    };\n\n    updateClue = (e, i) => {\n        const { clues } = this.state;\n        clues[i] = e.target.value;\n        this.setState({\n            clues: clues,\n        })\n    };\n\n    removeClue = (i) => {\n        const { clues, cluesRevealedScore } = this.state;\n        clues.splice(i,1);\n        cluesRevealedScore.splice(0,1);\n        this.setState({\n            clues: clues,\n            cluesRevealedScore: cluesRevealedScore,\n        })\n    };\n\n    addClue = () => {\n        const { clues, cluesRevealedScore } = this.state;\n        this.setState({\n            clues: [...clues, ''],\n            cluesRevealedScore: [parseFloat(cluesRevealedScore[0])+1, ...cluesRevealedScore],\n        })\n    };\n\n    renderClues = () => {\n        const { clues } = this.state;\n        return (\n            <div>\n                {clues.map((clue, i) => {\n                    return (\n                        <div style={{display: 'flex', flexDirection: 'row'}}>\n                            Clue {i+1}: <Input style={{width: 800}} value={clue} onChange={e => this.updateClue(e, i)} />\n                            {i > 0 && <button onClick={() => this.removeClue(i)}>X</button>}\n                        </div>\n                    )\n                })}\n                <button onClick={this.addClue}>Add Clue</button>\n            </div>\n        )\n    };\n\n    changeScoreType = (e) => {\n        this.setState({\n            scoreType: e\n        })\n    };\n\n    updatePositionScore = (e, i) => {\n        const { positionScores } = this.state;\n        const value = e.target.value;\n        if (value === '' || !isNaN(value)) {\n            positionScores[i] = value;\n            this.setState({positionScores: positionScores})\n        }\n    };\n\n    removePositionScore = (i) => {\n        const { positionScores } = this.state;\n        positionScores.splice(i, 1);\n        this.setState({\n            positionScores: positionScores,\n        })\n    };\n\n    addPositionScore = () => {\n        const { positionScores } = this.state;\n        this.setState({\n            positionScores: [... positionScores, 0]\n        })\n    };\n\n    renderPositionScores = () => {\n        const { positionScores } = this.state;\n        return <div>\n            {positionScores.map((score, i) => {\n                return <div>\n                    Position {i+1}:\n                    <Input style={{width: 50}} value={score} onChange={e => this.updatePositionScore(e, i)} />\n                    <button onClick={() => this.removePositionScore(i)}>X</button>\n                </div>\n            })}\n            <button onClick={this.addPositionScore}>Add position</button>\n        </div>\n    };\n\n    renderScoring = () => {\n        const { scoreType } = this.state;\n        return (\n            <div>\n                <div>Scores determined by:</div>\n                <Select value={scoreType} style={{width: 200, height: 40}} onChange={this.changeScoreType}>\n                    <Option value=\"clues_revealed\">Clues Revealed</Option>\n                    <Option value=\"position\">Position</Option>\n                </Select>\n                {scoreType === 'clues_revealed' ? this.renderCluesRevealedScores() : this.renderPositionScores()}\n            </div>\n        )\n    };\n\n    updateCluesRevealedScore = (e,i) => {\n        const {cluesRevealedScore} = this.state;\n        const value = e.target.value;\n        if (value === '' || !isNaN(value)) {\n            cluesRevealedScore[i] = value;\n            this.setState({cluesRevealedScore: cluesRevealedScore})\n        }\n    };\n\n    renderCluesRevealedScores = () => {\n        const { cluesRevealedScore } = this.state;\n        return <div>\n            {cluesRevealedScore.map((score, i) => {\n                return <div>\n                    Guessing after clue {i+1} =\n                    <Input style={{width: 50}} value={score} onChange={e => this.updateCluesRevealedScore(e, i)} />\n                    points\n                </div>\n            })}\n        </div>\n    };\n\n    render() {\n        return (\n            <div>\n                {this.renderClues()}\n                <TextAnswer ref={this.textAnswerRef} />\n                {this.renderScoring()}\n\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\nimport TextAnswer from \"./TextAnswer\";\n\nconst { Option } = Select;\n\nexport default class MultipleAnswers extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            scores: [1],\n        };\n        this.scoresRefs = [React.createRef()];\n    }\n\n    getInfoForPosting = () => {\n        const { scores } = this.state;\n        const multipleAnswers = this.scoresRefs.map(ref => ref.current.getInfoForPosting());\n        return { multipleScores: scores, multipleAnswers }\n    };\n\n    addAnswer = () => {\n        const { scores } = this.state;\n        this.setState({\n            scores: [...scores, parseFloat(scores[scores.length-1])+1]\n        });\n        this.scoresRefs.push(React.createRef());\n    };\n\n    removeLastAnswer = () => {\n        const { scores } = this.state;\n        scores.pop();\n        this.setState({\n            scores: scores\n        });\n        this.scoresRefs.pop();\n    };\n\n    updateScore = (e, i) => {\n        const { scores } = this.state;\n        const value = e.target.value;\n        if (value === '' || !isNaN(value)) {\n            scores[i] = value;\n            this.setState({scores: scores})\n        }\n    };\n\n    render() {\n        const { scores } = this.state;\n        return (\n            <div>\n                {scores.map((elem, i) => {\n                    return (\n                        <div>\n                            <hr/>\n                            <h3>Answer {i+1}:</h3>\n                            <TextAnswer ref={this.scoresRefs[i]}/>\n                        </div>\n                    )\n                })}\n                <hr/>\n                <button onClick={this.addAnswer}>Add another answer</button>\n                {scores.length > 1 && <button onClick={this.removeLastAnswer}>Remove last answer</button>}\n\n                {scores.map((score, i) => {\n                    return (\n                        <div>\n                            {i+1} correct = <Input style={{width: 50}} value={score} onChange={e => this.updateScore(e, i)} /> points\n                        </div>\n                    )\n                })}\n\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input } from \"antd\";\n\nexport default class SingleScore extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            score: 1,\n        };\n    }\n\n    updateScore = (e) => {\n        const value = e.target.value;\n        if (value === '' || !isNaN(value)) {\n            this.setState({score: value})\n        }\n    };\n\n    render() {\n        const { score } = this.state;\n        return (\n            <div>\n                Correct answer: <Input style={{width: 50}} placeHolder={'score...'} value={score} onChange={this.updateScore} /> points\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport app from 'firebase/app';\nimport firebase from 'firebase';\nimport Questions from \"../old_stuff/Questions\";\nimport LevenshteinDistance from \"../old_stuff/LevenshteinDistance\";\nimport { Table, Modal } from \"antd\";\nimport { storage } from \"firebase\";\nimport Question from \"./question_components/Question\";\nimport QuestionType from \"./question_components/QuestionType\";\nimport TextAnswer from \"./answer_components/TextAnswer\";\nimport NumberAnswer from \"./answer_components/NumberAnswer\";\nimport ClosestNumber from \"./answer_components/ClosestNumber\";\nimport MultipleChoice from \"./answer_components/MultipleChoice\";\nimport SpeedRound from \"./answer_components/SpeedRound\";\nimport MultipleAnswers from \"./answer_components/MultipleAnswers\";\nimport SingleScore from \"./score_components/SingleScore\";\n\nexport default class QuestionCreator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questionType: 'text',\n            modalOpen: false,\n        };\n        this.questionRef = React.createRef();\n        this.questionTypeRef = React.createRef();\n        this.possibleAnswersRef = React.createRef();\n        this.scoreRef = React.createRef();\n    }\n\n    updateQuestionType = (e) => {\n        this.setState({\n            questionType: e,\n        })\n    };\n\n    displayPossibleAnswers = () => {\n        const { questionType } = this.state;\n        if (questionType === 'text') {\n            return <TextAnswer ref={this.possibleAnswersRef} />\n        } else if (questionType === 'number') {\n            return <NumberAnswer ref={this.possibleAnswersRef}/>\n        } else if (questionType === 'closest') {\n            return <ClosestNumber ref={this.possibleAnswersRef}/>\n        } else if (questionType === 'multiple_choice') {\n            return <MultipleChoice ref={this.possibleAnswersRef}/>\n        } else if (questionType === 'speed') {\n            return <SpeedRound ref={this.possibleAnswersRef}/>\n        } else if (questionType === 'multiple_answers') {\n            return <MultipleAnswers ref={this.possibleAnswersRef}/>\n        }\n    };\n\n    getInfoForPosting = () => {\n        const { questionType } = this.state;\n        const question = this.questionRef.current.state.questionString;\n        const infoForPosting = {question: question, questionType};\n        const info = this.possibleAnswersRef.current.getInfoForPosting();\n        Object.keys(info).forEach(key => infoForPosting[key] = info[key]);\n        if (this.scoreRef.current) {\n            infoForPosting.score = this.scoreRef.current.state.score;\n        }\n        console.log(infoForPosting);\n        return infoForPosting;\n    };\n\n    displayScores = () => {\n        const { questionType } = this.state;\n        if (questionType === 'text' || questionType === 'number' || questionType === 'multiple_choice') {\n            return <SingleScore ref={this.scoreRef}/>\n        }\n    };\n\n    render() {\n        const { questionType } = this.state;\n        return (\n            <div>\n                <Question ref={this.questionRef}/>\n                <QuestionType ref={this.questionTypeRef} questionType={questionType} update={this.updateQuestionType}/>\n                {this.displayPossibleAnswers()}\n                {this.displayScores()}\n            </div>\n        );\n    }\n\n}","export function submitQuestion(data, round, roundRef) {\n    validateInput(data);\n    const questions = round.questions;\n    if (questions) {\n        round.questions = [...round.questions, data]\n    } else {\n        round.questions = [data];\n    }\n    console.log(round);\n    roundRef.set(round);\n    // const questions = quiz.questions;\n    // if (questions) {\n    //     quiz.questions = [...quiz.questions, data];\n    // } else {\n    //     quiz.questions = [data];\n    // }\n    // quizRef.set(quiz);\n}\n\nfunction validateInput(data) {\n    const { question, possibleAnswers, numberAnswer, score, positionScoring, clues } = data;\n    if (question === '') {\n        throw \"Must have a question string\";\n    }\n    if (possibleAnswers && possibleAnswers.length === 0) {\n        throw \"Must have at least one correct answer\";\n    }\n    if (data.hasOwnProperty('numberAnswer') && invalidNumber(numberAnswer)) {\n        throw \"Must be a valid number\";\n    }\n    if (data.hasOwnProperty('score') && invalidNumber(score)) {\n        throw \"Must have a score for the question\";\n    }\n    if (data.hasOwnProperty('positionScoring') && invalidScoringArray(positionScoring)) {\n        throw \"Must have at least one team scoring\";\n    }\n    if (data.hasOwnProperty('clues') && invalidClues(clues)) {\n        throw \"Must have at least one clue for speed round\";\n    }\n    if (data.hasOwnProperty('choices')) {\n        const { choices, correctChoice } = data;\n        if (choices.length <= 1) {\n            throw \"Must have at least 2 options\";\n        }\n        if (correctChoice === null) {\n            throw \"Must select a correct option for multiple choice\";\n        }\n    }\n    if (data.hasOwnProperty('multipleAnswers')) {\n        const { multipleAnswers, multipleScores } = data;\n        if (invalidAnswers(multipleAnswers)) {\n            throw \"All options for answers must have a possible answer\";\n        }\n        if (invalidScoringArray(multipleScores)) {\n            throw \"Must be possible to score points\";\n        }\n    }\n}\n\nfunction invalidNumber(num) {\n    return num === '' || num === null || isNaN(num);\n}\n\nfunction invalidScoringArray(arr) {\n    const filteredArray = arr.filter(elem => {\n        return !(elem === '' || isNaN(elem) || elem === null || parseFloat(elem) === 0)\n    });\n    return filteredArray.length === 0;\n}\n\nfunction invalidClues(clues) {\n    return clues.filter(clue => clue !== '').length === 0\n}\n\nfunction invalidAnswers(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].possibleAnswers.length === 0) {\n            return true;\n        }\n    }\n    return false;\n}","import React from 'react';\nimport app from 'firebase/app';\nimport firebase from 'firebase';\nimport Questions from \"../old_stuff/Questions\";\nimport LevenshteinDistance from \"../old_stuff/LevenshteinDistance\";\nimport {Table, Modal, Switch} from \"antd\";\nimport { storage } from \"firebase\";\nimport QuestionCreator from \"./QuestionCreator\";\nimport {submitQuestion} from \"../../helpers/QuestionPoster\";\n\nconst ordinalSuffix = (i) => {\n    var j = i % 10,\n        k = i % 100;\n    if (j == 1 && k != 11) {\n        return i + \"st\";\n    }\n    if (j == 2 && k != 12) {\n        return i + \"nd\";\n    }\n    if (j == 3 && k != 13) {\n        return i + \"rd\";\n    }\n    return i + \"th\";\n};\n\nconst renderAnswers = (text, record) => {\n    const { questionType } = record;\n    if (questionType === 'text' || questionType === 'speed') {\n        return <div>\n            {record.answerType.toUpperCase()} [{record.possibleAnswers.join(', ')}]\n        </div>\n    }\n    if (questionType === 'number' || questionType === 'closest') {\n        return <div>\n            {record.numberAnswer}\n            {record.margin && (' +- ' + record.margin)}\n        </div>\n    }\n    if (questionType === 'multiple_answers') {\n        return <div>\n            {record.multipleAnswers.map((answer, i) => {\n                return <div>\n                    {i+1}: {answer.answerType.toUpperCase()} [{answer.possibleAnswers.join(', ')}]\n                </div>\n            })}\n        </div>\n    }\n    if (questionType === 'multiple_choice') {\n        return <div>\n            {record.correctChoice.toUpperCase()} from [{record.choices.join(', ')}]\n        </div>\n    }\n    return text;\n};\n\nconst renderScores = (text, record) => {\n    const { questionType } = record;\n    if (questionType === 'text' || questionType === 'number' || questionType === 'multiple_choice') {\n        return <div>\n            {record.score} point(s)\n        </div>\n    }\n    if (questionType === 'closest') {\n        return record.positionScoring.map((score, i) => <div>{ordinalSuffix(i+1)} closest: {score} point(s)</div>)\n    }\n    if (questionType === 'multiple_answers') {\n        return record.multipleScores.map((score, i) => <div>{i+1} Correct: {score} point(s)</div>)\n    }\n    if (questionType === 'speed') {\n        if (record.scoreType === 'clues_revealed') {\n            return record.positionScoring.map((score, i) => <div>{i+1} clue(s) revealed: {score} point(s)</div>)\n        }\n        if (record.scoreType === 'position') {\n            return record.positionScoring.map((score, i) => <div>{ordinalSuffix(i+1)}: {score} point(s)</div>)\n        }\n    }\n    return text;\n};\n\nexport default class RoundCreator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            modalOpen: false,\n        };\n        this.questionCreatorRef = React.createRef();\n        this.columns = [\n            {\n                title: 'Question',\n                dataIndex: 'question',\n                key: 'question',\n                render: this.renderQuestions,\n            },\n            {\n                title: 'Question Type',\n                dataIndex: 'questionType',\n                key: 'question_type',\n            },\n            {\n                title: 'Clues/Options',\n                dataIndex: 'clues',\n                key: 'clues',\n                render: this.renderClues,\n            },\n            {\n                title: 'Answers',\n                dataIndex: 'answers',\n                key: 'answers',\n                render: renderAnswers,\n            },\n            {\n                title: 'Scoring',\n                dataIndex: 'scoring',\n                key: 'scoring',\n                render: renderScores,\n            },\n        ];\n    }\n\n    beginSpeedRound = (record, i) => {\n        const { roundRef } = this.props;\n        const qRef = roundRef.child('questions').child(i);\n        record.begin = true;\n        qRef.set(record);\n    };\n\n    endSpeedRound = (record, i) => {\n        const { roundRef } = this.props;\n        const qRef = roundRef.child('questions').child(i);\n        record.begin = false;\n        record.clues.forEach(clue => clue.show = false);\n        qRef.set(record);\n    };\n\n    showClue = (clue, i, clueIndex) => {\n        const { roundRef } = this.props;\n        const clueRef = roundRef.child('questions').child(i).child('clues').child(clueIndex);\n        clue.show = true;\n        clueRef.set(clue);\n    };\n\n    hideClue = (clue, i, clueIndex) => {\n        const { roundRef } = this.props;\n        const clueRef = roundRef.child('questions').child(i).child('clues').child(clueIndex);\n        clue.show = false;\n        clueRef.set(clue);\n    };\n\n    renderSpeedClues = (record, i) => {\n        return record.clues.map((clue, clueIndex) => {\n            let clueButton;\n            if (clue.show) {\n                clueButton = <button onClick={() => this.hideClue(clue, i, clueIndex)}>Hide</button>\n            } else {\n                clueButton = <button onClick={() => this.showClue(clue, i, clueIndex)}>Show</button>\n            }\n            return <div>\n                Clue {clueIndex+1}: {clue.clue}\n                {record.begin && clueButton}\n            </div>\n        })\n    };\n\n    renderClues = (text, record, i) => {\n        const { questionType } = record;\n        if (questionType === 'multiple_choice') {\n            return record.choices.map(choice => <div>{choice}</div>);\n        }\n        if (questionType === 'speed') {\n            return this.renderSpeedClues(record, i);\n        }\n        return text;\n    };\n\n    renderQuestions = (text, record, index) => {\n        const { questionType } = record;\n        if (questionType === 'speed') {\n            return <div>\n                {text}\n                {record.begin ? <button\n                    onClick={() => this.endSpeedRound(record, index)}>\n                    End\n                </button> : <button\n                    onClick={() => this.beginSpeedRound(record, index)}>\n                    Begin\n                </button>\n                }\n            </div>\n        }\n        return text;\n    };\n\n    addQuestion = () => {\n        this.setState({\n            modalOpen: true,\n        })\n    };\n\n    handleOk = (e) => {\n        const { round } = this.props;\n        const { roundRef } = this.props;\n        try {\n            const infoForPosting = this.questionCreatorRef.current.getInfoForPosting();\n            submitQuestion(infoForPosting, round, roundRef);\n            this.setState({\n                modalOpen: false,\n            })\n        } catch(err) {\n            console.log(err);\n        }\n\n    };\n\n    handleCancel = () => {\n        this.setState({\n            modalOpen: false,\n        })\n    };\n\n    toggleShowRound = (e, round) => {\n        const { roundRef } = this.props;\n        round.show = e;\n        round.questions.forEach((question, i) => {\n            if (question.questionType === 'speed') {\n                question.begin = false;\n                question.clues.forEach(clue => clue.show = false);\n            }\n        });\n        roundRef.set(round);\n    };\n\n    render() {\n        const { round } = this.props;\n        const { modalOpen } = this.state;\n        return (\n            <div>\n                <div>\n                    <div>\n                        Show round: <Switch checked={round.show} onChange={e => this.toggleShowRound(e,round)} />\n                    </div>\n                    {round.questions && <Table columns={this.columns} dataSource={round.questions} pagination={false} />}\n                    <button onClick={this.addQuestion}>Add question</button>\n                    <Modal\n                        title=\"Create a question\"\n                        visible={modalOpen}\n                        onOk={this.handleOk}\n                        onCancel={this.handleCancel}\n                    >\n                        <QuestionCreator ref={this.questionCreatorRef}/>\n                    </Modal>\n                </div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport firebase from 'firebase';\nimport { Collapse } from 'antd';\nimport {\n    Link,\n    useParams,\n    withRouter,\n} from \"react-router-dom\";\nimport RoundCreator from \"./RoundCreator\";\n\nconst { Panel } = Collapse;\n\n\nclass QuizCreator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quiz: {},\n        };\n    }\n\n    componentDidMount() {\n        const { name } = this.props.match.params;\n        const self = this;\n        this.quizRef = firebase.database().ref('quizzes').child(name);\n        this.quizRef.on('value', snapshot => {\n            self.setState({\n                quiz: snapshot.val(),\n            });\n        });\n    }\n\n    addNewRound = () => {\n        const { quiz } = this.state;\n        const rounds = quiz.rounds;\n        if (rounds) {\n            const roundName = Object.keys(rounds).length + 1;\n            quiz.rounds['Round ' + roundName] = {'name': 'Round ' + roundName};\n        } else {\n            quiz.rounds = {'Round 1': {'name': 'Round 1'}};\n        }\n        this.quizRef.set(quiz);\n    };\n\n    renderTeams = () => {\n        const { quiz } = this.state;\n        const teams = quiz.teams;\n        return teams && (\n            <div>\n                <h3>Teams registered:</h3>\n                {Object.keys(teams).map(teamName => {\n                    return <div>\n                        {teamName}\n                    </div>\n                })}\n            </div>\n        )\n    };\n\n    render() {\n        const { quiz } = this.state;\n        const rounds = quiz.rounds;\n        return (\n            <div>\n                <h1>Quiz name here: {quiz && quiz.name}</h1>\n                {this.renderTeams()}\n                <Collapse>\n                    {rounds && Object.keys(rounds).map((roundName, i) => {\n                        const round = rounds[roundName];\n                        return <Panel header={roundName} key={i}>\n                            <RoundCreator round={round} roundRef={this.quizRef.child('rounds').child(roundName)} />\n                        </Panel>\n                    })}\n                </Collapse>\n                <button onClick={this.addNewRound}>Add New Round</button>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(QuizCreator)","import React from 'react';\nimport firebase from 'firebase';\nimport { Collapse } from 'antd';\nimport {\n    Link,\n    useParams,\n    withRouter,\n} from \"react-router-dom\";\n\nclass QuizTaker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quiz: {},\n        };\n    }\n\n    componentDidMount() {\n        const { name } = this.props.match.params;\n        const self = this;\n        this.quizRef = firebase.database().ref('quizzes').child(name);\n        this.quizRef.on('value', snapshot => {\n            self.setState({\n                quiz: snapshot.val(),\n            });\n        });\n    }\n\n    render() {\n        const { quiz } = this.state;\n        const rounds = quiz.rounds;\n        return (\n            <div>\n                <h1>Quiz name here: {quiz && quiz.name}</h1>\n                <Collapse defaultActiveKey={'0'}>\n                    {rounds && Object.keys(rounds).map((roundName, i) => {\n                        const round = rounds[roundName];\n                        return <div style={{display: 'flex', flexDirection: 'row'}}>\n                            <p>{roundName}</p>\n                            {round.show && <Link to={process.env.PUBLIC_URL + '/#/participant/' + quiz.name + '/' + round.name}>View</Link>}\n                        </div>\n                    })}\n                </Collapse>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(QuizTaker)","import React from 'react';\nimport firebase from 'firebase';\nimport { Input } from \"antd\";\nimport {\n    Link\n} from \"react-router-dom\";\n\nexport default class ParticipantHomePage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quizzes: {},\n        };\n    }\n\n    componentDidMount() {\n        const self = this;\n        this.quizzesRef = firebase.database().ref('quizzes');\n        this.quizzesRef.on('value', snapshot => {\n            self.setState({\n                quizzes: snapshot.val(),\n            });\n        });\n    }\n\n    displayQuiz = (quiz, i) => {\n        return <div style={{display: 'flex', flexDirection: 'row'}}>\n            <p>{quiz.name}</p>\n            <p>{quiz.date}</p>\n            <Link to={process.env.PUBLIC_URL + '/#/participant/' + quiz.name}>View</Link>\n        </div>\n    };\n\n    render() {\n        const { quizzes } = this.state;\n        return (\n            <div>\n                <h1>Participant home page</h1>\n                {Object.keys(quizzes).map((quizName, i) => this.displayQuiz(quizzes[quizName], i))}\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input } from \"antd\";\n\nexport default class TextInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer: '',\n        };\n    }\n\n    updateAnswer = (e) => {\n        this.setState({\n            answer: e.target.value,\n        })\n    };\n\n    render() {\n        const { answer } = this.state;\n        return (\n            <Input value={answer} onChange={this.updateAnswer} />\n        );\n    }\n\n}","import React from 'react';\nimport { Input } from \"antd\";\n\nexport default class NumberInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer: '',\n        };\n    }\n\n    updateAnswer = (e) => {\n        const value = e.target.value;\n        if (value === '-' || value === '' || !isNaN(value) || value.indexOf('e') === value.length-1) {\n            this.setState({answer: value})\n        }\n    };\n\n    render() {\n        const { answer } = this.state;\n        return (\n            <Input value={answer} onChange={this.updateAnswer} />\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, Radio} from 'antd';\n\nconst { Option } = Select;\n\nexport default class MultipleChoice extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer: null,\n        };\n    }\n\n    onChange = e => {\n        this.setState({\n            answer: e.target.value,\n        });\n    };\n\n    render() {\n        const { choices } = this.props;\n        const { answer } = this.state;\n        return (\n            <div>\n                <Radio.Group onChange={this.onChange} value={answer}>\n                    {choices.map((choice, i) => {\n                        return <div>\n                            <Radio value={choice}>{choice}</Radio>\n                        </div>\n                    })}\n                </Radio.Group>\n\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport {Input} from \"antd\";\n\nexport default class SpeedClues extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer: '',\n        };\n    }\n\n    updateAnswer = (e) => {\n        this.setState({\n            answer: e.target.value,\n        })\n    };\n\n    render() {\n        const { clues } = this.props;\n        const { answer } = this.state;\n        return (\n            <div>\n                {clues.map(clue => {\n                    return clue.show && <div>\n                        {clue.clue}\n                    </div>\n                })}\n                <Input value={answer} onChange={this.updateAnswer}/>\n                <button onClick={() => this.props.submit(answer)}>Submit</button>\n            </div>\n        );\n    }\n\n}","export function submitAnswer(answers, name, round, roundRef, teamName) {\n    console.log(answers);\n    const { questions } = round;\n    questions.forEach((question, i) => {\n        if (answers[i]) {\n            console.log(answers[i]);\n            const questionRef = roundRef.child('questions').child(i);\n            const points = gradeQuestion(question, answers[i].answer, questionRef, teamName);\n            if (question.userAnswer === undefined) {\n                question.userAnswer = {};\n            }\n            question.userAnswer[teamName] = answers[i].answer;\n            if (question.questionType !== 'closest') {\n                addScoreToDatabase(question, questionRef, points, teamName);\n            }\n            console.log(\"Question \" + (i+1) + \": \" + points + \" points\");\n        }\n    });\n}\n\nfunction addScoreToDatabase(question, questionRef, points, teamName) {\n    let { scores } = question;\n    if (scores === undefined) {\n        scores = {};\n    }\n    scores[teamName] = points;\n    question.scores = scores;\n    questionRef.set(question);\n}\n\nfunction gradeQuestion(question, answer, questionRef, teamName) {\n    if (answer === '' || answer === undefined || answer === null) {\n        return 0;\n    } else {\n        answer = answer.toLowerCase();\n        const { questionType } = question;\n        if (questionType === 'text') {\n            return gradeTextQuestion(question, answer) ? parseFloat(question.score) : 0;\n        }\n        if (questionType === 'number') {\n            return gradeNumberQuestion(question, answer) ? parseFloat(question.score) : 0;\n        }\n        if (questionType === 'closest') {\n            return gradeClosestQuestion(question, answer, questionRef, teamName);\n        }\n        if (questionType === 'multiple_choice') {\n            return gradeMultipleChoiceQuestion(question, answer) ? parseFloat(question.score) : 0;\n        }\n        if (questionType === 'multiple_answers') {\n            let numCorrect = 0;\n            question.multipleAnswers.forEach((q,i) => {\n                numCorrect += gradeTextQuestion(q, answer[i]) ? 1 : 0\n            });\n            if (numCorrect > 0) {\n                return question.multipleScores[numCorrect-1];\n            }\n            return 0;\n        }\n        if (questionType === 'speed') {\n            return gradeSpeedQuestion(question, answer, questionRef, teamName);\n        }\n        // console.log(question.questionType);\n\n    }\n}\n\nfunction gradeTextQuestion(question, answer) {\n    const { answerType, possibleAnswers } = question;\n    for (let i = 0; i < possibleAnswers.length; i++) {\n        const possibleAnswer = possibleAnswers[i].toLowerCase();\n        if (answerType === 'exactly' && possibleAnswer === answer) {\n            return true;\n        }\n        if (answerType === 'contains' && answer.includes(possibleAnswer)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction gradeNumberQuestion(question, answer) {\n    let margin;\n    try {\n        margin = parseFloat(question.margin);\n    } catch(err) {\n        margin = 0;\n    }\n    const correctAnswer = parseFloat(question.numberAnswer);\n    return (parseFloat(answer) >= (correctAnswer - margin) && parseFloat(answer) <= (correctAnswer + margin));\n}\n\nfunction gradeMultipleChoiceQuestion(question, answer) {\n    return question.correctChoice === answer;\n}\n\nfunction gradeClosestQuestion(question, answer, questionRef, teamName) {\n    let { guesses, numberAnswer, positionScoring } = question;\n    if (guesses === undefined) {\n        guesses = [];\n    }\n    // Removing duplicate guesses by same team\n    let teamGuessIndex = -1;\n    guesses.forEach((guess, i) => {\n        if (guess.teamName === teamName) {\n            teamGuessIndex = i\n        }\n    });\n    if (teamGuessIndex >= 0) {\n        guesses.splice(teamGuessIndex, 1);\n    }\n    guesses.push({num: parseFloat(answer), teamName: teamName});\n    guesses.sort((a, b) => sortByGuessDistance(a.num, b.num, numberAnswer));\n    question.guesses = guesses;\n    question.scores = updateScoring(guesses, positionScoring);\n    questionRef.set(question);\n    return question.scores[teamName];\n}\n\nfunction gradeSpeedQuestion(question, answer, questionRef, teamName) {\n    let { guesses, scoreType, clues, positionScoring } = question;\n    if (guesses === undefined) {\n        guesses = [];\n    }\n    let cluesRevealed = 0;\n    clues.forEach(clue => {\n        if (clue.show) {\n            cluesRevealed++;\n        }\n    });\n    const correct = gradeTextQuestion(question, answer);\n    guesses.push({guess: answer, teamName: teamName, cluesRevealed: cluesRevealed, correct: correct});\n    question.guesses = guesses;\n    questionRef.set(question);\n    if (!correct) {\n        // Incorrect answer\n        return 0;\n    }\n    if (scoreType === 'clues_revealed') {\n        if (cluesRevealed === 0) {\n            // Guess before any clues are revealed?\n            return positionScoring[0];\n        } else {\n            return positionScoring[cluesRevealed-1];\n        }\n    }\n    if (scoreType === 'position') {\n        const correctAnswers = guesses.filter(guess => gradeTextQuestion(question, guess.guess));\n        if (correctAnswers.length > positionScoring.length) {\n            return 0;\n        } else {\n            return positionScoring[correctAnswers.length-1];\n        }\n    }\n}\n\nfunction updateScoring(guesses, positionScoring) {\n    const scoring = {};\n    guesses.forEach((guess, i) => {\n        const { num, teamName } = guess;\n        if (i > 0 && parseFloat(guesses[i-1].num) === parseFloat(num)) {\n            // 2 people have the same guess\n            scoring[teamName] = scoring[guesses[i-1].teamName];\n        }\n        else if (Object.keys(scoring).indexOf(teamName) === -1) {\n            if (i < positionScoring.length) {\n                scoring[teamName] = parseFloat(positionScoring[i])\n            } else {\n                scoring[teamName] = 0;\n            }\n        }\n    });\n    return scoring;\n}\n\nfunction sortByGuessDistance(a,b,numberAnswer) {\n    return Math.abs(parseFloat(a) - parseFloat(numberAnswer)) - Math.abs(parseFloat(b) - parseFloat(numberAnswer))\n}","import React from 'react';\nimport TextInput from \"./TextInput\";\nimport {Input} from \"antd\";\n\nexport default class MultipleAnswersInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer: props.multipleAnswers.map(() => ''),\n        };\n    }\n\n    updateAnswer = (e, i) => {\n        const { answer } = this.state;\n        answer[i] = e.target.value;\n        this.setState({\n            answer\n        })\n    };\n\n    render() {\n        const { multipleAnswers } = this.props;\n        const { answer } = this.state;\n        return multipleAnswers ? multipleAnswers.map((answer, i) => {\n            return <div style={{display: 'flex', flexDirection: 'row'}}>\n                Answer {i+1}: <Input value={answer[i]} onChange={e => this.updateAnswer(e,i)} />\n            </div>\n        }) : <div/>\n    }\n\n}","import React from 'react';\nimport firebase from 'firebase';\nimport { Select } from 'antd';\nimport {\n    Link,\n    useParams,\n    withRouter,\n} from \"react-router-dom\";\nimport TextInput from \"./user_input/TextInput\";\nimport NumberInput from \"./user_input/NumberInput\";\nimport MultipleChoice from \"./user_input/MultipleChoice\";\nimport SpeedClues from \"./speed_clues/SpeedClues\";\nimport {submitAnswer, submitSpeedAnswer} from \"../../helpers/AnswerPoster\";\nimport MultipleAnswersInput from \"./user_input/MultipleAnswersInput\";\n\nconst { Option } = Select;\n\nclass RoundTaker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            round: {},\n            userInputRefs: [],\n            selectedTeam: null,\n            teams: [],\n        };\n    }\n\n    componentDidMount() {\n        const { name, round } = this.props.match.params;\n        const self = this;\n        this.roundRef = firebase.database().ref('quizzes').child(name).child('rounds').child(round);\n        this.roundRef.on('value', snapshot => {\n            const round = snapshot.val();\n            self.setState({\n                round,\n                userInputRefs: round.questions.map(() => React.createRef()),\n            });\n        });\n        this.teamRef = firebase.database().ref('quizzes').child(name).child('teams');\n        this.teamRef.on('value', snapshot => {\n            const teams = snapshot.val();\n            self.setState({\n                teams,\n            });\n        });\n    }\n\n    userInput = (question, i) => {\n        const { questionType } = question;\n        const { userInputRefs } = this.state;\n        if (questionType === 'text') {\n            return <TextInput ref={userInputRefs[i]}/>\n        }\n        if (questionType === 'number' || questionType === 'closest') {\n            return <NumberInput ref={userInputRefs[i]}/>\n        }\n        if (questionType === 'multiple_choice') {\n            return <MultipleChoice choices={question.choices} ref={userInputRefs[i]}/>\n        }\n        if (questionType === 'speed') {\n            return <SpeedClues clues={question.clues} ref={userInputRefs[i]} submit={answer => this.submitSpeedQuestion(answer, i)}/>\n        }\n        if (questionType === 'multiple_answers') {\n            return <MultipleAnswersInput multipleAnswers={question.multipleAnswers} ref={userInputRefs[i]}/>\n        }\n    };\n\n    displayQuestion = (question, i) => {\n        if (question.questionType === 'speed' && !question.begin) {\n            return;\n        }\n        return <div style={{border: '2px solid black'}}>\n            <h4>Q{i+1}: {question.question} (type={question.questionType})</h4>\n            {this.userInput(question, i)}\n        </div>\n    };\n\n    submitSpeedQuestion = (answer, i) => {\n        const { name } = this.props.match.params;\n        const { round, selectedTeam } = this.state;\n        if (selectedTeam === null) {\n            return;\n        }\n        const answers = round.questions.map(() => null);\n        answers[i] = {\"answer\": answer};\n        submitAnswer(answers, name, round, this.roundRef, selectedTeam);\n    };\n\n    submitRound = () => {\n        const { name } = this.props.match.params;\n        const { round, userInputRefs, selectedTeam } = this.state;\n        if (selectedTeam === null) {\n            return;\n        }\n        const answers = [];\n        userInputRefs.forEach(ref => {\n            if (ref.current) {\n                answers.push(ref.current.state)\n            } else {\n                answers.push(null);\n            }\n        });\n        submitAnswer(answers, name, round, this.roundRef, selectedTeam);\n    };\n\n    changeSelectedTeam = (e) => {\n        this.setState({\n            selectedTeam: e,\n        })\n    };\n\n    selectTeam = () => {\n        const { selectedTeam, teams } = this.state;\n        return <Select value={selectedTeam} style={{width: 200, height: 40}} onChange={this.changeSelectedTeam}>\n            {Object.keys(teams).map(teamName => <Option value={teamName}>{teamName}</Option>)}\n        </Select>\n    };\n\n    render() {\n        const { round } = this.state;\n        this.userInputRefs = [];\n        return (\n            <div>\n                Select your team: {this.selectTeam()}\n                <h1>Round name here: {round && round.name}</h1>\n                {round && round.questions && round.questions.map((q, i) => this.displayQuestion(q,i))}\n                <button onClick={this.submitRound}>Submit all answers for this round</button>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(RoundTaker)","import React from 'react';\nimport firebase from 'firebase';\nimport { Input} from 'antd';\nimport {\n    withRouter,\n} from \"react-router-dom\";\n\nclass QuizTaker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quiz: {},\n            teamName: '',\n            teamMembers: [],\n            newTeamMember: '',\n        };\n    }\n\n    componentDidMount() {\n        const { name } = this.props.match.params;\n        const self = this;\n        this.quizRef = firebase.database().ref('quizzes').child(name);\n        this.quizRef.on('value', snapshot => {\n            self.setState({\n                quiz: snapshot.val(),\n            });\n        });\n    }\n\n    updateTeamName = (e) => {\n        this.setState({\n            teamName: e.target.value,\n        })\n    };\n\n    updateNewTeamMember = (e) => {\n        this.setState({\n            newTeamMember: e.target.value,\n        })\n    };\n\n    addTeamMember = () => {\n        const { teamMembers, newTeamMember } = this.state;\n        this.setState({\n            teamMembers: [...teamMembers, newTeamMember],\n            newTeamMember: '',\n        })\n    };\n\n    submitTeam = () => {\n        const { quiz, teamName, teamMembers} = this.state;\n        const { teams } = quiz;\n        if (!teams) {\n            quiz.teams = {};\n        }\n        quiz.teams[teamName] = {name: teamName, teamMembers: teamMembers};\n        this.quizRef.set(quiz);\n        this.setState({\n            teamMembers: [],\n            teamName: '',\n        })\n    };\n\n    render() {\n        const { quiz, teamName, teamMembers, newTeamMember } = this.state;\n        return (\n            <div>\n                <h1>Quiz name here: {quiz && quiz.name}</h1>\n                Team name: <Input value={teamName} onChange={this.updateTeamName} />\n                {teamMembers.map(member => <div>{member}</div>)}\n                Add Team Member: <Input onPressEnter={this.addTeamMember} value={newTeamMember} onChange={this.updateNewTeamMember} />\n                <button onClick={this.submitTeam}>Submit Team</button>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(QuizTaker)","import React from 'react';\nimport firebase from 'firebase';\nimport { Select, Table } from 'antd';\nimport {\n    Link,\n    useParams,\n    withRouter,\n} from \"react-router-dom\";\n\nconst { Option } = Select;\n\nconst teamNameColumn = {\n    title: 'Team Name',\n    dataIndex: 'teamName',\n    key: 'teamName',\n};\n\nconst totalColumn = {\n    title: 'Total',\n    dataIndex: 'total',\n    key: 'total',\n};\n\nclass Scoreboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quiz: {},\n        };\n    }\n\n    componentDidMount() {\n        const { name } = this.props.match.params;\n        console.log(name);\n        const self = this;\n        this.quizRef = firebase.database().ref('quizzes').child(name);\n        this.quizRef.on('value', snapshot => {\n            const quiz = snapshot.val();\n            self.setState({\n                quiz,\n            });\n        });\n    }\n\n    createTotalTeamScores = (teamScores) => {\n        teamScores.forEach(teamScore => {\n            let total = 0;\n            Object.keys(teamScore).filter(key => key !== 'teamName' && key !== 'total').forEach(key => {\n                total += parseFloat(teamScore[key]);\n            });\n            teamScore.total = total;\n        })\n    };\n\n    render() {\n        const { quiz } = this.state;\n        const { teams, rounds } = quiz;\n        let teamScores;\n        if (teams) {\n            teamScores = Object.keys(teams).map(teamName => {\n                return {teamName: teamName}\n            });\n        }\n        let roundNames = [];\n        if (rounds) {\n            roundNames = Object.keys(rounds);\n            Object.keys(rounds).forEach(roundName => {\n                const round = rounds[roundName];\n                if (round.questions) {\n                    round.questions.forEach(question => {\n                        if (question.scores) {\n                            Object.keys(question.scores).forEach(teamName => {\n                                let teamScore = teamScores.filter(elem => elem.teamName === teamName)[0];\n                                let score;\n                                if (isNaN(question.scores[teamName]) || question.scores[teamName] === '') {\n                                    score = 0;\n                                } else {\n                                    score = parseFloat(question.scores[teamName]);\n                                }\n                                if (teamScore.hasOwnProperty(round.name)) {\n                                    teamScore[round.name] += score;\n                                } else {\n                                    teamScore[round.name] = score;\n                                }\n                            })\n                        }\n                    })\n                }\n            })\n        }\n        const roundColumns = roundNames.map(roundName => {\n            return {\n                title: roundName,\n                dataIndex: roundName,\n                key: roundName,\n            }\n        });\n        if (teamScores) {\n            this.createTotalTeamScores(teamScores);\n            teamScores.sort((a,b) => b.total - a.total);\n        }\n        const columns = [teamNameColumn, ...roundColumns, totalColumn];\n        return (\n            <div>\n                <Table columns={columns} dataSource={teamScores}/>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Scoreboard)","import React from 'react';\nimport firebase from 'firebase';\nimport { Select, Table } from 'antd';\nimport {\n    Link,\n    useParams,\n    withRouter,\n} from \"react-router-dom\";\nimport Scoreboard from \"./Scoreboard\";\n\nconst { Option } = Select;\n\nconst renderAnswers = (record) => {\n    const { questionType } = record;\n    if (questionType === 'text' || questionType === 'speed') {\n        return <div>\n            {record.answerType.toUpperCase()} [{record.possibleAnswers.join(', ')}]\n        </div>\n    }\n    if (questionType === 'number' || questionType === 'closest') {\n        return <div>\n            {record.numberAnswer}\n            {record.margin && (' +- ' + record.margin)}\n        </div>\n    }\n    if (questionType === 'multiple_answers') {\n        return <div>\n            {record.multipleAnswers.map((answer, i) => {\n                return <div>\n                    {i+1}: {answer.answerType.toUpperCase()} [{answer.possibleAnswers.join(', ')}]\n                </div>\n            })}\n        </div>\n    }\n    if (questionType === 'multiple_choice') {\n        return <div>\n            {record.correctChoice.toUpperCase()} from [{record.choices.join(', ')}]\n        </div>\n    }\n    return record.possibleAnswers;\n};\n\nclass RoundResults extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            round: {},\n        };\n    }\n\n    componentDidMount() {\n        const { name, round } = this.props.match.params;\n        const self = this;\n        this.roundRef = firebase.database().ref('quizzes').child(name).child('rounds').child(round);\n        this.roundRef.on('value', snapshot => {\n            const round = snapshot.val();\n            self.setState({\n                round,\n            });\n        });\n    }\n\n    renderOtherInfo = (question, teamName) => {\n        let other;\n        if (question.questionType === 'speed') {\n            if (question.guesses) {\n                const filteredGuesses = question.guesses.filter(g => g.teamName === teamName);\n                if (filteredGuesses.length > 0) {\n                    const guess = filteredGuesses[0];\n                    if (guess.cluesRevealed) {\n                        return (guess.correct ? \"CORRECT after \" : \"INCORRECT after \") + guess.cluesRevealed + \" clue(s) revealed\";\n                    }\n                }\n            }\n            return 'Testing';\n        }\n\n    }\n\n    renderScores = (question, questionIndex) => {\n        const { columns } = this.props;\n        const { scores } = question;\n        const data = scores && Object.keys(scores).map((teamName, i) => {\n            const other = this.renderOtherInfo(question, teamName);\n            return {\n                teamName: teamName,\n                teamAnswer: question.userAnswer && question.userAnswer[teamName],\n                points: scores[teamName],\n                questionType: question.questionType,\n                questionIndex: questionIndex,\n                other\n            };\n        });\n        return <Table columns={columns} dataSource={data}/>\n    };\n\n    displayQuestion = (question, i) => {\n        return <div style={{border: '2px solid black'}}>\n            <h4>Q{i+1}: {question.question} (type={question.questionType})</h4>\n            {renderAnswers(question)}\n            {this.renderScores(question, i)}\n        </div>\n    };\n\n    render() {\n        const { round } = this.state;\n        return (\n            <div>\n                <h1>Round name here: {round && round.name}</h1>\n                {round && round.questions && round.questions.map((q, i) => this.displayQuestion(q,i))}\n                <Scoreboard />\n            </div>\n        );\n    }\n}\n\nexport default withRouter(RoundResults)","import React from 'react';\nimport firebase from 'firebase';\nimport {withRouter} from \"react-router-dom\";\nimport RoundResults from \"../../results/RoundResults\";\nimport { Input } from 'antd';\n\nclass HostRoundResults extends React.Component {\n\n    changePoints = (e, record) => {\n        const { name, round } = this.props.match.params;\n        console.log(name);\n        this.scoreRef = firebase.database().ref('quizzes').child(name).child('rounds').child(round).child('questions').child(record.questionIndex).child('scores').child(record.teamName);\n        console.log(e.target.value);\n        const score = e.target.value;\n        this.scoreRef.set(score);\n    };\n\n    getColumns = () => {\n        return [\n            {\n                title: 'Team Name',\n                dataIndex: 'teamName',\n                key: 'teamName',\n            },\n            {\n                title: 'Team Answer',\n                dataIndex: 'teamAnswer',\n                key: 'teamAnswer',\n            },\n            {\n                title: 'Other',\n                dataIndex: 'other',\n                key: 'other',\n            },\n            {\n                title: 'Points',\n                dataIndex: 'points',\n                key: 'points',\n            },\n            {\n                title: 'Update points',\n                dataIndex: 'updatePoints',\n                key: 'updatePoints',\n                render: (text,record) => {\n                    return <Input style={{width: 150}} value={record.points} onChange={e => this.changePoints(e,record)}/>\n                }\n            },\n        ];\n    };\n\n    render() {\n        return <RoundResults columns={this.getColumns()}/>\n    }\n}\n\nexport default withRouter(HostRoundResults)","import React from 'react';\nimport {withRouter} from \"react-router-dom\";\nimport RoundResults from \"../../results/RoundResults\";\n\nconst columns = [\n    {\n        title: 'Team Name',\n        dataIndex: 'teamName',\n        key: 'teamName',\n    },\n    {\n        title: 'Points',\n        dataIndex: 'points',\n        key: 'points',\n    },\n];\n\nclass ParticipantRoundResults extends React.Component {\n    render() {\n        return <RoundResults columns={columns}/>\n    }\n}\n\nexport default withRouter(ParticipantRoundResults)","import React from 'react';\nimport 'antd/dist/antd.css'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useParams,\n    HashRouter,\n} from \"react-router-dom\";\nimport HostHomePage from \"./host/HostHomePage\";\nimport QuizCreator from \"./host/QuizCreator\";\nimport ParticipantHomePage from \"./participant/ParticipantHomePage\";\nimport QuizTaker from \"./participant/QuizTaker\";\nimport RoundTaker from \"./participant/RoundTaker\";\nimport Register from \"./register/Register\";\nimport HostRoundResults from \"./host/results/HostRoundResults\";\nimport ParticipantRoundResults from \"./participant/results/ParticipantRoundResults\";\n\n\nexport default class HomePage extends React.Component {\n\n    render() {\n        return (\n            <HashRouter basename={'/'}>\n                <div>\n                    <ul>\n                        <li><Link to={\"/\"}>Home</Link></li>\n                        <li><Link to={\"/about\"}>About</Link></li>\n                    </ul>\n                    <hr/>\n                    <Route exact path={'/'} component={<div>Homeeeeeee</div>}/>\n                    <Route exact path={'/about'} component={<div>Abouttttt</div>}/>\n                </div>\n            </HashRouter>\n        )\n    }\n\n    // render() {\n    //     return (\n    //         <Router>\n    //             <Route exact path={process.env.PUBLIC_URL + '/#/participant'}>\n    //                 <ParticipantHomePage/>\n    //             </Route>\n    //             <Route exact path={process.env.PUBLIC_URL + '/'}>\n    //                 <ParticipantHomePage/>\n    //             </Route>\n    //             <Route exact path={process.env.PUBLIC_URL + '/#/host'}>\n    //                 <HostHomePage firebase />\n    //             </Route>\n    //             <Route exact path={process.env.PUBLIC_URL + '/#/host/:name'}>\n    //                 <QuizCreator/>\n    //             </Route>\n    //             <Route exact path={process.env.PUBLIC_URL + '/#/participant/:name'}>\n    //                 <QuizTaker/>\n    //             </Route>\n    //             <Route exact path={process.env.PUBLIC_URL + '/#/participant/:name/:round'}>\n    //                 <RoundTaker/>\n    //             </Route>\n    //             <Route exact path={process.env.PUBLIC_URL + '/#/participant/:name/:round/results'}>\n    //                 <ParticipantRoundResults/>\n    //             </Route>\n    //             <Route exact path={process.env.PUBLIC_URL + '/#/host/:name/:round/results'}>\n    //                 <HostRoundResults/>\n    //             </Route>\n    //             <Route exact path={process.env.PUBLIC_URL + '/#/participant/:name/:round/results/:teamName'}>\n    //                 {/*<RoundTeamResults/>*/}\n    //             </Route>\n    //             <Route exact path={process.env.PUBLIC_URL + '/#/register/:name'}>\n    //                 <Register/>\n    //             </Route>\n\n    //         </Router>\n    //     );\n    // }\n}\n\n\nfunction Child() {\n    // We can use the `useParams` hook here to access\n    // the dynamic pieces of the URL.\n    let { name } = useParams();\n\n    return (\n        <div>\n            <h3>Quiz name: {name}</h3>\n        </div>\n    );\n}","import React from 'react';\nimport HomePage from \"./components/HomePage\";\nimport app from 'firebase/app';\nimport 'antd/dist/antd.css'\n\nvar config = {\n    apiKey: \"AIzaSyBfCWC3nO4Dm6t_Mdi023zABHHKzrOdQkI\",\n    authDomain: \"trivia-7b47d.firebaseapp.com\",\n    databaseURL: \"https://trivia-7b47d.firebaseio.com\",\n    projectId: \"trivia-7b47d\",\n    storageBucket: \"trivia-7b47d.appspot.com\",\n    messagingSenderId: \"1017757056711\",\n};\n\napp.initializeApp(config);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <HomePage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}