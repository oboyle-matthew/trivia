{"version":3,"sources":["components/host/HostHomePage.js","components/old_stuff/Questions.js","components/old_stuff/LevenshteinDistance.js","components/host/question_components/Question.js","components/host/question_components/QuestionType.js","components/host/answer_components/TextAnswer.js","components/host/answer_components/NumberAnswer.js","components/host/answer_components/ClosestNumber.js","components/host/answer_components/MultipleChoice.js","components/host/answer_components/SpeedRound.js","components/host/answer_components/MultipleAnswers.js","components/host/score_components/SingleScore.js","components/host/QuestionCreator.js","helpers/QuestionPoster.js","components/host/RoundCreator.js","components/host/QuizCreator.js","components/participant/ParticipantHomePage.js","components/participant/QuizTaker.js","components/participant/user_input/TextInput.js","components/participant/user_input/NumberInput.js","components/participant/user_input/MultipleChoice.js","components/participant/speed_clues/SpeedClues.js","helpers/AnswerPoster.js","components/participant/user_input/MultipleAnswersInput.js","components/participant/RoundTaker.js","components/register/Register.js","components/results/Scoreboard.js","components/results/RoundResults.js","components/host/results/HostRoundResults.js","components/participant/results/ParticipantRoundResults.js","components/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["Host","props","removeQuiz","quizName","quizzes","state","toDelete","quizzesRef","set","deletedRef","firebase","database","ref","once","snapshot","toAdd","exists","val","name","displayQuiz","quiz","i","style","display","flexDirection","date","to","onClick","addNewQuiz","newQuizName","hasOwnProperty","setState","error","changeNewQuizName","e","target","value","displayErrorMessage","self","this","on","Object","keys","map","onPressEnter","onChange","width","React","Component","Select","Option","Question","updateQuestionString","questionString","QuestionType","questionType","height","update","TextAnswer","changeNewAnswer","newAnswer","changeAnswerType","answerType","addPossibleAnswer","possibleAnswers","toLowerCase","removePossibleAnswer","splice","getInfoForPosting","length","indexOf","push","grid","column","dataSource","renderItem","item","Item","placeholder","NumberAnswer","changeAnswer","isNaN","numberAnswer","changeMargin","margin","changeMinInput","maxInput","newNumberAnswer","newMargin","invalidNumber","parseFloat","Math","abs","minInput","changeMaxInput","num","renderAnswerInput","ClosestNumber","updateScore","positionScoring","addPosition","removePosition","renderPositionScores","score","MultipleChoice","choices","correctChoice","changeNewOption","newOption","addChoice","removeOption","Group","choice","SpeedRound","clues","scoreType","cluesRevealedScore","positionScores","infoForPosting","textAnswerRef","current","clue","updateClue","removeClue","addClue","renderClues","changeScoreType","updatePositionScore","removePositionScore","addPositionScore","renderScoring","renderCluesRevealedScores","updateCluesRevealedScore","createRef","MultipleAnswers","multipleScores","scores","multipleAnswers","scoresRefs","addAnswer","removeLastAnswer","pop","elem","SingleScore","placeHolder","QuestionCreator","updateQuestionType","displayPossibleAnswers","possibleAnswersRef","question","questionRef","info","forEach","key","scoreRef","console","log","displayScores","modalOpen","questionTypeRef","submitQuestion","data","round","roundRef","invalidScoringArray","filter","invalidClues","arr","invalidAnswers","validateInput","questions","ordinalSuffix","j","k","renderAnswers","text","record","toUpperCase","join","answer","renderScores","RoundCreator","moveUp","oldAbove","moveDown","oldBelow","renderPosition","deleteQuestion","renderDeleteRow","beginSpeedRound","qRef","child","begin","endSpeedRound","show","showClue","clueIndex","clueRef","hideClue","renderSpeedClues","clueButton","renderQuestions","index","addQuestion","handleOk","questionCreatorRef","err","handleCancel","toggleShowRound","setCustomScoring","customScoringEnabled","customScores","updateCustomScore","Number","isInteger","parseInt","renderCustomScoring","columns","title","dataIndex","render","checked","pagination","visible","onOk","onCancel","Panel","Collapse","QuizCreator","addNewRound","rounds","roundName","quizRef","renderTeams","teams","teamName","match","params","header","withRouter","ParticipantHomePage","QuizTaker","defaultActiveKey","TextInput","updateAnswer","NumberInput","SpeedClues","submit","submitAnswer","answers","points","undefined","gradeTextQuestion","correctAnswer","gradeNumberQuestion","guesses","teamGuessIndex","guess","sort","a","b","sortByGuessDistance","scoring","updateScoring","gradeClosestQuestion","gradeMultipleChoiceQuestion","numCorrect","cluesRevealed","correct","correctAnswers","gradeSpeedQuestion","gradeQuestion","userAnswer","addScoreToDatabase","possibleAnswer","includes","MultipleAnswersInput","RoundTaker","userInput","userInputRefs","submitSpeedQuestion","changeCustomScore","customScoresError","numbers","number","selectCustomScore","color","displayQuestion","border","selectedTeam","submitRound","changeSelectedTeam","selectTeam","teamRef","q","updateTeamName","updateNewTeamMember","newTeamMember","addTeamMember","teamMembers","submitTeam","member","teamNameColumn","totalColumn","Scoreboard","createTotalTeamScores","teamScores","teamScore","total","roundNames","roundColumns","RoundResults","renderOtherInfo","filteredGuesses","g","questionIndex","other","teamAnswer","HostRoundResults","changePoints","getColumns","ParticipantRoundResults","HomePage","basename","exact","path","Register","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","className","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.618ada6d.chunk.js","sourcesContent":["import React from 'react';\nimport firebase from 'firebase';\nimport { Input } from \"antd\";\nimport {\n    Link\n} from \"react-router-dom\";\n\nexport default class Host extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quizzes: {},\n            newQuizName: '',\n            error: false,\n        };\n    }\n\n    componentDidMount() {\n        const self = this;\n        this.quizzesRef = firebase.database().ref('quizzes');\n        this.quizzesRef.on('value', snapshot => {\n            self.setState({\n                quizzes: snapshot.val(),\n                newQuizName: '',\n            });\n        });\n    }\n\n    removeQuiz = (quizName) => {\n        const { quizzes } = this.state;\n        const toDelete = quizzes[quizName];\n        delete quizzes[quizName];\n        this.quizzesRef.set(quizzes);\n        this.deletedRef = firebase.database().ref('deleted');\n        this.deletedRef.once(\"value\", snapshot => {\n            let toAdd = {};\n            if (snapshot.exists()) {\n                toAdd = snapshot.val();\n            }\n            toAdd[toDelete.name] = toDelete;\n            this.deletedRef.set(toAdd);\n        });\n    };\n\n    displayQuiz = (quiz, i) => {\n        return <div style={{display: 'flex', flexDirection: 'row'}}>\n            <p>{quiz.name}</p>\n            <p>{quiz.date}</p>\n            <Link to={'/host/' + quiz.name}>View</Link>\n            {quiz.name !== 'Example quiz' && <button onClick={() => this.removeQuiz(quiz.name)}>X</button>}\n        </div>\n    };\n\n    addNewQuiz = () => {\n        const { quizzes, newQuizName } = this.state;\n        if (quizzes.hasOwnProperty(newQuizName)) {\n            this.setState({\n                error: true,\n            })\n        } else {\n            quizzes[newQuizName] = {'name': newQuizName, 'rounds': []};\n            this.quizzesRef.set(quizzes);\n        }\n    };\n\n    changeNewQuizName = (e) => {\n        this.setState({\n            newQuizName: e.target.value,\n            error: false,\n        })\n    };\n\n    displayErrorMessage = () => {\n        return <div>\n            A quiz with this name already exists\n        </div>\n    };\n\n    render() {\n        const { quizzes, newQuizName, error } = this.state;\n        return (\n            <div>\n                <h1>Host home page</h1>\n                {Object.keys(quizzes).map((quizName, i) => this.displayQuiz(quizzes[quizName], i))}\n                New Quiz Name: <Input value={newQuizName} onPressEnter={this.addNewQuiz} onChange={this.changeNewQuizName} style={{width: 300}} />\n                <button onClick={this.addNewQuiz}>Add</button>\n                {error && this.displayErrorMessage()}\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\n\nconst { Option } = Select;\n\nexport default class Questions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answers: [],\n            score: null,\n            results: [],\n        };\n    }\n\n    componentDidMount() {\n        const { questions } = this.props;\n        this.setState({\n            answers: questions.map(elem => ''),\n            results: questions.map(elem => ''),\n        })\n    }\n\n    updateAnswer = (e, i) => {\n        let { answers } = this.state;\n        answers[i] = e.target.value.toLowerCase();\n        this.setState({\n            answers: answers,\n        })\n    };\n\n    submit = () => {\n        const { questions } = this.props;\n        let { answers, results } = this.state;\n        let score = 0;\n        questions.forEach((question, index) => {\n            const answer = answers[index];\n            if (answer === undefined) {\n                results[index] = \"Answer should have \" +(question.type === 'exactly' ? 'exactly matched' : 'matched one of') + \" answer choices ([\" + question.answers.join(\", \") + \"])\"\n                return;\n            }\n            if (question.type === 'exactly') {\n                const i = question.answers.indexOf(answer);\n                if (i >= 0) {\n                    score += 1;\n                    results[index] = \"CORRECT! \" + answer + \" exactly matches \" + \"index \" + i + \" of answer choices ([\" + question.answers.join(\", \") + \"])\";\n                } else {\n                    results[index] = \"INCORRECT! Answer should have exactly matched one of answer choices ([\" + question.answers.join(\", \") + \"])\"\n                }\n            } else if (question.type === 'contains') {\n                const filteredAnswers = question.answers.filter(a => answer.includes(a));\n                if (filteredAnswers.length > 0) {\n                    score += 1;\n                    results[index] = \"CORRECT! \" + answer + \"contains \\\"\" + filteredAnswers[0] + \"\\\" from index \" + index + \" of answer choices ([\" + question.answers.join(\", \") + \"])\";\n                } else {\n                    results[index] = \"INCORRECT! Answer should have contained one of answer choices ([\" + question.answers.join(\", \") + \"])\"\n                }\n            }\n        });\n        this.setState({\n            score: score,\n            results: results,\n        })\n    };\n\n    render() {\n        const { questions } = this.props;\n        const { answers, score, results } = this.state;\n        return (\n            <div>\n                <h1>Below is the example quiz, based on the questions created above</h1>\n                {questions.map((question, i) => {\n                    return <div style={{marginBottom: 50}}>\n                        <p>Question {i+1}: {question.question}</p>\n                        <div style={{display: 'flex', flexDirection: 'row'}}>\n                            Your answer for q{i+1}: <Input style={{width: 500}} value={answers[i]} onChange={e => this.updateAnswer(e, i)} />\n                            {results[i]}\n                        </div>\n                    </div>\n                })}\n                <button onClick={this.submit}>Submit</button>\n                <div>\n                    Your score: {score}/{questions.length}\n                </div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\n\nconst { Option } = Select;\n\nexport default class Questions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            s1: '',\n            s2: '',\n            score: 0,\n            similar: false,\n        };\n    }\n\n    calculate = () => {\n        const { s1, s2 } = this.state;\n        const a = s1;\n        const b = s2;\n        if (a.length == 0) return b.length;\n        if (b.length == 0) return a.length;\n\n        var matrix = [];\n\n        // increment along the first column of each row\n        var i;\n        for (i = 0; i <= b.length; i++) {\n            matrix[i] = [i];\n        }\n\n        // increment each column in the first row\n        var j;\n        for (j = 0; j <= a.length; j++) {\n            matrix[0][j] = j;\n        }\n\n        // Fill in the rest of the matrix\n        for (i = 1; i <= b.length; i++) {\n            for (j = 1; j <= a.length; j++) {\n                if (b.charAt(i - 1) == a.charAt(j - 1)) {\n                    matrix[i][j] = matrix[i - 1][j - 1];\n                } else {\n                    matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // substitution\n                        Math.min(matrix[i][j - 1] + 1, // insertion\n                            matrix[i - 1][j] + 1)); // deletion\n                }\n            }\n        }\n\n        const ans = matrix[b.length][a.length] / a.length;\n        if (ans < 0.4) {\n            this.setState({\n                similar: true,\n                score: ans,\n            })\n        } else {\n            this.setState({\n                similar: false,\n                score: ans,\n            })\n        }\n    }\n\n    updates1 = (e) => {\n        this.setState({\n            s1: e.target.value.toLowerCase().trim(),\n        })\n    };\n\n    updates2 = (e) => {\n        this.setState({\n            s2: e.target.value.toLowerCase().trim(),\n        })\n    };\n\n    render() {\n        const { s1, s2, score, similar } = this.state;\n        return (\n            <div>\n                <h1>This is a test view of the (Levenshtein Distance / length of first string) to test similarity of strings. Threshold set at 0.4 currently.</h1>\n                s1: <Input value={s1} id={0} onChange={this.updates1} />\n                s2: <Input value={s2} id={1} onChange={this.updates2} />\n                <button onClick={this.calculate}>Calculate</button>\n                {score}: {similar ? \"similar\" : \"NOT similar\"}\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport app from 'firebase/app';\nimport firebase from 'firebase';\nimport { Input, Table, Modal } from \"antd\";\nimport { storage } from \"firebase\";\n\nexport default class Question extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questionString: '',\n        };\n    }\n\n    updateQuestionString = (e) => {\n        this.setState({\n            questionString: e.target.value,\n        })\n    };\n\n    render() {\n        return (\n            <div>\n                <div>Question:</div>\n                <Input onChange={this.updateQuestionString} />\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport app from 'firebase/app';\nimport firebase from 'firebase';\nimport { Input, Table, Modal, Select } from \"antd\";\nimport { storage } from \"firebase\";\n\nconst { Option } = Select;\n\nexport default class QuestionType extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questionType: 'text',\n        };\n    }\n\n    render() {\n        const { questionType } = this.props;\n        return (\n            <div>\n                <div>Question Type:</div>\n                <Select value={questionType} style={{width: 200, height: 40}} onChange={this.props.update}>\n                    <Option value=\"text\">Text</Option>\n                    <Option value=\"number\">Number</Option>\n                    <Option value=\"closest\">Closest Number</Option>\n                    <Option value=\"multiple_choice\">Multiple Choice</Option>\n                    <Option value=\"multiple_answers\">Multiple Answers</Option>\n                    <Option value=\"speed\">Speed round</Option>\n                </Select>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\n\nconst { Option } = Select;\n\nexport default class TextAnswer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answerType: 'exactly',\n            possibleAnswers: [],\n            newAnswer: '',\n        };\n    }\n\n    changeNewAnswer = (e) => {\n        this.setState({\n            newAnswer: e.target.value\n        })\n    };\n\n    changeAnswerType = (e) => {\n        this.setState({\n            answerType: e\n        })\n    };\n\n    addPossibleAnswer = (e) => {\n        const { possibleAnswers } = this.state;\n        this.setState({\n            possibleAnswers: [...possibleAnswers, e.target.value.toLowerCase()],\n            newAnswer: '',\n        })\n    };\n\n    removePossibleAnswer = (i) => {\n        let { possibleAnswers } = this.state;\n        possibleAnswers.splice(i, 1);\n        this.setState({\n            possibleAnswers: possibleAnswers,\n        })\n    };\n\n    getInfoForPosting = () => {\n        const { answerType, possibleAnswers, newAnswer } = this.state;\n        if (newAnswer.length > 0 && possibleAnswers.indexOf(newAnswer) === -1) {\n            possibleAnswers.push(newAnswer.toLowerCase());\n            this.setState({\n                possibleAnswers: possibleAnswers,\n                newAnswer: '',\n            })\n        }\n        return {answerType, possibleAnswers};\n    };\n\n    render() {\n        const { newAnswer, answerType, possibleAnswers } = this.state;\n        return (\n            <div>\n                <div>\n                    <div>Answer Type: </div>\n                    <Select value={answerType} style={{width: 200, height: 40}} onChange={this.changeAnswerType}>\n                        <Option value=\"exactly\">Is Exactly...</Option>\n                        <Option value=\"contains\">Contains...</Option>\n                        {/*<Option value=\"regex\">Matches regex...</Option>*/}\n                    </Select>\n                    <br/>\n                </div>\n                <h4>Possible answers: </h4>\n                <div>\n                    {possibleAnswers.length === 0 ? \"No answer options yet...\" : <List grid={{column: 5}}\n                        dataSource={possibleAnswers}\n                        renderItem={(item, i) => (\n                            <List.Item>{item}\n                            <button onClick={() => this.removePossibleAnswer(i)}>X</button>\n                            </List.Item>\n                        )}\n                    />}\n                    <div>\n                        Input an answer (Enter to add it to the list):\n                        <Input style={{width: 400}} onPressEnter={this.addPossibleAnswer} value={newAnswer} onChange={this.changeNewAnswer} placeholder=\"Answer\" />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\n\nconst { Option } = Select;\n\nexport default class NumberAnswer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            numberAnswer: null,\n            margin: 0,\n            answerType: 'plusMinus',\n            minInput: null,\n            maxInput: null,\n        };\n    }\n\n    getInfoForPosting = () => {\n        return this.state;\n    };\n\n    changeAnswer = (e) => {\n        const value = e.target.value;\n        if (value === '-' || value === '' || !isNaN(value) || value.indexOf('e') === value.length-1) {\n            this.setState({numberAnswer: value})\n        }\n    };\n\n    changeMargin = (e) => {\n        const value = e.target.value;\n        if (value === '-' || value === '' || !isNaN(value) || value.indexOf('e') === value.length-1) {\n            this.setState({margin: value})\n        }\n    };\n\n    changeMinInput = (e) => {\n        const { maxInput } = this.state;\n        const value = e.target.value;\n        if (value === '-' || value === '' || !isNaN(value) || value.indexOf('e') === value.length-1) {\n            let newNumberAnswer = null;\n            let newMargin = 0;\n            if (!this.invalidNumber(value) && !this.invalidNumber(maxInput)) {\n                newNumberAnswer = ((parseFloat(maxInput) + parseFloat(value)) / 2);\n                newMargin = ((parseFloat(maxInput) - parseFloat(value)) / 2);\n            }\n            this.setState({\n                numberAnswer: newNumberAnswer,\n                margin: Math.abs(newMargin),\n                minInput: value,\n            })\n        }\n    };\n\n    changeMaxInput = (e) => {\n        const { minInput } = this.state;\n        const value = e.target.value;\n        if (value === '-' || value === '' || !isNaN(value) || value.indexOf('e') === value.length-1) {\n            let newNumberAnswer = null;\n            let newMargin = 0;\n            if (!this.invalidNumber(minInput) && !this.invalidNumber(value)) {\n                newNumberAnswer = ((parseFloat(value) + parseFloat(minInput)) / 2);\n                newMargin = ((parseFloat(value) - parseFloat(minInput)) / 2);\n            }\n            this.setState({\n                numberAnswer: newNumberAnswer,\n                margin: Math.abs(newMargin),\n                maxInput: value,\n            })\n        }\n    };\n\n    invalidNumber = (num) => {\n        return num === '' || num === null || isNaN(num);\n    };\n\n    changeAnswerType = (e) => {\n        this.setState({\n            answerType: e\n        })\n    };\n\n    renderAnswerInput = () => {\n        const { numberAnswer, margin, answerType, minInput, maxInput } = this.state;\n        return (\n            answerType === 'plusMinus' ? <div style={{display: 'flex', flexDirection: 'row'}}>\n                Answer: <Input style={{width: 200}} value={numberAnswer} onChange={this.changeAnswer} />\n                +- <Input style={{width: 200}} value={margin} onChange={this.changeMargin} />\n            </div> : <div>\n                Min: <Input style={{width: 200}} value={minInput} onChange={this.changeMinInput} />\n                Max: <Input style={{width: 200}} value={maxInput} onChange={this.changeMaxInput} />\n            </div>\n        )\n    }\n\n    render() {\n        const { numberAnswer, margin, answerType } = this.state;\n        return (\n            <div >\n                <div>\n                    <div>Answer Type: </div>\n                    <Select value={answerType} style={{width: 200, height: 40}} onChange={this.changeAnswerType}>\n                        <Option value=\"plusMinus\">Plus/Minus</Option>\n                        <Option value=\"minMax\">Min/Max</Option>\n                    </Select>\n                </div>\n                {this.renderAnswerInput()}\n                (Answers accepted between: {parseFloat(numberAnswer) - parseFloat(margin)} and {parseFloat(numberAnswer) + parseFloat(margin)})\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\n\n\nconst { Option } = Select;\n\nexport default class ClosestNumber extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            numberAnswer: null,\n            positionScoring: [3,2,1,0,0],\n        };\n    }\n\n    getInfoForPosting = () => {\n        return this.state;\n    };\n\n    changeAnswer = (e) => {\n        const value = e.target.value;\n        if (value === '-' || value === '' || !isNaN(value) || value.indexOf('e') === value.length-1) {\n            this.setState({numberAnswer: value})\n        }\n    };\n\n    updateScore = (e, i) => {\n        const { positionScoring } = this.state;\n        const value = e.target.value;\n        if (value === '' || !isNaN(value)) {\n            positionScoring[i] = value;\n            this.setState(positionScoring);\n        }\n    };\n\n    addPosition = () => {\n        const { positionScoring } = this.state;\n        this.setState({\n            positionScoring: [... positionScoring, 0]\n        })\n    };\n\n    removePosition = (i) => {\n        const { positionScoring } = this.state;\n        positionScoring.splice(i, 1);\n        this.setState({\n            positionScoring: positionScoring,\n        })\n    };\n\n    renderPositionScores = () => {\n        const { positionScoring } = this.state;\n        return <div>\n            {positionScoring.map((score, i) => {\n                return <div>\n                    Position {i+1}:\n                    <Input style={{width: 50}} value={score} onChange={e => this.updateScore(e, i)} />\n                    <button onClick={() => this.removePosition(i)}>X</button>\n                </div>\n            })}\n            <button onClick={this.addPosition}>Add position</button>\n        </div>\n    };\n\n    render() {\n        const { numberAnswer } = this.state;\n        return (\n            <div>\n                Answer: <Input style={{width: 200, height: 30}} value={numberAnswer} onChange={this.changeAnswer} />\n                {this.renderPositionScores()}\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List, Radio} from 'antd';\n\nconst { Option } = Select;\n\nexport default class MultipleChoice extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            choices: [],\n            newOption: '',\n            correctChoice: null,\n        };\n    }\n\n    getInfoForPosting = () => {\n        const { choices, correctChoice } = this.state;\n        return { choices, correctChoice };\n    };\n\n    changeNewOption = (e) => {\n        this.setState({\n            newOption: e.target.value\n        });\n    };\n\n    addChoice = () => {\n        const { choices, newOption } = this.state;\n        this.setState({\n            choices: [...choices, newOption],\n            newOption: '',\n        })\n    };\n\n    removeOption = (i) => {\n        const { choices } = this.state;\n        choices.splice(i, 1);\n        this.setState({\n            choices: choices,\n        })\n    };\n\n    onChange = e => {\n        this.setState({\n            correctChoice: e.target.value,\n        });\n    };\n\n    render() {\n        const { choices, newOption, correctChoice } = this.state;\n        return (\n            <div>\n                <Radio.Group onChange={this.onChange} value={correctChoice}>\n                    {choices.map((choice, i) => {\n                        return <div>\n                            <Radio value={choice}>{choice}</Radio>\n                            <button onClick={() => this.removeOption(i)}>X</button>\n                        </div>\n                    })}\n                </Radio.Group>\n                <div>\n                    <Input onPressEnter={this.addChoice} style={{width: 200}} value={newOption} onChange={this.changeNewOption} />\n                    <button onClick={this.addChoice}>Add</button>\n                </div>\n\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\nimport TextAnswer from \"./TextAnswer\";\n\nconst { Option } = Select;\n\nexport default class SpeedRound extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            clues: [''],\n            scoreType: 'clues_revealed',\n            cluesRevealedScore: [1],\n            positionScores: [3,2,1,0,0,0],\n        };\n        this.textAnswerRef = React.createRef();\n    }\n\n    getInfoForPosting = () => {\n        const { clues, scoreType, cluesRevealedScore, positionScores } = this.state;\n        const infoForPosting = this.textAnswerRef.current.getInfoForPosting();\n        infoForPosting.clues = clues.map(clue => {\n            return {clue: clue}\n        });\n        infoForPosting.scoreType = scoreType;\n        infoForPosting.positionScoring = scoreType === 'clues_revealed' ? cluesRevealedScore : positionScores;\n        return infoForPosting;\n    };\n\n    updateClue = (e, i) => {\n        const { clues } = this.state;\n        clues[i] = e.target.value;\n        this.setState({\n            clues: clues,\n        })\n    };\n\n    removeClue = (i) => {\n        const { clues, cluesRevealedScore } = this.state;\n        clues.splice(i,1);\n        cluesRevealedScore.splice(0,1);\n        this.setState({\n            clues: clues,\n            cluesRevealedScore: cluesRevealedScore,\n        })\n    };\n\n    addClue = () => {\n        const { clues, cluesRevealedScore } = this.state;\n        this.setState({\n            clues: [...clues, ''],\n            cluesRevealedScore: [parseFloat(cluesRevealedScore[0])+1, ...cluesRevealedScore],\n        })\n    };\n\n    renderClues = () => {\n        const { clues } = this.state;\n        return (\n            <div>\n                {clues.map((clue, i) => {\n                    return (\n                        <div style={{display: 'flex', flexDirection: 'row'}}>\n                            Clue {i+1}: <Input style={{width: 800}} value={clue} onChange={e => this.updateClue(e, i)} />\n                            {i > 0 && <button onClick={() => this.removeClue(i)}>X</button>}\n                        </div>\n                    )\n                })}\n                <button onClick={this.addClue}>Add Clue</button>\n            </div>\n        )\n    };\n\n    changeScoreType = (e) => {\n        this.setState({\n            scoreType: e\n        })\n    };\n\n    updatePositionScore = (e, i) => {\n        const { positionScores } = this.state;\n        const value = e.target.value;\n        if (value === '' || !isNaN(value)) {\n            positionScores[i] = value;\n            this.setState({positionScores: positionScores})\n        }\n    };\n\n    removePositionScore = (i) => {\n        const { positionScores } = this.state;\n        positionScores.splice(i, 1);\n        this.setState({\n            positionScores: positionScores,\n        })\n    };\n\n    addPositionScore = () => {\n        const { positionScores } = this.state;\n        this.setState({\n            positionScores: [... positionScores, 0]\n        })\n    };\n\n    renderPositionScores = () => {\n        const { positionScores } = this.state;\n        return <div>\n            {positionScores.map((score, i) => {\n                return <div>\n                    Position {i+1}:\n                    <Input style={{width: 50}} value={score} onChange={e => this.updatePositionScore(e, i)} />\n                    <button onClick={() => this.removePositionScore(i)}>X</button>\n                </div>\n            })}\n            <button onClick={this.addPositionScore}>Add position</button>\n        </div>\n    };\n\n    renderScoring = () => {\n        const { scoreType } = this.state;\n        return (\n            <div>\n                <div>Scores determined by:</div>\n                <Select value={scoreType} style={{width: 200, height: 40}} onChange={this.changeScoreType}>\n                    <Option value=\"clues_revealed\">Clues Revealed</Option>\n                    <Option value=\"position\">Position</Option>\n                </Select>\n                {scoreType === 'clues_revealed' ? this.renderCluesRevealedScores() : this.renderPositionScores()}\n            </div>\n        )\n    };\n\n    updateCluesRevealedScore = (e,i) => {\n        const {cluesRevealedScore} = this.state;\n        const value = e.target.value;\n        if (value === '' || !isNaN(value)) {\n            cluesRevealedScore[i] = value;\n            this.setState({cluesRevealedScore: cluesRevealedScore})\n        }\n    };\n\n    renderCluesRevealedScores = () => {\n        const { cluesRevealedScore } = this.state;\n        return <div>\n            {cluesRevealedScore.map((score, i) => {\n                return <div>\n                    Guessing after clue {i+1} =\n                    <Input style={{width: 50}} value={score} onChange={e => this.updateCluesRevealedScore(e, i)} />\n                    points\n                </div>\n            })}\n        </div>\n    };\n\n    render() {\n        return (\n            <div>\n                {this.renderClues()}\n                <TextAnswer ref={this.textAnswerRef} />\n                {this.renderScoring()}\n\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\nimport TextAnswer from \"./TextAnswer\";\n\nconst { Option } = Select;\n\nexport default class MultipleAnswers extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            scores: [1],\n        };\n        this.scoresRefs = [React.createRef()];\n    }\n\n    getInfoForPosting = () => {\n        const { scores } = this.state;\n        const multipleAnswers = this.scoresRefs.map(ref => ref.current.getInfoForPosting());\n        return { multipleScores: scores, multipleAnswers }\n    };\n\n    addAnswer = () => {\n        const { scores } = this.state;\n        this.setState({\n            scores: [...scores, parseFloat(scores[scores.length-1])+1]\n        });\n        this.scoresRefs.push(React.createRef());\n    };\n\n    removeLastAnswer = () => {\n        const { scores } = this.state;\n        scores.pop();\n        this.setState({\n            scores: scores\n        });\n        this.scoresRefs.pop();\n    };\n\n    updateScore = (e, i) => {\n        const { scores } = this.state;\n        const value = e.target.value;\n        if (value === '' || !isNaN(value)) {\n            scores[i] = value;\n            this.setState({scores: scores})\n        }\n    };\n\n    render() {\n        const { scores } = this.state;\n        return (\n            <div>\n                {scores.map((elem, i) => {\n                    return (\n                        <div>\n                            <hr/>\n                            <h3>Answer {i+1}:</h3>\n                            <TextAnswer ref={this.scoresRefs[i]}/>\n                        </div>\n                    )\n                })}\n                <hr/>\n                <button onClick={this.addAnswer}>Add another answer</button>\n                {scores.length > 1 && <button onClick={this.removeLastAnswer}>Remove last answer</button>}\n\n                {scores.map((score, i) => {\n                    return (\n                        <div>\n                            {i+1} correct = <Input style={{width: 50}} value={score} onChange={e => this.updateScore(e, i)} /> points\n                        </div>\n                    )\n                })}\n\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input } from \"antd\";\n\nexport default class SingleScore extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            score: 1,\n        };\n    }\n\n    updateScore = (e) => {\n        const value = e.target.value;\n        if (value === '' || !isNaN(value)) {\n            this.setState({score: value})\n        }\n    };\n\n    render() {\n        const { score } = this.state;\n        return (\n            <div>\n                Correct answer: <Input style={{width: 50}} placeHolder={'score...'} value={score} onChange={this.updateScore} /> points\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport app from 'firebase/app';\nimport firebase from 'firebase';\nimport Questions from \"../old_stuff/Questions\";\nimport LevenshteinDistance from \"../old_stuff/LevenshteinDistance\";\nimport { Table, Modal } from \"antd\";\nimport { storage } from \"firebase\";\nimport Question from \"./question_components/Question\";\nimport QuestionType from \"./question_components/QuestionType\";\nimport TextAnswer from \"./answer_components/TextAnswer\";\nimport NumberAnswer from \"./answer_components/NumberAnswer\";\nimport ClosestNumber from \"./answer_components/ClosestNumber\";\nimport MultipleChoice from \"./answer_components/MultipleChoice\";\nimport SpeedRound from \"./answer_components/SpeedRound\";\nimport MultipleAnswers from \"./answer_components/MultipleAnswers\";\nimport SingleScore from \"./score_components/SingleScore\";\n\nexport default class QuestionCreator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questionType: 'text',\n            modalOpen: false,\n        };\n        this.questionRef = React.createRef();\n        this.questionTypeRef = React.createRef();\n        this.possibleAnswersRef = React.createRef();\n        this.scoreRef = React.createRef();\n    }\n\n    updateQuestionType = (e) => {\n        this.setState({\n            questionType: e,\n        })\n    };\n\n    displayPossibleAnswers = () => {\n        const { questionType } = this.state;\n        if (questionType === 'text') {\n            return <TextAnswer ref={this.possibleAnswersRef} />\n        } else if (questionType === 'number') {\n            return <NumberAnswer ref={this.possibleAnswersRef}/>\n        } else if (questionType === 'closest') {\n            return <ClosestNumber ref={this.possibleAnswersRef}/>\n        } else if (questionType === 'multiple_choice') {\n            return <MultipleChoice ref={this.possibleAnswersRef}/>\n        } else if (questionType === 'speed') {\n            return <SpeedRound ref={this.possibleAnswersRef}/>\n        } else if (questionType === 'multiple_answers') {\n            return <MultipleAnswers ref={this.possibleAnswersRef}/>\n        }\n    };\n\n    getInfoForPosting = () => {\n        const { questionType } = this.state;\n        const question = this.questionRef.current.state.questionString;\n        const infoForPosting = {question: question, questionType};\n        const info = this.possibleAnswersRef.current.getInfoForPosting();\n        Object.keys(info).forEach(key => infoForPosting[key] = info[key]);\n        if (this.scoreRef.current) {\n            infoForPosting.score = this.scoreRef.current.state.score;\n        }\n        console.log(infoForPosting);\n        return infoForPosting;\n    };\n\n    displayScores = () => {\n        const { questionType } = this.state;\n        if (questionType === 'text' || questionType === 'number' || questionType === 'multiple_choice') {\n            return <SingleScore ref={this.scoreRef}/>\n        }\n    };\n\n    render() {\n        const { questionType } = this.state;\n        return (\n            <div>\n                <Question ref={this.questionRef}/>\n                <QuestionType ref={this.questionTypeRef} questionType={questionType} update={this.updateQuestionType}/>\n                {this.displayPossibleAnswers()}\n                {this.displayScores()}\n            </div>\n        );\n    }\n\n}","export function submitQuestion(data, round, roundRef) {\n    validateInput(data);\n    const questions = round.questions;\n    if (questions) {\n        round.questions = [...round.questions, data]\n    } else {\n        round.questions = [data];\n    }\n    console.log(round);\n    roundRef.set(round);\n    // const questions = quiz.questions;\n    // if (questions) {\n    //     quiz.questions = [...quiz.questions, data];\n    // } else {\n    //     quiz.questions = [data];\n    // }\n    // quizRef.set(quiz);\n}\n\nfunction validateInput(data) {\n    const { question, possibleAnswers, numberAnswer, score, positionScoring, clues } = data;\n    if (question === '') {\n        throw \"Must have a question string\";\n    }\n    if (possibleAnswers && possibleAnswers.length === 0) {\n        throw \"Must have at least one correct answer\";\n    }\n    if (data.hasOwnProperty('numberAnswer') && invalidNumber(numberAnswer)) {\n        throw \"Must be a valid number\";\n    }\n    if (data.hasOwnProperty('score') && invalidNumber(score)) {\n        throw \"Must have a score for the question\";\n    }\n    if (data.hasOwnProperty('positionScoring') && invalidScoringArray(positionScoring)) {\n        throw \"Must have at least one team scoring\";\n    }\n    if (data.hasOwnProperty('clues') && invalidClues(clues)) {\n        throw \"Must have at least one clue for speed round\";\n    }\n    if (data.hasOwnProperty('choices')) {\n        const { choices, correctChoice } = data;\n        if (choices.length <= 1) {\n            throw \"Must have at least 2 options\";\n        }\n        if (correctChoice === null) {\n            throw \"Must select a correct option for multiple choice\";\n        }\n    }\n    if (data.hasOwnProperty('multipleAnswers')) {\n        const { multipleAnswers, multipleScores } = data;\n        if (invalidAnswers(multipleAnswers)) {\n            throw \"All options for answers must have a possible answer\";\n        }\n        if (invalidScoringArray(multipleScores)) {\n            throw \"Must be possible to score points\";\n        }\n    }\n}\n\nfunction invalidNumber(num) {\n    return num === '' || num === null || isNaN(num);\n}\n\nfunction invalidScoringArray(arr) {\n    const filteredArray = arr.filter(elem => {\n        return !(elem === '' || isNaN(elem) || elem === null || parseFloat(elem) === 0)\n    });\n    return filteredArray.length === 0;\n}\n\nfunction invalidClues(clues) {\n    return clues.filter(clue => clue !== '').length === 0\n}\n\nfunction invalidAnswers(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].possibleAnswers.length === 0) {\n            return true;\n        }\n    }\n    return false;\n}","import React from 'react';\nimport app from 'firebase/app';\nimport firebase from 'firebase';\nimport Questions from \"../old_stuff/Questions\";\nimport LevenshteinDistance from \"../old_stuff/LevenshteinDistance\";\nimport {Table, Modal, Switch, Input} from \"antd\";\nimport { storage } from \"firebase\";\nimport QuestionCreator from \"./QuestionCreator\";\nimport {submitQuestion} from \"../../helpers/QuestionPoster\";\n\n\nconst ordinalSuffix = (i) => {\n    var j = i % 10,\n        k = i % 100;\n    if (j == 1 && k != 11) {\n        return i + \"st\";\n    }\n    if (j == 2 && k != 12) {\n        return i + \"nd\";\n    }\n    if (j == 3 && k != 13) {\n        return i + \"rd\";\n    }\n    return i + \"th\";\n};\n\nconst renderAnswers = (text, record) => {\n    const { questionType } = record;\n    if (questionType === 'text' || questionType === 'speed') {\n        return <div>\n            {record.answerType.toUpperCase()} [{record.possibleAnswers.join(', ')}]\n        </div>\n    }\n    if (questionType === 'number' || questionType === 'closest') {\n        const num = parseFloat(record.numberAnswer);\n        const margin = parseFloat(record.margin);\n        return <div>\n            {record.margin ? (num - margin) + \" - \" + (num + margin) : num}\n        </div>\n    }\n    if (questionType === 'multiple_answers') {\n        return <div>\n            {record.multipleAnswers.map((answer, i) => {\n                return <div>\n                    {i+1}: {answer.answerType.toUpperCase()} [{answer.possibleAnswers.join(', ')}]\n                </div>\n            })}\n        </div>\n    }\n    if (questionType === 'multiple_choice') {\n        return <div>\n            {record.correctChoice.toUpperCase()} from [{record.choices.join(', ')}]\n        </div>\n    }\n    return text;\n};\n\nconst renderScores = (text, record) => {\n    const { questionType } = record;\n    if (questionType === 'text' || questionType === 'number' || questionType === 'multiple_choice') {\n        return <div>\n            {record.score} point(s)\n        </div>\n    }\n    if (questionType === 'closest') {\n        return record.positionScoring.map((score, i) => <div>{ordinalSuffix(i+1)} closest: {score} point(s)</div>)\n    }\n    if (questionType === 'multiple_answers') {\n        return record.multipleScores.map((score, i) => <div>{i+1} Correct: {score} point(s)</div>)\n    }\n    if (questionType === 'speed') {\n        if (record.scoreType === 'clues_revealed') {\n            return record.positionScoring.map((score, i) => <div>{i+1} clue(s) revealed: {score} point(s)</div>)\n        }\n        if (record.scoreType === 'position') {\n            return record.positionScoring.map((score, i) => <div>{ordinalSuffix(i+1)}: {score} point(s)</div>)\n        }\n    }\n    return text;\n};\n\nexport default class RoundCreator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            modalOpen: false,\n        };\n        this.questionCreatorRef = React.createRef();\n        this.columns = [\n            {\n                title: 'Position',\n                dataIndex: 'pos',\n                key: 'question',\n                render: this.renderPosition,\n            },\n            {\n                title: 'Question',\n                dataIndex: 'question',\n                key: 'question',\n                render: this.renderQuestions,\n            },\n            {\n                title: 'Question Type',\n                dataIndex: 'questionType',\n                key: 'question_type',\n            },\n            {\n                title: 'Clues/Options',\n                dataIndex: 'clues',\n                key: 'clues',\n                render: this.renderClues,\n            },\n            {\n                title: 'Answers',\n                dataIndex: 'answers',\n                key: 'answers',\n                render: renderAnswers,\n            },\n            {\n                title: 'Scoring',\n                dataIndex: 'scoring',\n                key: 'scoring',\n                render: renderScores,\n            },\n            {\n                title: 'Delete',\n                dataIndex: 'delete',\n                key: 'delete',\n                render: this.renderDeleteRow,\n            }\n        ];\n    }\n\n    moveUp = (i) => {\n        const { round, roundRef } = this.props;\n        const oldAbove = round.questions[i-1];\n        round.questions[i-1] = round.questions[i];\n        round.questions[i] = oldAbove;\n        roundRef.set(round);\n    };\n\n    moveDown = (i) => {\n        const { round, roundRef } = this.props;\n        const oldBelow = round.questions[i+1];\n        round.questions[i+1] = round.questions[i];\n        round.questions[i] = oldBelow;\n        roundRef.set(round);\n    };\n\n    renderPosition = (text, record, i) => {\n        const { round } = this.props;\n        return <div>\n            {i > 0 && <button onClick={() => this.moveUp(i)}>Up</button>}\n            {i < round.questions.length-1 && <button onClick={() => this.moveDown(i)}>Down</button>}\n        </div>\n    };\n\n    deleteQuestion = (i) => {\n        const { round, roundRef } = this.props;\n        round.questions.splice(i,1);\n        roundRef.set(round);\n    };\n\n    renderDeleteRow = (text,record,i) => {\n        return <button onClick={() => this.deleteQuestion(i)}>X</button>\n    };\n\n    beginSpeedRound = (record, i) => {\n        const { roundRef } = this.props;\n        const qRef = roundRef.child('questions').child(i);\n        record.begin = true;\n        qRef.set(record);\n    };\n\n    endSpeedRound = (record, i) => {\n        const { roundRef } = this.props;\n        const qRef = roundRef.child('questions').child(i);\n        record.begin = false;\n        record.clues.forEach(clue => clue.show = false);\n        qRef.set(record);\n    };\n\n    showClue = (clue, i, clueIndex) => {\n        const { roundRef } = this.props;\n        const clueRef = roundRef.child('questions').child(i).child('clues').child(clueIndex);\n        clue.show = true;\n        clueRef.set(clue);\n    };\n\n    hideClue = (clue, i, clueIndex) => {\n        const { roundRef } = this.props;\n        const clueRef = roundRef.child('questions').child(i).child('clues').child(clueIndex);\n        clue.show = false;\n        clueRef.set(clue);\n    };\n\n    renderSpeedClues = (record, i) => {\n        return record.clues.map((clue, clueIndex) => {\n            let clueButton;\n            if (clue.show) {\n                clueButton = <button onClick={() => this.hideClue(clue, i, clueIndex)}>Hide</button>\n            } else {\n                clueButton = <button onClick={() => this.showClue(clue, i, clueIndex)}>Show</button>\n            }\n            return <div>\n                Clue {clueIndex+1}: {clue.clue}\n                {record.begin && clueButton}\n            </div>\n        })\n    };\n\n    renderClues = (text, record, i) => {\n        const { questionType } = record;\n        if (questionType === 'multiple_choice') {\n            return record.choices.map(choice => <div>{choice}</div>);\n        }\n        if (questionType === 'speed') {\n            return this.renderSpeedClues(record, i);\n        }\n        return text;\n    };\n\n    renderQuestions = (text, record, index) => {\n        const { questionType } = record;\n        if (questionType === 'speed') {\n            return <div>\n                {text}\n                {record.begin ? <button\n                    onClick={() => this.endSpeedRound(record, index)}>\n                    End\n                </button> : <button\n                    onClick={() => this.beginSpeedRound(record, index)}>\n                    Begin\n                </button>\n                }\n            </div>\n        }\n        return text;\n    };\n\n    addQuestion = () => {\n        this.setState({\n            modalOpen: true,\n        })\n    };\n\n    handleOk = (e) => {\n        const { round, roundRef } = this.props;\n        try {\n            const infoForPosting = this.questionCreatorRef.current.getInfoForPosting();\n            submitQuestion(infoForPosting, round, roundRef);\n            this.setState({\n                modalOpen: false,\n            })\n        } catch(err) {\n            console.log(err);\n        }\n\n    };\n\n    handleCancel = () => {\n        this.setState({\n            modalOpen: false,\n        })\n    };\n\n    toggleShowRound = (e, round) => {\n        const { roundRef } = this.props;\n        round.show = e;\n        round.questions.forEach((question, i) => {\n            if (question.questionType === 'speed') {\n                question.begin = false;\n                question.clues.forEach(clue => clue.show = false);\n            }\n        });\n        roundRef.set(round);\n    };\n\n    setCustomScoring = (val) => {\n        const { round, roundRef } = this.props;\n        round.customScoringEnabled = val;\n        if (val && !round.customScores) {\n            round.customScores = [0,0,0];\n        }\n        roundRef.set(round);\n    };\n\n    updateCustomScore = (e, i) => {\n        const { round, roundRef } = this.props;\n        const value = e.target.value;\n        if (value === '' || (!isNaN(value) && Number.isInteger(parseInt(value)))) {\n            round.customScores[i] = value;\n            roundRef.set(round);\n        }\n    };\n\n    renderCustomScoring = () => {\n        const { round } = this.props;\n        const { customScoringEnabled, customScores } = round;\n        return <div>\n            <button onClick={() => this.setCustomScoring(!customScoringEnabled)}>{customScoringEnabled ? \"Disable \" : \"Enable \"} custom scoring</button>\n            (Overrides all basic scores)\n            {customScoringEnabled && customScores && <div>\n                {customScores.map((score, i) => {\n                    return <div style={{display: 'flex', flexDirection: 'row'}}>\n                        {i+1} points: <Input style={{width: 200}} value={score} onChange={e => this.updateCustomScore(e, i)} />\n                    </div>\n                })}\n            </div>}\n        </div>\n    };\n\n    render() {\n        const { round } = this.props;\n        const { modalOpen } = this.state;\n        return (\n            <div>\n                <div>\n                    <div>\n                        Show round: <Switch checked={round.show} onChange={e => this.toggleShowRound(e,round)} />\n                    </div>\n                    {this.renderCustomScoring()}\n                    {round.questions && <Table columns={this.columns} dataSource={round.questions} pagination={false} />}\n                    <button onClick={this.addQuestion}>Add question</button>\n                    <Modal\n                        title=\"Create a question\"\n                        visible={modalOpen}\n                        onOk={this.handleOk}\n                        onCancel={this.handleCancel}\n                    >\n                        <QuestionCreator ref={this.questionCreatorRef}/>\n                    </Modal>\n                </div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport firebase from 'firebase';\nimport { Collapse } from 'antd';\nimport {\n    Link,\n    useParams,\n    withRouter,\n} from \"react-router-dom\";\nimport RoundCreator from \"./RoundCreator\";\n\nconst { Panel } = Collapse;\n\n\nclass QuizCreator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quiz: {},\n        };\n    }\n\n    componentDidMount() {\n        const { name } = this.props.match.params;\n        const self = this;\n        this.quizRef = firebase.database().ref('quizzes').child(name);\n        this.quizRef.on('value', snapshot => {\n            self.setState({\n                quiz: snapshot.val(),\n            });\n        });\n    }\n\n    addNewRound = () => {\n        const { quiz } = this.state;\n        const rounds = quiz.rounds;\n        if (rounds) {\n            const roundName = Object.keys(rounds).length + 1;\n            quiz.rounds['Round ' + roundName] = {'name': 'Round ' + roundName};\n        } else {\n            quiz.rounds = {'Round 1': {'name': 'Round 1'}};\n        }\n        this.quizRef.set(quiz);\n    };\n\n    renderTeams = () => {\n        const { quiz } = this.state;\n        const teams = quiz.teams;\n        return teams && (\n            <div>\n                <h3>Teams registered:</h3>\n                {Object.keys(teams).map(teamName => {\n                    return <div>\n                        {teamName}\n                    </div>\n                })}\n            </div>\n        )\n    };\n\n    render() {\n        const { quiz } = this.state;\n        const rounds = quiz.rounds;\n        return (\n            <div>\n                <h1>Quiz name here: {quiz && quiz.name}</h1>\n                <Link to={'/register/' + quiz.name}>\n                    <button>Register a new team</button>\n                </Link>\n                {this.renderTeams()}\n                <Collapse>\n                    {rounds && Object.keys(rounds).map((roundName, i) => {\n                        const round = rounds[roundName];\n                        return <Panel header={roundName} key={i}>\n                            <RoundCreator round={round} roundRef={this.quizRef.child('rounds').child(roundName)} />\n                        </Panel>\n                    })}\n                </Collapse>\n                <button onClick={this.addNewRound}>Add New Round</button>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(QuizCreator)","import React from 'react';\nimport firebase from 'firebase';\nimport { Input } from \"antd\";\nimport {\n    Link\n} from \"react-router-dom\";\n\nexport default class ParticipantHomePage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quizzes: {},\n        };\n    }\n\n    componentDidMount() {\n        const self = this;\n        this.quizzesRef = firebase.database().ref('quizzes');\n        this.quizzesRef.on('value', snapshot => {\n            self.setState({\n                quizzes: snapshot.val(),\n            });\n        });\n    }\n\n    displayQuiz = (quiz, i) => {\n        return <div style={{display: 'flex', flexDirection: 'row'}}>\n            <p>{quiz.name}</p>\n            <p>{quiz.date}</p>\n            <Link to={'/participant/' + quiz.name}>View</Link>\n        </div>\n    };\n\n    render() {\n        const { quizzes } = this.state;\n        return (\n            <div>\n                <h1>Participant home page</h1>\n                {Object.keys(quizzes).map((quizName, i) => this.displayQuiz(quizzes[quizName], i))}\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport firebase from 'firebase';\nimport { Collapse } from 'antd';\nimport {\n    Link,\n    useParams,\n    withRouter,\n} from \"react-router-dom\";\n\nclass QuizTaker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quiz: {},\n        };\n    }\n\n    componentDidMount() {\n        const { name } = this.props.match.params;\n        const self = this;\n        this.quizRef = firebase.database().ref('quizzes').child(name);\n        this.quizRef.on('value', snapshot => {\n            self.setState({\n                quiz: snapshot.val(),\n            });\n        });\n    }\n\n    render() {\n        const { quiz } = this.state;\n        const rounds = quiz.rounds;\n        return (\n            <div>\n                <h1>Quiz name here: {quiz && quiz.name}</h1>\n                <Collapse defaultActiveKey={'0'}>\n                    {rounds && Object.keys(rounds).map((roundName, i) => {\n                        const round = rounds[roundName];\n                        return <div style={{display: 'flex', flexDirection: 'row'}}>\n                            <p>{roundName}</p>\n                            {round.show && <Link to={'/participant/' + quiz.name + '/' + round.name}>View</Link>}\n                        </div>\n                    })}\n                </Collapse>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(QuizTaker)","import React from 'react';\nimport { Input } from \"antd\";\n\nexport default class TextInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer: '',\n        };\n    }\n\n    updateAnswer = (e) => {\n        this.setState({\n            answer: e.target.value,\n        })\n    };\n\n    render() {\n        const { answer } = this.state;\n        return (\n            <Input value={answer} onChange={this.updateAnswer} />\n        );\n    }\n\n}","import React from 'react';\nimport { Input } from \"antd\";\n\nexport default class NumberInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer: '',\n        };\n    }\n\n    updateAnswer = (e) => {\n        const value = e.target.value;\n        if (value === '-' || value === '' || !isNaN(value) || value.indexOf('e') === value.length-1) {\n            this.setState({answer: value})\n        }\n    };\n\n    render() {\n        const { answer } = this.state;\n        return (\n            <Input value={answer} onChange={this.updateAnswer} />\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, Radio} from 'antd';\n\nconst { Option } = Select;\n\nexport default class MultipleChoice extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer: null,\n        };\n    }\n\n    onChange = e => {\n        this.setState({\n            answer: e.target.value,\n        });\n    };\n\n    render() {\n        const { choices } = this.props;\n        const { answer } = this.state;\n        return (\n            <div>\n                <Radio.Group onChange={this.onChange} value={answer}>\n                    {choices.map((choice, i) => {\n                        return <div>\n                            <Radio value={choice}>{choice}</Radio>\n                        </div>\n                    })}\n                </Radio.Group>\n\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport {Input} from \"antd\";\n\nexport default class SpeedClues extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer: '',\n        };\n    }\n\n    updateAnswer = (e) => {\n        this.setState({\n            answer: e.target.value,\n        })\n    };\n\n    render() {\n        const { clues } = this.props;\n        const { answer } = this.state;\n        return (\n            <div>\n                {clues.map(clue => {\n                    return clue.show && <div>\n                        {clue.clue}\n                    </div>\n                })}\n                <Input value={answer} onChange={this.updateAnswer}/>\n                <button onClick={() => this.props.submit(answer)}>Submit</button>\n            </div>\n        );\n    }\n\n}","export function submitAnswer(answers, name, round, roundRef, teamName, customScores) {\n    const { questions } = round;\n    questions.forEach((question, i) => {\n        if (answers[i]) {\n            const questionRef = roundRef.child('questions').child(i);\n            const score = (round.customScoringEnabled && customScores[i]) ? parseFloat(customScores[i]) : parseFloat(question.score);\n            const points = gradeQuestion(question, answers[i].answer, questionRef, teamName, score);\n            if (question.userAnswer === undefined) {\n                question.userAnswer = {};\n            }\n            question.userAnswer[teamName] = answers[i].answer;\n            if (round.customScoringEnabled && customScores[i]) {\n                question.userAnswer[teamName] += (' (for ' + customScores[i] + \"point(s))\");\n            }\n            if (question.questionType !== 'closest') {\n                addScoreToDatabase(question, questionRef, points, teamName);\n            }\n            console.log(\"Question \" + (i+1) + \": \" + points + \" points\");\n        }\n    });\n}\n\nfunction addScoreToDatabase(question, questionRef, points, teamName) {\n    let { scores } = question;\n    if (scores === undefined) {\n        scores = {};\n    }\n    scores[teamName] = points;\n    question.scores = scores;\n    questionRef.set(question);\n}\n\nfunction gradeQuestion(question, answer, questionRef, teamName, score) {\n    if (answer === '' || answer === undefined || answer === null) {\n        return 0;\n    } else {\n        try {\n            answer = answer.toLowerCase();\n        } catch(err) {\n            // Numbers can't go to lower case\n        }\n        const { questionType } = question;\n        if (questionType === 'text') {\n            return gradeTextQuestion(question, answer) ? score : 0;\n        }\n        if (questionType === 'number') {\n            return gradeNumberQuestion(question, answer) ? score : 0;\n        }\n        if (questionType === 'closest') {\n            return gradeClosestQuestion(question, answer, questionRef, teamName);\n        }\n        if (questionType === 'multiple_choice') {\n            return gradeMultipleChoiceQuestion(question, answer) ? score : 0;\n        }\n        if (questionType === 'multiple_answers') {\n            let numCorrect = 0;\n            answer.forEach((a, i) => {\n                for (let j = 0; j < question.multipleAnswers.length; j++) {\n                    if (gradeTextQuestion(question.multipleAnswers[j],a)) {\n                        numCorrect++;\n                        break;\n                    }\n                }\n            });\n            if (numCorrect > 0) {\n                return question.multipleScores[numCorrect-1];\n            }\n            return 0;\n        }\n        if (questionType === 'speed') {\n            return gradeSpeedQuestion(question, answer, questionRef, teamName);\n        }\n    }\n}\n\nfunction gradeTextQuestion(question, answer) {\n    const { answerType, possibleAnswers } = question;\n    for (let i = 0; i < possibleAnswers.length; i++) {\n        let possibleAnswer = possibleAnswers[i];\n        try {\n            possibleAnswer = possibleAnswers[i].toLowerCase();\n        } catch(err) {\n            // Numbers can't go to lower case\n        }\n        if (answerType === 'exactly' && possibleAnswer === answer) {\n            return true;\n        }\n        if (answerType === 'contains' && answer.includes(possibleAnswer)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction gradeNumberQuestion(question, answer) {\n    let margin;\n    try {\n        margin = parseFloat(question.margin);\n    } catch(err) {\n        margin = 0;\n    }\n    const correctAnswer = parseFloat(question.numberAnswer);\n    return (parseFloat(answer) >= (correctAnswer - margin) && parseFloat(answer) <= (correctAnswer + margin));\n}\n\nfunction gradeMultipleChoiceQuestion(question, answer) {\n    return question.correctChoice === answer;\n}\n\nfunction gradeClosestQuestion(question, answer, questionRef, teamName) {\n    let { guesses, numberAnswer, positionScoring } = question;\n    if (guesses === undefined) {\n        guesses = [];\n    }\n    // Removing duplicate guesses by same team\n    let teamGuessIndex = -1;\n    guesses.forEach((guess, i) => {\n        if (guess.teamName === teamName) {\n            teamGuessIndex = i\n        }\n    });\n    if (teamGuessIndex >= 0) {\n        guesses.splice(teamGuessIndex, 1);\n    }\n    guesses.push({num: parseFloat(answer), teamName: teamName});\n    guesses.sort((a, b) => sortByGuessDistance(a.num, b.num, numberAnswer));\n    question.guesses = guesses;\n    question.scores = updateScoring(guesses, positionScoring);\n    questionRef.set(question);\n    return question.scores[teamName];\n}\n\nfunction gradeSpeedQuestion(question, answer, questionRef, teamName) {\n    let { guesses, scoreType, clues, positionScoring } = question;\n    if (guesses === undefined) {\n        guesses = [];\n    }\n    let cluesRevealed = 0;\n    clues.forEach(clue => {\n        if (clue.show) {\n            cluesRevealed++;\n        }\n    });\n    const correct = gradeTextQuestion(question, answer);\n    guesses.push({guess: answer, teamName: teamName, cluesRevealed: cluesRevealed, correct: correct});\n    question.guesses = guesses;\n    questionRef.set(question);\n    if (!correct) {\n        // Incorrect answer\n        return 0;\n    }\n    if (scoreType === 'clues_revealed') {\n        if (cluesRevealed === 0) {\n            // Guess before any clues are revealed?\n            return positionScoring[0];\n        } else {\n            return positionScoring[cluesRevealed-1];\n        }\n    }\n    if (scoreType === 'position') {\n        const correctAnswers = guesses.filter(guess => gradeTextQuestion(question, guess.guess));\n        if (correctAnswers.length > positionScoring.length) {\n            return 0;\n        } else {\n            return positionScoring[correctAnswers.length-1];\n        }\n    }\n}\n\nfunction updateScoring(guesses, positionScoring) {\n    const scoring = {};\n    guesses.forEach((guess, i) => {\n        const { num, teamName } = guess;\n        if (i > 0 && parseFloat(guesses[i-1].num) === parseFloat(num)) {\n            // 2 people have the same guess\n            scoring[teamName] = scoring[guesses[i-1].teamName];\n        }\n        else if (Object.keys(scoring).indexOf(teamName) === -1) {\n            if (i < positionScoring.length) {\n                scoring[teamName] = parseFloat(positionScoring[i])\n            } else {\n                scoring[teamName] = 0;\n            }\n        }\n    });\n    return scoring;\n}\n\nfunction sortByGuessDistance(a,b,numberAnswer) {\n    return Math.abs(parseFloat(a) - parseFloat(numberAnswer)) - Math.abs(parseFloat(b) - parseFloat(numberAnswer))\n}","import React from 'react';\nimport TextInput from \"./TextInput\";\nimport {Input} from \"antd\";\n\nexport default class MultipleAnswersInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer: props.multipleAnswers.map(() => ''),\n        };\n    }\n\n    updateAnswer = (e, i) => {\n        const { answer } = this.state;\n        answer[i] = e.target.value;\n        this.setState({\n            answer\n        })\n    };\n\n    render() {\n        const { multipleAnswers } = this.props;\n        const { answer } = this.state;\n        return multipleAnswers ? multipleAnswers.map((answer, i) => {\n            return <div style={{display: 'flex', flexDirection: 'row'}}>\n                Answer {i+1}: <Input value={answer[i]} onChange={e => this.updateAnswer(e,i)} />\n            </div>\n        }) : <div/>\n    }\n\n}","import React from 'react';\nimport firebase from 'firebase';\nimport { Select } from 'antd';\nimport {\n    Link,\n    useParams,\n    withRouter,\n} from \"react-router-dom\";\nimport TextInput from \"./user_input/TextInput\";\nimport NumberInput from \"./user_input/NumberInput\";\nimport MultipleChoice from \"./user_input/MultipleChoice\";\nimport SpeedClues from \"./speed_clues/SpeedClues\";\nimport {submitAnswer, submitSpeedAnswer} from \"../../helpers/AnswerPoster\";\nimport MultipleAnswersInput from \"./user_input/MultipleAnswersInput\";\n\nconst { Option } = Select;\n\nclass RoundTaker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            round: {},\n            userInputRefs: [],\n            selectedTeam: null,\n            teams: [],\n            customScores: [],\n            customScoresError: null,\n        };\n    }\n\n    componentDidMount() {\n        const { name, round } = this.props.match.params;\n        const self = this;\n        this.roundRef = firebase.database().ref('quizzes').child(name).child('rounds').child(round);\n        this.roundRef.on('value', snapshot => {\n            const round = snapshot.val();\n            self.setState({\n                round,\n                userInputRefs: round.questions.map(() => React.createRef()),\n                customScores: round.questions.map(() => undefined),\n            });\n        });\n        this.teamRef = firebase.database().ref('quizzes').child(name).child('teams');\n        this.teamRef.on('value', snapshot => {\n            const teams = snapshot.val();\n            self.setState({\n                teams,\n            });\n        });\n    }\n\n    userInput = (question, i) => {\n        const { questionType } = question;\n        const { userInputRefs } = this.state;\n        if (questionType === 'text') {\n            return <TextInput ref={userInputRefs[i]}/>\n        }\n        if (questionType === 'number' || questionType === 'closest') {\n            return <NumberInput ref={userInputRefs[i]}/>\n        }\n        if (questionType === 'multiple_choice') {\n            return <MultipleChoice choices={question.choices} ref={userInputRefs[i]}/>\n        }\n        if (questionType === 'speed') {\n            return <SpeedClues clues={question.clues} ref={userInputRefs[i]} submit={answer => this.submitSpeedQuestion(answer, i)}/>\n        }\n        if (questionType === 'multiple_answers') {\n            return <MultipleAnswersInput multipleAnswers={question.multipleAnswers} ref={userInputRefs[i]}/>\n        }\n    };\n\n    changeCustomScore = (e,i) => {\n        const { customScores, round } = this.state;\n        customScores[i] = e;\n        let customScoresError = false;\n        let numbers = [0,0,0];\n        customScores.forEach(score => {\n            if (score === '1') {\n                numbers[0]++;\n            } else if (score === '2') {\n                numbers[1]++;\n            } else if (score === '3') {\n                numbers[2]++;\n            }\n        });\n        numbers.forEach((number, i) => {\n            if (number > parseInt(round.customScores[i])) {\n                customScoresError = \"Too many \" + (i+1) + \" points\";\n            }\n        });\n        this.setState({\n            customScores,\n            customScoresError\n        })\n    };\n\n    selectCustomScore = (i) => {\n        const { customScores, customScoresError } = this.state;\n        return <div style={{display: 'flex', flexDirection: 'row'}}>\n            <Select placeholder=\"points...\" value={customScores[i]} style={{width: 100, height: 40}} onChange={e => this.changeCustomScore(e,i)}>\n                <Option value={'0'}>0</Option>\n                <Option value={'1'}>1</Option>\n                <Option value={'2'}>2</Option>\n                <Option value={'3'}>3</Option>\n            </Select>\n            {customScoresError && <p style={{color: 'red'}}>{customScoresError}</p>}\n        </div>\n    };\n\n    displayQuestion = (question, i, customScoringEnabled) => {\n        if (question.questionType === 'speed' && !question.begin) {\n            return;\n        }\n        return <div style={{border: '2px solid black'}}>\n            <div style={{display: 'flex', flexDirection: 'row'}}>\n                <h4>Q{i+1}: {question.question} (type={question.questionType})</h4>\n                {customScoringEnabled && this.selectCustomScore(i)}\n            </div>\n            {this.userInput(question, i)}\n        </div>\n    };\n\n    submitSpeedQuestion = (answer, i) => {\n        const { name } = this.props.match.params;\n        const { round, selectedTeam } = this.state;\n        if (selectedTeam === null) {\n            return;\n        }\n        const answers = round.questions.map(() => null);\n        answers[i] = {\"answer\": answer};\n        submitAnswer(answers, name, round, this.roundRef, selectedTeam);\n    };\n\n    submitRound = () => {\n        const { name } = this.props.match.params;\n        const { round, userInputRefs, selectedTeam, customScores } = this.state;\n        if (selectedTeam === null) {\n            return;\n        }\n        const answers = [];\n        userInputRefs.forEach(ref => {\n            if (ref.current) {\n                answers.push(ref.current.state)\n            } else {\n                answers.push(null);\n            }\n        });\n        submitAnswer(answers, name, round, this.roundRef, selectedTeam, customScores);\n    };\n\n    changeSelectedTeam = (e) => {\n        this.setState({\n            selectedTeam: e,\n        })\n    };\n\n    selectTeam = () => {\n        const { selectedTeam, teams } = this.state;\n        return <Select value={selectedTeam} style={{width: 200, height: 40}} onChange={this.changeSelectedTeam}>\n            {teams && Object.keys(teams).map(teamName => <Option value={teamName}>{teamName}</Option>)}\n        </Select>\n    };\n\n    render() {\n        const { round } = this.state;\n        console.log(round);\n        this.userInputRefs = [];\n        return (\n            <div>\n                Select your team: {this.selectTeam()}\n                <h1>Round name here: {round && round.name}</h1>\n                {round && round.questions && round.questions.map((q, i) => this.displayQuestion(q,i,round.customScoringEnabled))}\n                <button onClick={this.submitRound}>Submit all answers for this round</button>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(RoundTaker)","import React from 'react';\nimport firebase from 'firebase';\nimport { Input} from 'antd';\nimport {\n    withRouter,\n} from \"react-router-dom\";\n\nclass QuizTaker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quiz: {},\n            teamName: '',\n            teamMembers: [],\n            newTeamMember: '',\n        };\n    }\n\n    componentDidMount() {\n        const { name } = this.props.match.params;\n        const self = this;\n        this.quizRef = firebase.database().ref('quizzes').child(name);\n        this.quizRef.on('value', snapshot => {\n            self.setState({\n                quiz: snapshot.val(),\n            });\n        });\n    }\n\n    updateTeamName = (e) => {\n        this.setState({\n            teamName: e.target.value,\n        })\n    };\n\n    updateNewTeamMember = (e) => {\n        this.setState({\n            newTeamMember: e.target.value,\n        })\n    };\n\n    addTeamMember = () => {\n        const { teamMembers, newTeamMember } = this.state;\n        this.setState({\n            teamMembers: [...teamMembers, newTeamMember],\n            newTeamMember: '',\n        })\n    };\n\n    submitTeam = () => {\n        const { quiz, teamName, teamMembers} = this.state;\n        const { teams } = quiz;\n        if (!teams) {\n            quiz.teams = {};\n        }\n        quiz.teams[teamName] = {name: teamName, teamMembers: teamMembers};\n        this.quizRef.set(quiz);\n        this.setState({\n            teamMembers: [],\n            teamName: '',\n        })\n    };\n\n    render() {\n        const { quiz, teamName, teamMembers, newTeamMember } = this.state;\n        return (\n            <div>\n                <h1>Quiz name here: {quiz && quiz.name}</h1>\n                Team name: <Input value={teamName} onChange={this.updateTeamName} />\n                {teamMembers.map(member => <div>{member}</div>)}\n                Add Team Member: <Input onPressEnter={this.addTeamMember} value={newTeamMember} onChange={this.updateNewTeamMember} />\n                <button onClick={this.submitTeam}>Submit Team</button>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(QuizTaker)","import React from 'react';\nimport firebase from 'firebase';\nimport { Select, Table } from 'antd';\nimport {\n    Link,\n    useParams,\n    withRouter,\n} from \"react-router-dom\";\n\nconst { Option } = Select;\n\nconst teamNameColumn = {\n    title: 'Team Name',\n    dataIndex: 'teamName',\n    key: 'teamName',\n};\n\nconst totalColumn = {\n    title: 'Total',\n    dataIndex: 'total',\n    key: 'total',\n};\n\nclass Scoreboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quiz: {},\n        };\n    }\n\n    componentDidMount() {\n        const { name } = this.props.match.params;\n        console.log(name);\n        const self = this;\n        this.quizRef = firebase.database().ref('quizzes').child(name);\n        this.quizRef.on('value', snapshot => {\n            const quiz = snapshot.val();\n            self.setState({\n                quiz,\n            });\n        });\n    }\n\n    createTotalTeamScores = (teamScores) => {\n        teamScores.forEach(teamScore => {\n            let total = 0;\n            Object.keys(teamScore).filter(key => key !== 'teamName' && key !== 'total').forEach(key => {\n                total += parseFloat(teamScore[key]);\n            });\n            teamScore.total = total;\n        })\n    };\n\n    render() {\n        const { quiz } = this.state;\n        const { teams, rounds } = quiz;\n        let teamScores;\n        if (teams) {\n            teamScores = Object.keys(teams).map(teamName => {\n                return {teamName: teamName}\n            });\n        }\n        let roundNames = [];\n        if (rounds) {\n            roundNames = Object.keys(rounds);\n            Object.keys(rounds).forEach(roundName => {\n                const round = rounds[roundName];\n                if (round.questions) {\n                    round.questions.forEach(question => {\n                        if (question.scores) {\n                            Object.keys(question.scores).forEach(teamName => {\n                                let teamScore = teamScores.filter(elem => elem.teamName === teamName)[0];\n                                let score;\n                                if (isNaN(question.scores[teamName]) || question.scores[teamName] === '') {\n                                    score = 0;\n                                } else {\n                                    score = parseFloat(question.scores[teamName]);\n                                }\n                                if (teamScore.hasOwnProperty(round.name)) {\n                                    teamScore[round.name] += score;\n                                } else {\n                                    teamScore[round.name] = score;\n                                }\n                            })\n                        }\n                    })\n                }\n            })\n        }\n        const roundColumns = roundNames.map(roundName => {\n            return {\n                title: roundName,\n                dataIndex: roundName,\n                key: roundName,\n            }\n        });\n        if (teamScores) {\n            this.createTotalTeamScores(teamScores);\n            teamScores.sort((a,b) => b.total - a.total);\n        }\n        const columns = [teamNameColumn, ...roundColumns, totalColumn];\n        return (\n            <div>\n                <Table columns={columns} dataSource={teamScores}/>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Scoreboard)","import React from 'react';\nimport firebase from 'firebase';\nimport { Select, Table } from 'antd';\nimport {\n    Link,\n    useParams,\n    withRouter,\n} from \"react-router-dom\";\nimport Scoreboard from \"./Scoreboard\";\n\nconst { Option } = Select;\n\nconst renderAnswers = (record) => {\n    const { questionType } = record;\n    if (questionType === 'text' || questionType === 'speed') {\n        return <div>\n            {record.answerType.toUpperCase()} [{record.possibleAnswers.join(', ')}]\n        </div>\n    }\n    if (questionType === 'number' || questionType === 'closest') {\n        return <div>\n            {record.numberAnswer}\n            {record.margin && (' +- ' + record.margin)}\n        </div>\n    }\n    if (questionType === 'multiple_answers') {\n        return <div>\n            {record.multipleAnswers.map((answer, i) => {\n                return <div>\n                    {i+1}: {answer.answerType.toUpperCase()} [{answer.possibleAnswers.join(', ')}]\n                </div>\n            })}\n        </div>\n    }\n    if (questionType === 'multiple_choice') {\n        return <div>\n            {record.correctChoice.toUpperCase()} from [{record.choices.join(', ')}]\n        </div>\n    }\n    return record.possibleAnswers;\n};\n\nclass RoundResults extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            round: {},\n        };\n    }\n\n    componentDidMount() {\n        const { name, round } = this.props.match.params;\n        const self = this;\n        this.roundRef = firebase.database().ref('quizzes').child(name).child('rounds').child(round);\n        this.roundRef.on('value', snapshot => {\n            const round = snapshot.val();\n            self.setState({\n                round,\n            });\n        });\n    }\n\n    renderOtherInfo = (question, teamName) => {\n        let other;\n        if (question.questionType === 'speed') {\n            if (question.guesses) {\n                const filteredGuesses = question.guesses.filter(g => g.teamName === teamName);\n                if (filteredGuesses.length > 0) {\n                    const guess = filteredGuesses[0];\n                    if (guess.cluesRevealed) {\n                        return (guess.correct ? \"CORRECT after \" : \"INCORRECT after \") + guess.cluesRevealed + \" clue(s) revealed\";\n                    }\n                }\n            }\n            return 'Testing';\n        }\n\n    }\n\n    renderScores = (question, questionIndex) => {\n        const { columns } = this.props;\n        const { scores } = question;\n        const data = scores && Object.keys(scores).map((teamName, i) => {\n            const other = this.renderOtherInfo(question, teamName);\n            return {\n                teamName: teamName,\n                teamAnswer: question.userAnswer && question.userAnswer[teamName],\n                points: scores[teamName],\n                questionType: question.questionType,\n                questionIndex: questionIndex,\n                other\n            };\n        });\n        return <Table columns={columns} dataSource={data}/>\n    };\n\n    displayQuestion = (question, i) => {\n        return <div style={{border: '2px solid black'}}>\n            <h4>Q{i+1}: {question.question} (type={question.questionType})</h4>\n            {renderAnswers(question)}\n            {this.renderScores(question, i)}\n        </div>\n    };\n\n    render() {\n        const { round } = this.state;\n        return (\n            <div>\n                <h1>Round name here: {round && round.name}</h1>\n                {round && round.questions && round.questions.map((q, i) => this.displayQuestion(q,i))}\n                <Scoreboard />\n            </div>\n        );\n    }\n}\n\nexport default withRouter(RoundResults)","import React from 'react';\nimport firebase from 'firebase';\nimport {withRouter} from \"react-router-dom\";\nimport RoundResults from \"../../results/RoundResults\";\nimport { Input } from 'antd';\n\nclass HostRoundResults extends React.Component {\n\n    changePoints = (e, record) => {\n        const { name, round } = this.props.match.params;\n        console.log(name);\n        this.scoreRef = firebase.database().ref('quizzes').child(name).child('rounds').child(round).child('questions').child(record.questionIndex).child('scores').child(record.teamName);\n        console.log(e.target.value);\n        const score = e.target.value;\n        this.scoreRef.set(score);\n    };\n\n    getColumns = () => {\n        return [\n            {\n                title: 'Team Name',\n                dataIndex: 'teamName',\n                key: 'teamName',\n            },\n            {\n                title: 'Team Answer',\n                dataIndex: 'teamAnswer',\n                key: 'teamAnswer',\n            },\n            {\n                title: 'Other',\n                dataIndex: 'other',\n                key: 'other',\n            },\n            {\n                title: 'Points',\n                dataIndex: 'points',\n                key: 'points',\n            },\n            {\n                title: 'Update points',\n                dataIndex: 'updatePoints',\n                key: 'updatePoints',\n                render: (text,record) => {\n                    return <Input style={{width: 150}} value={record.points} onChange={e => this.changePoints(e,record)}/>\n                }\n            },\n        ];\n    };\n\n    render() {\n        return <RoundResults columns={this.getColumns()}/>\n    }\n}\n\nexport default withRouter(HostRoundResults)","import React from 'react';\nimport {withRouter} from \"react-router-dom\";\nimport RoundResults from \"../../results/RoundResults\";\n\nconst columns = [\n    {\n        title: 'Team Name',\n        dataIndex: 'teamName',\n        key: 'teamName',\n    },\n    {\n        title: 'Points',\n        dataIndex: 'points',\n        key: 'points',\n    },\n];\n\nclass ParticipantRoundResults extends React.Component {\n    render() {\n        return <RoundResults columns={columns}/>\n    }\n}\n\nexport default withRouter(ParticipantRoundResults)","import React from 'react';\nimport 'antd/dist/antd.css'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useParams,\n    HashRouter,\n} from \"react-router-dom\";\nimport HostHomePage from \"./host/HostHomePage\";\nimport QuizCreator from \"./host/QuizCreator\";\nimport ParticipantHomePage from \"./participant/ParticipantHomePage\";\nimport QuizTaker from \"./participant/QuizTaker\";\nimport RoundTaker from \"./participant/RoundTaker\";\nimport Register from \"./register/Register\";\nimport HostRoundResults from \"./host/results/HostRoundResults\";\nimport ParticipantRoundResults from \"./participant/results/ParticipantRoundResults\";\n\n\nexport default class HomePage extends React.Component {\n\n    render() {\n        return (\n            <HashRouter basename={'/'}>\n                <Route exact path={'/'}>\n                    <ParticipantHomePage/>\n                </Route>\n                <Route exact path={'/participant'}>\n                    <ParticipantHomePage/>\n                </Route>\n                <Route exact path={'/host'}>\n                    <HostHomePage firebase />\n                </Route>\n                <Route exact path={'/host/:name'}>\n                    <QuizCreator/>\n                </Route>\n                <Route exact path={'/participant/:name'}>\n                    <QuizTaker/>\n                </Route>\n                <Route exact path={'/participant/:name/:round'}>\n                    <RoundTaker/>\n                </Route>\n                <Route exact path={'/participant/:name/:round/results'}>\n                    <ParticipantRoundResults/>\n                </Route>\n                <Route exact path={'/host/:name/:round/results'}>\n                    <HostRoundResults/>\n                </Route>\n                <Route exact path={'/participant/:name/:round/results/:teamName'}>\n                    {/*<RoundTeamResults/>*/}\n                </Route>\n                <Route exact path={'/register/:name'}>\n                    <Register/>\n                </Route>\n\n            </HashRouter>\n        );\n    }\n}","import React from 'react';\nimport HomePage from \"./components/HomePage\";\nimport app from 'firebase/app';\nimport 'antd/dist/antd.css'\n\nvar config = {\n    apiKey: \"AIzaSyBfCWC3nO4Dm6t_Mdi023zABHHKzrOdQkI\",\n    authDomain: \"trivia-7b47d.firebaseapp.com\",\n    databaseURL: \"https://trivia-7b47d.firebaseio.com\",\n    projectId: \"trivia-7b47d\",\n    storageBucket: \"trivia-7b47d.appspot.com\",\n    messagingSenderId: \"1017757056711\",\n};\n\napp.initializeApp(config);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <HomePage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}