{"version":3,"sources":["components/host/HostHomePage.js","components/old_stuff/Questions.js","components/old_stuff/LevenshteinDistance.js","components/host/question_components/Question.js","components/host/question_components/QuestionType.js","components/host/answer_components/TextAnswer.js","components/host/answer_components/NumberAnswer.js","components/host/answer_components/ClosestNumber.js","components/host/answer_components/MultipleChoice.js","components/host/answer_components/SpeedRound.js","components/host/answer_components/MultipleAnswers.js","components/host/score_components/SingleScore.js","components/host/QuestionCreator.js","helpers/QuestionPoster.js","components/host/RoundCreator.js","components/host/QuizCreator.js","components/participant/ParticipantHomePage.js","components/participant/QuizTaker.js","components/participant/user_input/TextInput.js","components/participant/user_input/NumberInput.js","components/participant/user_input/MultipleChoice.js","components/participant/speed_clues/SpeedClues.js","helpers/AnswerPoster.js","components/participant/user_input/MultipleAnswersInput.js","components/participant/RoundTaker.js","components/register/Register.js","components/results/Scoreboard.js","components/results/RoundResults.js","components/host/results/HostRoundResults.js","components/participant/results/ParticipantRoundResults.js","components/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["Host","props","removeQuiz","quizName","quizzes","state","toDelete","quizzesRef","set","deletedRef","firebase","database","ref","once","snapshot","toAdd","exists","val","name","displayQuiz","quiz","i","style","display","flexDirection","date","to","onClick","addNewQuiz","newQuizName","hasOwnProperty","setState","error","changeNewQuizName","e","target","value","displayErrorMessage","self","this","on","Object","keys","map","onPressEnter","onChange","width","React","Component","Select","Option","Question","updateQuestionString","questionString","QuestionType","questionType","height","update","TextAnswer","changeNewAnswer","newAnswer","changeAnswerType","answerType","addPossibleAnswer","possibleAnswers","toLowerCase","removePossibleAnswer","splice","getInfoForPosting","length","indexOf","push","grid","column","dataSource","renderItem","item","Item","placeholder","NumberAnswer","changeAnswer","isNaN","numberAnswer","changeMargin","margin","parseFloat","ClosestNumber","updateScore","positionScoring","addPosition","removePosition","renderPositionScores","score","MultipleChoice","choices","correctChoice","changeNewOption","newOption","addChoice","removeOption","Group","choice","SpeedRound","clues","scoreType","cluesRevealedScore","positionScores","infoForPosting","textAnswerRef","current","clue","updateClue","removeClue","addClue","renderClues","changeScoreType","updatePositionScore","removePositionScore","addPositionScore","renderScoring","renderCluesRevealedScores","updateCluesRevealedScore","createRef","MultipleAnswers","multipleScores","scores","multipleAnswers","scoresRefs","addAnswer","removeLastAnswer","pop","elem","SingleScore","placeHolder","QuestionCreator","updateQuestionType","displayPossibleAnswers","possibleAnswersRef","question","questionRef","info","forEach","key","scoreRef","console","log","displayScores","modalOpen","questionTypeRef","submitQuestion","data","round","roundRef","invalidNumber","invalidScoringArray","filter","invalidClues","arr","invalidAnswers","validateInput","questions","num","ordinalSuffix","j","k","renderAnswers","text","record","toUpperCase","join","answer","renderScores","RoundCreator","beginSpeedRound","qRef","child","begin","endSpeedRound","show","showClue","clueIndex","clueRef","hideClue","renderSpeedClues","clueButton","renderQuestions","index","addQuestion","handleOk","questionCreatorRef","err","handleCancel","toggleShowRound","columns","title","dataIndex","render","checked","pagination","visible","onOk","onCancel","Panel","Collapse","QuizCreator","addNewRound","rounds","roundName","quizRef","renderTeams","teams","teamName","match","params","header","withRouter","ParticipantHomePage","QuizTaker","defaultActiveKey","TextInput","updateAnswer","NumberInput","SpeedClues","submit","submitAnswer","answers","points","undefined","gradeTextQuestion","correctAnswer","gradeNumberQuestion","guesses","teamGuessIndex","guess","sort","a","b","Math","abs","sortByGuessDistance","scoring","updateScoring","gradeClosestQuestion","gradeMultipleChoiceQuestion","numCorrect","q","cluesRevealed","correct","correctAnswers","gradeSpeedQuestion","gradeQuestion","userAnswer","addScoreToDatabase","possibleAnswer","includes","MultipleAnswersInput","RoundTaker","userInput","userInputRefs","submitSpeedQuestion","displayQuestion","border","selectedTeam","submitRound","changeSelectedTeam","selectTeam","teamRef","updateTeamName","updateNewTeamMember","newTeamMember","addTeamMember","teamMembers","submitTeam","member","teamNameColumn","totalColumn","Scoreboard","createTotalTeamScores","teamScores","teamScore","total","roundNames","roundColumns","RoundResults","renderOtherInfo","filteredGuesses","g","questionIndex","other","teamAnswer","HostRoundResults","changePoints","getColumns","ParticipantRoundResults","HomePage","exact","path","Register","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","className","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b948d540.chunk.js","sourcesContent":["import React from 'react';\nimport firebase from 'firebase';\nimport { Input } from \"antd\";\nimport {\n    Link\n} from \"react-router-dom\";\n\nexport default class Host extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quizzes: {},\n            newQuizName: '',\n            error: false,\n        };\n    }\n\n    componentDidMount() {\n        const self = this;\n        this.quizzesRef = firebase.database().ref('quizzes');\n        this.quizzesRef.on('value', snapshot => {\n            self.setState({\n                quizzes: snapshot.val(),\n                newQuizName: '',\n            });\n        });\n    }\n\n    removeQuiz = (quizName) => {\n        const { quizzes } = this.state;\n        const toDelete = quizzes[quizName];\n        delete quizzes[quizName];\n        this.quizzesRef.set(quizzes);\n        this.deletedRef = firebase.database().ref('deleted');\n        this.deletedRef.once(\"value\", snapshot => {\n            let toAdd = {};\n            if (snapshot.exists()) {\n                toAdd = snapshot.val();\n            }\n            toAdd[toDelete.name] = toDelete;\n            this.deletedRef.set(toAdd);\n        });\n    };\n\n    displayQuiz = (quiz, i) => {\n        return <div style={{display: 'flex', flexDirection: 'row'}}>\n            <p>{quiz.name}</p>\n            <p>{quiz.date}</p>\n            <Link to={'/host/' + quiz.name}>View</Link>\n            {quiz.name !== 'Example quiz' && <button onClick={() => this.removeQuiz(quiz.name)}>X</button>}\n        </div>\n    };\n\n    addNewQuiz = () => {\n        const { quizzes, newQuizName } = this.state;\n        if (quizzes.hasOwnProperty(newQuizName)) {\n            this.setState({\n                error: true,\n            })\n        } else {\n            quizzes[newQuizName] = {'name': newQuizName, 'rounds': []};\n            this.quizzesRef.set(quizzes);\n        }\n    };\n\n    changeNewQuizName = (e) => {\n        this.setState({\n            newQuizName: e.target.value,\n            error: false,\n        })\n    };\n\n    displayErrorMessage = () => {\n        return <div>\n            A quiz with this name already exists\n        </div>\n    };\n\n    render() {\n        const { quizzes, newQuizName, error } = this.state;\n        return (\n            <div>\n                <h1>Host home page</h1>\n                {Object.keys(quizzes).map((quizName, i) => this.displayQuiz(quizzes[quizName], i))}\n                New Quiz Name: <Input value={newQuizName} onPressEnter={this.addNewQuiz} onChange={this.changeNewQuizName} style={{width: 300}} />\n                <button onClick={this.addNewQuiz}>Add</button>\n                {error && this.displayErrorMessage()}\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\n\nconst { Option } = Select;\n\nexport default class Questions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answers: [],\n            score: null,\n            results: [],\n        };\n    }\n\n    componentDidMount() {\n        const { questions } = this.props;\n        this.setState({\n            answers: questions.map(elem => ''),\n            results: questions.map(elem => ''),\n        })\n    }\n\n    updateAnswer = (e, i) => {\n        let { answers } = this.state;\n        answers[i] = e.target.value.toLowerCase();\n        this.setState({\n            answers: answers,\n        })\n    };\n\n    submit = () => {\n        const { questions } = this.props;\n        let { answers, results } = this.state;\n        let score = 0;\n        questions.forEach((question, index) => {\n            const answer = answers[index];\n            if (answer === undefined) {\n                results[index] = \"Answer should have \" +(question.type === 'exactly' ? 'exactly matched' : 'matched one of') + \" answer choices ([\" + question.answers.join(\", \") + \"])\"\n                return;\n            }\n            if (question.type === 'exactly') {\n                const i = question.answers.indexOf(answer);\n                if (i >= 0) {\n                    score += 1;\n                    results[index] = \"CORRECT! \" + answer + \" exactly matches \" + \"index \" + i + \" of answer choices ([\" + question.answers.join(\", \") + \"])\";\n                } else {\n                    results[index] = \"INCORRECT! Answer should have exactly matched one of answer choices ([\" + question.answers.join(\", \") + \"])\"\n                }\n            } else if (question.type === 'contains') {\n                const filteredAnswers = question.answers.filter(a => answer.includes(a));\n                if (filteredAnswers.length > 0) {\n                    score += 1;\n                    results[index] = \"CORRECT! \" + answer + \"contains \\\"\" + filteredAnswers[0] + \"\\\" from index \" + index + \" of answer choices ([\" + question.answers.join(\", \") + \"])\";\n                } else {\n                    results[index] = \"INCORRECT! Answer should have contained one of answer choices ([\" + question.answers.join(\", \") + \"])\"\n                }\n            }\n        });\n        this.setState({\n            score: score,\n            results: results,\n        })\n    };\n\n    render() {\n        const { questions } = this.props;\n        const { answers, score, results } = this.state;\n        return (\n            <div>\n                <h1>Below is the example quiz, based on the questions created above</h1>\n                {questions.map((question, i) => {\n                    return <div style={{marginBottom: 50}}>\n                        <p>Question {i+1}: {question.question}</p>\n                        <div style={{display: 'flex', flexDirection: 'row'}}>\n                            Your answer for q{i+1}: <Input style={{width: 500}} value={answers[i]} onChange={e => this.updateAnswer(e, i)} />\n                            {results[i]}\n                        </div>\n                    </div>\n                })}\n                <button onClick={this.submit}>Submit</button>\n                <div>\n                    Your score: {score}/{questions.length}\n                </div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\n\nconst { Option } = Select;\n\nexport default class Questions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            s1: '',\n            s2: '',\n            score: 0,\n            similar: false,\n        };\n    }\n\n    calculate = () => {\n        const { s1, s2 } = this.state;\n        const a = s1;\n        const b = s2;\n        if (a.length == 0) return b.length;\n        if (b.length == 0) return a.length;\n\n        var matrix = [];\n\n        // increment along the first column of each row\n        var i;\n        for (i = 0; i <= b.length; i++) {\n            matrix[i] = [i];\n        }\n\n        // increment each column in the first row\n        var j;\n        for (j = 0; j <= a.length; j++) {\n            matrix[0][j] = j;\n        }\n\n        // Fill in the rest of the matrix\n        for (i = 1; i <= b.length; i++) {\n            for (j = 1; j <= a.length; j++) {\n                if (b.charAt(i - 1) == a.charAt(j - 1)) {\n                    matrix[i][j] = matrix[i - 1][j - 1];\n                } else {\n                    matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // substitution\n                        Math.min(matrix[i][j - 1] + 1, // insertion\n                            matrix[i - 1][j] + 1)); // deletion\n                }\n            }\n        }\n\n        const ans = matrix[b.length][a.length] / a.length;\n        if (ans < 0.4) {\n            this.setState({\n                similar: true,\n                score: ans,\n            })\n        } else {\n            this.setState({\n                similar: false,\n                score: ans,\n            })\n        }\n    }\n\n    updates1 = (e) => {\n        this.setState({\n            s1: e.target.value.toLowerCase().trim(),\n        })\n    };\n\n    updates2 = (e) => {\n        this.setState({\n            s2: e.target.value.toLowerCase().trim(),\n        })\n    };\n\n    render() {\n        const { s1, s2, score, similar } = this.state;\n        return (\n            <div>\n                <h1>This is a test view of the (Levenshtein Distance / length of first string) to test similarity of strings. Threshold set at 0.4 currently.</h1>\n                s1: <Input value={s1} id={0} onChange={this.updates1} />\n                s2: <Input value={s2} id={1} onChange={this.updates2} />\n                <button onClick={this.calculate}>Calculate</button>\n                {score}: {similar ? \"similar\" : \"NOT similar\"}\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport app from 'firebase/app';\nimport firebase from 'firebase';\nimport { Input, Table, Modal } from \"antd\";\nimport { storage } from \"firebase\";\n\nexport default class Question extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questionString: '',\n        };\n    }\n\n    updateQuestionString = (e) => {\n        this.setState({\n            questionString: e.target.value,\n        })\n    };\n\n    render() {\n        return (\n            <div>\n                <div>Question:</div>\n                <Input onChange={this.updateQuestionString} />\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport app from 'firebase/app';\nimport firebase from 'firebase';\nimport { Input, Table, Modal, Select } from \"antd\";\nimport { storage } from \"firebase\";\n\nconst { Option } = Select;\n\nexport default class QuestionType extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questionType: 'text',\n        };\n    }\n\n    render() {\n        const { questionType } = this.props;\n        return (\n            <div>\n                <div>Question Type:</div>\n                <Select value={questionType} style={{width: 200, height: 40}} onChange={this.props.update}>\n                    <Option value=\"text\">Text</Option>\n                    <Option value=\"number\">Number</Option>\n                    <Option value=\"closest\">Closest Number</Option>\n                    <Option value=\"multiple_choice\">Multiple Choice</Option>\n                    <Option value=\"multiple_answers\">Multiple Answers</Option>\n                    <Option value=\"speed\">Speed round</Option>\n                </Select>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\n\nconst { Option } = Select;\n\nexport default class TextAnswer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answerType: 'exactly',\n            possibleAnswers: [],\n            newAnswer: '',\n        };\n    }\n\n    changeNewAnswer = (e) => {\n        this.setState({\n            newAnswer: e.target.value\n        })\n    };\n\n    changeAnswerType = (e) => {\n        this.setState({\n            answerType: e\n        })\n    };\n\n    addPossibleAnswer = (e) => {\n        const { possibleAnswers } = this.state;\n        this.setState({\n            possibleAnswers: [...possibleAnswers, e.target.value.toLowerCase()],\n            newAnswer: '',\n        })\n    };\n\n    removePossibleAnswer = (i) => {\n        let { possibleAnswers } = this.state;\n        possibleAnswers.splice(i, 1);\n        this.setState({\n            possibleAnswers: possibleAnswers,\n        })\n    };\n\n    getInfoForPosting = () => {\n        const { answerType, possibleAnswers, newAnswer } = this.state;\n        if (newAnswer.length > 0 && possibleAnswers.indexOf(newAnswer) === -1) {\n            possibleAnswers.push(newAnswer.toLowerCase());\n            this.setState({\n                possibleAnswers: possibleAnswers,\n                newAnswer: '',\n            })\n        }\n        return {answerType, possibleAnswers};\n    };\n\n    render() {\n        const { newAnswer, answerType, possibleAnswers } = this.state;\n        return (\n            <div>\n                <div>\n                    <div>Answer Type: </div>\n                    <Select value={answerType} style={{width: 200, height: 40}} onChange={this.changeAnswerType}>\n                        <Option value=\"exactly\">Is Exactly...</Option>\n                        <Option value=\"contains\">Contains...</Option>\n                        {/*<Option value=\"regex\">Matches regex...</Option>*/}\n                    </Select>\n                    <br/>\n                </div>\n                <h4>Possible answers: </h4>\n                <div>\n                    {possibleAnswers.length === 0 ? \"No answer options yet...\" : <List grid={{column: 5}}\n                        dataSource={possibleAnswers}\n                        renderItem={(item, i) => (\n                            <List.Item>{item}\n                            <button onClick={() => this.removePossibleAnswer(i)}>X</button>\n                            </List.Item>\n                        )}\n                    />}\n                    <div>\n                        Input an answer (Enter to add it to the list):\n                        <Input style={{width: 400}} onPressEnter={this.addPossibleAnswer} value={newAnswer} onChange={this.changeNewAnswer} placeholder=\"Answer\" />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\n\nconst { Option } = Select;\n\nexport default class NumberAnswer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            numberAnswer: null,\n            margin: 0,\n        };\n    }\n\n    getInfoForPosting = () => {\n        return this.state;\n    };\n\n    changeAnswer = (e) => {\n        const value = e.target.value;\n        if (value === '-' || value === '' || !isNaN(value) || value.indexOf('e') === value.length-1) {\n            this.setState({numberAnswer: value})\n        }\n    };\n\n    changeMargin = (e) => {\n        const value = e.target.value;\n        if (value === '-' || value === '' || !isNaN(value) || value.indexOf('e') === value.length-1) {\n            this.setState({margin: value})\n        }\n    };\n\n    render() {\n        const { numberAnswer, margin } = this.state;\n        return (\n            <div style={{display: 'flex', flexDirection: 'row'}}>\n                Answer: <Input style={{width: 200}} value={numberAnswer} onChange={this.changeAnswer} />\n                +- <Input style={{width: 200}} value={margin} onChange={this.changeMargin} />\n                (Answers accepted between: {parseFloat(numberAnswer) - parseFloat(margin)} and {parseFloat(numberAnswer) + parseFloat(margin)})\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\n\n\nconst { Option } = Select;\n\nexport default class ClosestNumber extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            numberAnswer: null,\n            positionScoring: [3,2,1,0,0],\n        };\n    }\n\n    getInfoForPosting = () => {\n        return this.state;\n    };\n\n    changeAnswer = (e) => {\n        const value = e.target.value;\n        if (value === '-' || value === '' || !isNaN(value) || value.indexOf('e') === value.length-1) {\n            this.setState({numberAnswer: value})\n        }\n    };\n\n    updateScore = (e, i) => {\n        const { positionScoring } = this.state;\n        const value = e.target.value;\n        if (value === '' || !isNaN(value)) {\n            positionScoring[i] = value;\n            this.setState(positionScoring);\n        }\n    };\n\n    addPosition = () => {\n        const { positionScoring } = this.state;\n        this.setState({\n            positionScoring: [... positionScoring, 0]\n        })\n    };\n\n    removePosition = (i) => {\n        const { positionScoring } = this.state;\n        positionScoring.splice(i, 1);\n        this.setState({\n            positionScoring: positionScoring,\n        })\n    };\n\n    renderPositionScores = () => {\n        const { positionScoring } = this.state;\n        return <div>\n            {positionScoring.map((score, i) => {\n                return <div>\n                    Position {i+1}:\n                    <Input style={{width: 50}} value={score} onChange={e => this.updateScore(e, i)} />\n                    <button onClick={() => this.removePosition(i)}>X</button>\n                </div>\n            })}\n            <button onClick={this.addPosition}>Add position</button>\n        </div>\n    };\n\n    render() {\n        const { numberAnswer } = this.state;\n        return (\n            <div>\n                Answer: <Input style={{width: 200, height: 30}} value={numberAnswer} onChange={this.changeAnswer} />\n                {this.renderPositionScores()}\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List, Radio} from 'antd';\n\nconst { Option } = Select;\n\nexport default class MultipleChoice extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            choices: [],\n            newOption: '',\n            correctChoice: null,\n        };\n    }\n\n    getInfoForPosting = () => {\n        const { choices, correctChoice } = this.state;\n        return { choices, correctChoice };\n    };\n\n    changeNewOption = (e) => {\n        this.setState({\n            newOption: e.target.value\n        });\n    };\n\n    addChoice = () => {\n        const { choices, newOption } = this.state;\n        this.setState({\n            choices: [...choices, newOption],\n            newOption: '',\n        })\n    };\n\n    removeOption = (i) => {\n        const { choices } = this.state;\n        choices.splice(i, 1);\n        this.setState({\n            choices: choices,\n        })\n    };\n\n    onChange = e => {\n        this.setState({\n            correctChoice: e.target.value,\n        });\n    };\n\n    render() {\n        const { choices, newOption, correctChoice } = this.state;\n        return (\n            <div>\n                <Radio.Group onChange={this.onChange} value={correctChoice}>\n                    {choices.map((choice, i) => {\n                        return <div>\n                            <Radio value={choice}>{choice}</Radio>\n                            <button onClick={() => this.removeOption(i)}>X</button>\n                        </div>\n                    })}\n                </Radio.Group>\n                <div>\n                    <Input onPressEnter={this.addChoice} style={{width: 200}} value={newOption} onChange={this.changeNewOption} />\n                    <button onClick={this.addChoice}>Add</button>\n                </div>\n\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\nimport TextAnswer from \"./TextAnswer\";\n\nconst { Option } = Select;\n\nexport default class SpeedRound extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            clues: [''],\n            scoreType: 'clues_revealed',\n            cluesRevealedScore: [1],\n            positionScores: [3,2,1,0,0,0],\n        };\n        this.textAnswerRef = React.createRef();\n    }\n\n    getInfoForPosting = () => {\n        const { clues, scoreType, cluesRevealedScore, positionScores } = this.state;\n        const infoForPosting = this.textAnswerRef.current.getInfoForPosting();\n        infoForPosting.clues = clues.map(clue => {\n            return {clue: clue}\n        });\n        infoForPosting.scoreType = scoreType;\n        infoForPosting.positionScoring = scoreType === 'clues_revealed' ? cluesRevealedScore : positionScores;\n        return infoForPosting;\n    };\n\n    updateClue = (e, i) => {\n        const { clues } = this.state;\n        clues[i] = e.target.value;\n        this.setState({\n            clues: clues,\n        })\n    };\n\n    removeClue = (i) => {\n        const { clues, cluesRevealedScore } = this.state;\n        clues.splice(i,1);\n        cluesRevealedScore.splice(0,1);\n        this.setState({\n            clues: clues,\n            cluesRevealedScore: cluesRevealedScore,\n        })\n    };\n\n    addClue = () => {\n        const { clues, cluesRevealedScore } = this.state;\n        this.setState({\n            clues: [...clues, ''],\n            cluesRevealedScore: [parseFloat(cluesRevealedScore[0])+1, ...cluesRevealedScore],\n        })\n    };\n\n    renderClues = () => {\n        const { clues } = this.state;\n        return (\n            <div>\n                {clues.map((clue, i) => {\n                    return (\n                        <div style={{display: 'flex', flexDirection: 'row'}}>\n                            Clue {i+1}: <Input style={{width: 800}} value={clue} onChange={e => this.updateClue(e, i)} />\n                            {i > 0 && <button onClick={() => this.removeClue(i)}>X</button>}\n                        </div>\n                    )\n                })}\n                <button onClick={this.addClue}>Add Clue</button>\n            </div>\n        )\n    };\n\n    changeScoreType = (e) => {\n        this.setState({\n            scoreType: e\n        })\n    };\n\n    updatePositionScore = (e, i) => {\n        const { positionScores } = this.state;\n        const value = e.target.value;\n        if (value === '' || !isNaN(value)) {\n            positionScores[i] = value;\n            this.setState({positionScores: positionScores})\n        }\n    };\n\n    removePositionScore = (i) => {\n        const { positionScores } = this.state;\n        positionScores.splice(i, 1);\n        this.setState({\n            positionScores: positionScores,\n        })\n    };\n\n    addPositionScore = () => {\n        const { positionScores } = this.state;\n        this.setState({\n            positionScores: [... positionScores, 0]\n        })\n    };\n\n    renderPositionScores = () => {\n        const { positionScores } = this.state;\n        return <div>\n            {positionScores.map((score, i) => {\n                return <div>\n                    Position {i+1}:\n                    <Input style={{width: 50}} value={score} onChange={e => this.updatePositionScore(e, i)} />\n                    <button onClick={() => this.removePositionScore(i)}>X</button>\n                </div>\n            })}\n            <button onClick={this.addPositionScore}>Add position</button>\n        </div>\n    };\n\n    renderScoring = () => {\n        const { scoreType } = this.state;\n        return (\n            <div>\n                <div>Scores determined by:</div>\n                <Select value={scoreType} style={{width: 200, height: 40}} onChange={this.changeScoreType}>\n                    <Option value=\"clues_revealed\">Clues Revealed</Option>\n                    <Option value=\"position\">Position</Option>\n                </Select>\n                {scoreType === 'clues_revealed' ? this.renderCluesRevealedScores() : this.renderPositionScores()}\n            </div>\n        )\n    };\n\n    updateCluesRevealedScore = (e,i) => {\n        const {cluesRevealedScore} = this.state;\n        const value = e.target.value;\n        if (value === '' || !isNaN(value)) {\n            cluesRevealedScore[i] = value;\n            this.setState({cluesRevealedScore: cluesRevealedScore})\n        }\n    };\n\n    renderCluesRevealedScores = () => {\n        const { cluesRevealedScore } = this.state;\n        return <div>\n            {cluesRevealedScore.map((score, i) => {\n                return <div>\n                    Guessing after clue {i+1} =\n                    <Input style={{width: 50}} value={score} onChange={e => this.updateCluesRevealedScore(e, i)} />\n                    points\n                </div>\n            })}\n        </div>\n    };\n\n    render() {\n        return (\n            <div>\n                {this.renderClues()}\n                <TextAnswer ref={this.textAnswerRef} />\n                {this.renderScoring()}\n\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, List} from 'antd';\nimport TextAnswer from \"./TextAnswer\";\n\nconst { Option } = Select;\n\nexport default class MultipleAnswers extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            scores: [1],\n        };\n        this.scoresRefs = [React.createRef()];\n    }\n\n    getInfoForPosting = () => {\n        const { scores } = this.state;\n        const multipleAnswers = this.scoresRefs.map(ref => ref.current.getInfoForPosting());\n        return { multipleScores: scores, multipleAnswers }\n    };\n\n    addAnswer = () => {\n        const { scores } = this.state;\n        this.setState({\n            scores: [...scores, parseFloat(scores[scores.length-1])+1]\n        });\n        this.scoresRefs.push(React.createRef());\n    };\n\n    removeLastAnswer = () => {\n        const { scores } = this.state;\n        scores.pop();\n        this.setState({\n            scores: scores\n        });\n        this.scoresRefs.pop();\n    };\n\n    updateScore = (e, i) => {\n        const { scores } = this.state;\n        const value = e.target.value;\n        if (value === '' || !isNaN(value)) {\n            scores[i] = value;\n            this.setState({scores: scores})\n        }\n    };\n\n    render() {\n        const { scores } = this.state;\n        return (\n            <div>\n                {scores.map((elem, i) => {\n                    return (\n                        <div>\n                            <hr/>\n                            <h3>Answer {i+1}:</h3>\n                            <TextAnswer ref={this.scoresRefs[i]}/>\n                        </div>\n                    )\n                })}\n                <hr/>\n                <button onClick={this.addAnswer}>Add another answer</button>\n                {scores.length > 1 && <button onClick={this.removeLastAnswer}>Remove last answer</button>}\n\n                {scores.map((score, i) => {\n                    return (\n                        <div>\n                            {i+1} correct = <Input style={{width: 50}} value={score} onChange={e => this.updateScore(e, i)} /> points\n                        </div>\n                    )\n                })}\n\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Input } from \"antd\";\n\nexport default class SingleScore extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            score: 1,\n        };\n    }\n\n    updateScore = (e) => {\n        const value = e.target.value;\n        if (value === '' || !isNaN(value)) {\n            this.setState({score: value})\n        }\n    };\n\n    render() {\n        const { score } = this.state;\n        return (\n            <div>\n                Correct answer: <Input style={{width: 50}} placeHolder={'score...'} value={score} onChange={this.updateScore} /> points\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport app from 'firebase/app';\nimport firebase from 'firebase';\nimport Questions from \"../old_stuff/Questions\";\nimport LevenshteinDistance from \"../old_stuff/LevenshteinDistance\";\nimport { Table, Modal } from \"antd\";\nimport { storage } from \"firebase\";\nimport Question from \"./question_components/Question\";\nimport QuestionType from \"./question_components/QuestionType\";\nimport TextAnswer from \"./answer_components/TextAnswer\";\nimport NumberAnswer from \"./answer_components/NumberAnswer\";\nimport ClosestNumber from \"./answer_components/ClosestNumber\";\nimport MultipleChoice from \"./answer_components/MultipleChoice\";\nimport SpeedRound from \"./answer_components/SpeedRound\";\nimport MultipleAnswers from \"./answer_components/MultipleAnswers\";\nimport SingleScore from \"./score_components/SingleScore\";\n\nexport default class QuestionCreator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questionType: 'text',\n            modalOpen: false,\n        };\n        this.questionRef = React.createRef();\n        this.questionTypeRef = React.createRef();\n        this.possibleAnswersRef = React.createRef();\n        this.scoreRef = React.createRef();\n    }\n\n    updateQuestionType = (e) => {\n        this.setState({\n            questionType: e,\n        })\n    };\n\n    displayPossibleAnswers = () => {\n        const { questionType } = this.state;\n        if (questionType === 'text') {\n            return <TextAnswer ref={this.possibleAnswersRef} />\n        } else if (questionType === 'number') {\n            return <NumberAnswer ref={this.possibleAnswersRef}/>\n        } else if (questionType === 'closest') {\n            return <ClosestNumber ref={this.possibleAnswersRef}/>\n        } else if (questionType === 'multiple_choice') {\n            return <MultipleChoice ref={this.possibleAnswersRef}/>\n        } else if (questionType === 'speed') {\n            return <SpeedRound ref={this.possibleAnswersRef}/>\n        } else if (questionType === 'multiple_answers') {\n            return <MultipleAnswers ref={this.possibleAnswersRef}/>\n        }\n    };\n\n    getInfoForPosting = () => {\n        const { questionType } = this.state;\n        const question = this.questionRef.current.state.questionString;\n        const infoForPosting = {question: question, questionType};\n        const info = this.possibleAnswersRef.current.getInfoForPosting();\n        Object.keys(info).forEach(key => infoForPosting[key] = info[key]);\n        if (this.scoreRef.current) {\n            infoForPosting.score = this.scoreRef.current.state.score;\n        }\n        console.log(infoForPosting);\n        return infoForPosting;\n    };\n\n    displayScores = () => {\n        const { questionType } = this.state;\n        if (questionType === 'text' || questionType === 'number' || questionType === 'multiple_choice') {\n            return <SingleScore ref={this.scoreRef}/>\n        }\n    };\n\n    render() {\n        const { questionType } = this.state;\n        return (\n            <div>\n                <Question ref={this.questionRef}/>\n                <QuestionType ref={this.questionTypeRef} questionType={questionType} update={this.updateQuestionType}/>\n                {this.displayPossibleAnswers()}\n                {this.displayScores()}\n            </div>\n        );\n    }\n\n}","export function submitQuestion(data, round, roundRef) {\n    validateInput(data);\n    const questions = round.questions;\n    if (questions) {\n        round.questions = [...round.questions, data]\n    } else {\n        round.questions = [data];\n    }\n    console.log(round);\n    roundRef.set(round);\n    // const questions = quiz.questions;\n    // if (questions) {\n    //     quiz.questions = [...quiz.questions, data];\n    // } else {\n    //     quiz.questions = [data];\n    // }\n    // quizRef.set(quiz);\n}\n\nfunction validateInput(data) {\n    const { question, possibleAnswers, numberAnswer, score, positionScoring, clues } = data;\n    if (question === '') {\n        throw \"Must have a question string\";\n    }\n    if (possibleAnswers && possibleAnswers.length === 0) {\n        throw \"Must have at least one correct answer\";\n    }\n    if (data.hasOwnProperty('numberAnswer') && invalidNumber(numberAnswer)) {\n        throw \"Must be a valid number\";\n    }\n    if (data.hasOwnProperty('score') && invalidNumber(score)) {\n        throw \"Must have a score for the question\";\n    }\n    if (data.hasOwnProperty('positionScoring') && invalidScoringArray(positionScoring)) {\n        throw \"Must have at least one team scoring\";\n    }\n    if (data.hasOwnProperty('clues') && invalidClues(clues)) {\n        throw \"Must have at least one clue for speed round\";\n    }\n    if (data.hasOwnProperty('choices')) {\n        const { choices, correctChoice } = data;\n        if (choices.length <= 1) {\n            throw \"Must have at least 2 options\";\n        }\n        if (correctChoice === null) {\n            throw \"Must select a correct option for multiple choice\";\n        }\n    }\n    if (data.hasOwnProperty('multipleAnswers')) {\n        const { multipleAnswers, multipleScores } = data;\n        if (invalidAnswers(multipleAnswers)) {\n            throw \"All options for answers must have a possible answer\";\n        }\n        if (invalidScoringArray(multipleScores)) {\n            throw \"Must be possible to score points\";\n        }\n    }\n}\n\nfunction invalidNumber(num) {\n    return num === '' || num === null || isNaN(num);\n}\n\nfunction invalidScoringArray(arr) {\n    const filteredArray = arr.filter(elem => {\n        return !(elem === '' || isNaN(elem) || elem === null || parseFloat(elem) === 0)\n    });\n    return filteredArray.length === 0;\n}\n\nfunction invalidClues(clues) {\n    return clues.filter(clue => clue !== '').length === 0\n}\n\nfunction invalidAnswers(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].possibleAnswers.length === 0) {\n            return true;\n        }\n    }\n    return false;\n}","import React from 'react';\nimport app from 'firebase/app';\nimport firebase from 'firebase';\nimport Questions from \"../old_stuff/Questions\";\nimport LevenshteinDistance from \"../old_stuff/LevenshteinDistance\";\nimport {Table, Modal, Switch} from \"antd\";\nimport { storage } from \"firebase\";\nimport QuestionCreator from \"./QuestionCreator\";\nimport {submitQuestion} from \"../../helpers/QuestionPoster\";\n\nconst ordinalSuffix = (i) => {\n    var j = i % 10,\n        k = i % 100;\n    if (j == 1 && k != 11) {\n        return i + \"st\";\n    }\n    if (j == 2 && k != 12) {\n        return i + \"nd\";\n    }\n    if (j == 3 && k != 13) {\n        return i + \"rd\";\n    }\n    return i + \"th\";\n};\n\nconst renderAnswers = (text, record) => {\n    const { questionType } = record;\n    if (questionType === 'text' || questionType === 'speed') {\n        return <div>\n            {record.answerType.toUpperCase()} [{record.possibleAnswers.join(', ')}]\n        </div>\n    }\n    if (questionType === 'number' || questionType === 'closest') {\n        return <div>\n            {record.numberAnswer}\n            {record.margin && (' +- ' + record.margin)}\n        </div>\n    }\n    if (questionType === 'multiple_answers') {\n        return <div>\n            {record.multipleAnswers.map((answer, i) => {\n                return <div>\n                    {i+1}: {answer.answerType.toUpperCase()} [{answer.possibleAnswers.join(', ')}]\n                </div>\n            })}\n        </div>\n    }\n    if (questionType === 'multiple_choice') {\n        return <div>\n            {record.correctChoice.toUpperCase()} from [{record.choices.join(', ')}]\n        </div>\n    }\n    return text;\n};\n\nconst renderScores = (text, record) => {\n    const { questionType } = record;\n    if (questionType === 'text' || questionType === 'number' || questionType === 'multiple_choice') {\n        return <div>\n            {record.score} point(s)\n        </div>\n    }\n    if (questionType === 'closest') {\n        return record.positionScoring.map((score, i) => <div>{ordinalSuffix(i+1)} closest: {score} point(s)</div>)\n    }\n    if (questionType === 'multiple_answers') {\n        return record.multipleScores.map((score, i) => <div>{i+1} Correct: {score} point(s)</div>)\n    }\n    if (questionType === 'speed') {\n        if (record.scoreType === 'clues_revealed') {\n            return record.positionScoring.map((score, i) => <div>{i+1} clue(s) revealed: {score} point(s)</div>)\n        }\n        if (record.scoreType === 'position') {\n            return record.positionScoring.map((score, i) => <div>{ordinalSuffix(i+1)}: {score} point(s)</div>)\n        }\n    }\n    return text;\n};\n\nexport default class RoundCreator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            modalOpen: false,\n        };\n        this.questionCreatorRef = React.createRef();\n        this.columns = [\n            {\n                title: 'Question',\n                dataIndex: 'question',\n                key: 'question',\n                render: this.renderQuestions,\n            },\n            {\n                title: 'Question Type',\n                dataIndex: 'questionType',\n                key: 'question_type',\n            },\n            {\n                title: 'Clues/Options',\n                dataIndex: 'clues',\n                key: 'clues',\n                render: this.renderClues,\n            },\n            {\n                title: 'Answers',\n                dataIndex: 'answers',\n                key: 'answers',\n                render: renderAnswers,\n            },\n            {\n                title: 'Scoring',\n                dataIndex: 'scoring',\n                key: 'scoring',\n                render: renderScores,\n            },\n        ];\n    }\n\n    beginSpeedRound = (record, i) => {\n        const { roundRef } = this.props;\n        const qRef = roundRef.child('questions').child(i);\n        record.begin = true;\n        qRef.set(record);\n    };\n\n    endSpeedRound = (record, i) => {\n        const { roundRef } = this.props;\n        const qRef = roundRef.child('questions').child(i);\n        record.begin = false;\n        record.clues.forEach(clue => clue.show = false);\n        qRef.set(record);\n    };\n\n    showClue = (clue, i, clueIndex) => {\n        const { roundRef } = this.props;\n        const clueRef = roundRef.child('questions').child(i).child('clues').child(clueIndex);\n        clue.show = true;\n        clueRef.set(clue);\n    };\n\n    hideClue = (clue, i, clueIndex) => {\n        const { roundRef } = this.props;\n        const clueRef = roundRef.child('questions').child(i).child('clues').child(clueIndex);\n        clue.show = false;\n        clueRef.set(clue);\n    };\n\n    renderSpeedClues = (record, i) => {\n        return record.clues.map((clue, clueIndex) => {\n            let clueButton;\n            if (clue.show) {\n                clueButton = <button onClick={() => this.hideClue(clue, i, clueIndex)}>Hide</button>\n            } else {\n                clueButton = <button onClick={() => this.showClue(clue, i, clueIndex)}>Show</button>\n            }\n            return <div>\n                Clue {clueIndex+1}: {clue.clue}\n                {record.begin && clueButton}\n            </div>\n        })\n    };\n\n    renderClues = (text, record, i) => {\n        const { questionType } = record;\n        if (questionType === 'multiple_choice') {\n            return record.choices.map(choice => <div>{choice}</div>);\n        }\n        if (questionType === 'speed') {\n            return this.renderSpeedClues(record, i);\n        }\n        return text;\n    };\n\n    renderQuestions = (text, record, index) => {\n        const { questionType } = record;\n        if (questionType === 'speed') {\n            return <div>\n                {text}\n                {record.begin ? <button\n                    onClick={() => this.endSpeedRound(record, index)}>\n                    End\n                </button> : <button\n                    onClick={() => this.beginSpeedRound(record, index)}>\n                    Begin\n                </button>\n                }\n            </div>\n        }\n        return text;\n    };\n\n    addQuestion = () => {\n        this.setState({\n            modalOpen: true,\n        })\n    };\n\n    handleOk = (e) => {\n        const { round } = this.props;\n        const { roundRef } = this.props;\n        try {\n            const infoForPosting = this.questionCreatorRef.current.getInfoForPosting();\n            submitQuestion(infoForPosting, round, roundRef);\n            this.setState({\n                modalOpen: false,\n            })\n        } catch(err) {\n            console.log(err);\n        }\n\n    };\n\n    handleCancel = () => {\n        this.setState({\n            modalOpen: false,\n        })\n    };\n\n    toggleShowRound = (e, round) => {\n        const { roundRef } = this.props;\n        round.show = e;\n        round.questions.forEach((question, i) => {\n            if (question.questionType === 'speed') {\n                question.begin = false;\n                question.clues.forEach(clue => clue.show = false);\n            }\n        });\n        roundRef.set(round);\n    };\n\n    render() {\n        const { round } = this.props;\n        const { modalOpen } = this.state;\n        return (\n            <div>\n                <div>\n                    <div>\n                        Show round: <Switch checked={round.show} onChange={e => this.toggleShowRound(e,round)} />\n                    </div>\n                    {round.questions && <Table columns={this.columns} dataSource={round.questions} pagination={false} />}\n                    <button onClick={this.addQuestion}>Add question</button>\n                    <Modal\n                        title=\"Create a question\"\n                        visible={modalOpen}\n                        onOk={this.handleOk}\n                        onCancel={this.handleCancel}\n                    >\n                        <QuestionCreator ref={this.questionCreatorRef}/>\n                    </Modal>\n                </div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport firebase from 'firebase';\nimport { Collapse } from 'antd';\nimport {\n    Link,\n    useParams,\n    withRouter,\n} from \"react-router-dom\";\nimport RoundCreator from \"./RoundCreator\";\n\nconst { Panel } = Collapse;\n\n\nclass QuizCreator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quiz: {},\n        };\n    }\n\n    componentDidMount() {\n        const { name } = this.props.match.params;\n        const self = this;\n        this.quizRef = firebase.database().ref('quizzes').child(name);\n        this.quizRef.on('value', snapshot => {\n            self.setState({\n                quiz: snapshot.val(),\n            });\n        });\n    }\n\n    addNewRound = () => {\n        const { quiz } = this.state;\n        const rounds = quiz.rounds;\n        if (rounds) {\n            const roundName = Object.keys(rounds).length + 1;\n            quiz.rounds['Round ' + roundName] = {'name': 'Round ' + roundName};\n        } else {\n            quiz.rounds = {'Round 1': {'name': 'Round 1'}};\n        }\n        this.quizRef.set(quiz);\n    };\n\n    renderTeams = () => {\n        const { quiz } = this.state;\n        const teams = quiz.teams;\n        return teams && (\n            <div>\n                <h3>Teams registered:</h3>\n                {Object.keys(teams).map(teamName => {\n                    return <div>\n                        {teamName}\n                    </div>\n                })}\n            </div>\n        )\n    };\n\n    render() {\n        const { quiz } = this.state;\n        const rounds = quiz.rounds;\n        return (\n            <div>\n                <h1>Quiz name here: {quiz && quiz.name}</h1>\n                {this.renderTeams()}\n                <Collapse>\n                    {rounds && Object.keys(rounds).map((roundName, i) => {\n                        const round = rounds[roundName];\n                        return <Panel header={roundName} key={i}>\n                            <RoundCreator round={round} roundRef={this.quizRef.child('rounds').child(roundName)} />\n                        </Panel>\n                    })}\n                </Collapse>\n                <button onClick={this.addNewRound}>Add New Round</button>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(QuizCreator)","import React from 'react';\nimport firebase from 'firebase';\nimport { Input } from \"antd\";\nimport {\n    Link\n} from \"react-router-dom\";\n\nexport default class ParticipantHomePage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quizzes: {},\n        };\n    }\n\n    componentDidMount() {\n        const self = this;\n        this.quizzesRef = firebase.database().ref('quizzes');\n        this.quizzesRef.on('value', snapshot => {\n            self.setState({\n                quizzes: snapshot.val(),\n            });\n        });\n    }\n\n    displayQuiz = (quiz, i) => {\n        return <div style={{display: 'flex', flexDirection: 'row'}}>\n            <p>{quiz.name}</p>\n            <p>{quiz.date}</p>\n            <Link to={'/participant/' + quiz.name}>View</Link>\n        </div>\n    };\n\n    render() {\n        const { quizzes } = this.state;\n        return (\n            <div>\n                <h1>Participant home page</h1>\n                {Object.keys(quizzes).map((quizName, i) => this.displayQuiz(quizzes[quizName], i))}\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport firebase from 'firebase';\nimport { Collapse } from 'antd';\nimport {\n    Link,\n    useParams,\n    withRouter,\n} from \"react-router-dom\";\n\nclass QuizTaker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quiz: {},\n        };\n    }\n\n    componentDidMount() {\n        const { name } = this.props.match.params;\n        const self = this;\n        this.quizRef = firebase.database().ref('quizzes').child(name);\n        this.quizRef.on('value', snapshot => {\n            self.setState({\n                quiz: snapshot.val(),\n            });\n        });\n    }\n\n    render() {\n        const { quiz } = this.state;\n        const rounds = quiz.rounds;\n        return (\n            <div>\n                <h1>Quiz name here: {quiz && quiz.name}</h1>\n                <Collapse defaultActiveKey={'0'}>\n                    {rounds && Object.keys(rounds).map((roundName, i) => {\n                        const round = rounds[roundName];\n                        return <div style={{display: 'flex', flexDirection: 'row'}}>\n                            <p>{roundName}</p>\n                            {round.show && <Link to={'/participant/' + quiz.name + '/' + round.name}>View</Link>}\n                        </div>\n                    })}\n                </Collapse>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(QuizTaker)","import React from 'react';\nimport { Input } from \"antd\";\n\nexport default class TextInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer: '',\n        };\n    }\n\n    updateAnswer = (e) => {\n        this.setState({\n            answer: e.target.value,\n        })\n    };\n\n    render() {\n        const { answer } = this.state;\n        return (\n            <Input value={answer} onChange={this.updateAnswer} />\n        );\n    }\n\n}","import React from 'react';\nimport { Input } from \"antd\";\n\nexport default class NumberInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer: '',\n        };\n    }\n\n    updateAnswer = (e) => {\n        const value = e.target.value;\n        if (value === '-' || value === '' || !isNaN(value) || value.indexOf('e') === value.length-1) {\n            this.setState({answer: value})\n        }\n    };\n\n    render() {\n        const { answer } = this.state;\n        return (\n            <Input value={answer} onChange={this.updateAnswer} />\n        );\n    }\n\n}","import React from 'react';\nimport { Input, Select, Radio} from 'antd';\n\nconst { Option } = Select;\n\nexport default class MultipleChoice extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer: null,\n        };\n    }\n\n    onChange = e => {\n        this.setState({\n            answer: e.target.value,\n        });\n    };\n\n    render() {\n        const { choices } = this.props;\n        const { answer } = this.state;\n        return (\n            <div>\n                <Radio.Group onChange={this.onChange} value={answer}>\n                    {choices.map((choice, i) => {\n                        return <div>\n                            <Radio value={choice}>{choice}</Radio>\n                        </div>\n                    })}\n                </Radio.Group>\n\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport {Input} from \"antd\";\n\nexport default class SpeedClues extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer: '',\n        };\n    }\n\n    updateAnswer = (e) => {\n        this.setState({\n            answer: e.target.value,\n        })\n    };\n\n    render() {\n        const { clues } = this.props;\n        const { answer } = this.state;\n        return (\n            <div>\n                {clues.map(clue => {\n                    return clue.show && <div>\n                        {clue.clue}\n                    </div>\n                })}\n                <Input value={answer} onChange={this.updateAnswer}/>\n                <button onClick={() => this.props.submit(answer)}>Submit</button>\n            </div>\n        );\n    }\n\n}","export function submitAnswer(answers, name, round, roundRef, teamName) {\n    console.log(answers);\n    const { questions } = round;\n    questions.forEach((question, i) => {\n        if (answers[i]) {\n            console.log(answers[i]);\n            const questionRef = roundRef.child('questions').child(i);\n            const points = gradeQuestion(question, answers[i].answer, questionRef, teamName);\n            if (question.userAnswer === undefined) {\n                question.userAnswer = {};\n            }\n            question.userAnswer[teamName] = answers[i].answer;\n            if (question.questionType !== 'closest') {\n                addScoreToDatabase(question, questionRef, points, teamName);\n            }\n            console.log(\"Question \" + (i+1) + \": \" + points + \" points\");\n        }\n    });\n}\n\nfunction addScoreToDatabase(question, questionRef, points, teamName) {\n    let { scores } = question;\n    if (scores === undefined) {\n        scores = {};\n    }\n    scores[teamName] = points;\n    question.scores = scores;\n    questionRef.set(question);\n}\n\nfunction gradeQuestion(question, answer, questionRef, teamName) {\n    if (answer === '' || answer === undefined || answer === null) {\n        return 0;\n    } else {\n        answer = answer.toLowerCase();\n        const { questionType } = question;\n        if (questionType === 'text') {\n            return gradeTextQuestion(question, answer) ? parseFloat(question.score) : 0;\n        }\n        if (questionType === 'number') {\n            return gradeNumberQuestion(question, answer) ? parseFloat(question.score) : 0;\n        }\n        if (questionType === 'closest') {\n            return gradeClosestQuestion(question, answer, questionRef, teamName);\n        }\n        if (questionType === 'multiple_choice') {\n            return gradeMultipleChoiceQuestion(question, answer) ? parseFloat(question.score) : 0;\n        }\n        if (questionType === 'multiple_answers') {\n            let numCorrect = 0;\n            question.multipleAnswers.forEach((q,i) => {\n                numCorrect += gradeTextQuestion(q, answer[i]) ? 1 : 0\n            });\n            if (numCorrect > 0) {\n                return question.multipleScores[numCorrect-1];\n            }\n            return 0;\n        }\n        if (questionType === 'speed') {\n            return gradeSpeedQuestion(question, answer, questionRef, teamName);\n        }\n        // console.log(question.questionType);\n\n    }\n}\n\nfunction gradeTextQuestion(question, answer) {\n    const { answerType, possibleAnswers } = question;\n    for (let i = 0; i < possibleAnswers.length; i++) {\n        const possibleAnswer = possibleAnswers[i].toLowerCase();\n        if (answerType === 'exactly' && possibleAnswer === answer) {\n            return true;\n        }\n        if (answerType === 'contains' && answer.includes(possibleAnswer)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction gradeNumberQuestion(question, answer) {\n    let margin;\n    try {\n        margin = parseFloat(question.margin);\n    } catch(err) {\n        margin = 0;\n    }\n    const correctAnswer = parseFloat(question.numberAnswer);\n    return (parseFloat(answer) >= (correctAnswer - margin) && parseFloat(answer) <= (correctAnswer + margin));\n}\n\nfunction gradeMultipleChoiceQuestion(question, answer) {\n    return question.correctChoice === answer;\n}\n\nfunction gradeClosestQuestion(question, answer, questionRef, teamName) {\n    let { guesses, numberAnswer, positionScoring } = question;\n    if (guesses === undefined) {\n        guesses = [];\n    }\n    // Removing duplicate guesses by same team\n    let teamGuessIndex = -1;\n    guesses.forEach((guess, i) => {\n        if (guess.teamName === teamName) {\n            teamGuessIndex = i\n        }\n    });\n    if (teamGuessIndex >= 0) {\n        guesses.splice(teamGuessIndex, 1);\n    }\n    guesses.push({num: parseFloat(answer), teamName: teamName});\n    guesses.sort((a, b) => sortByGuessDistance(a.num, b.num, numberAnswer));\n    question.guesses = guesses;\n    question.scores = updateScoring(guesses, positionScoring);\n    questionRef.set(question);\n    return question.scores[teamName];\n}\n\nfunction gradeSpeedQuestion(question, answer, questionRef, teamName) {\n    let { guesses, scoreType, clues, positionScoring } = question;\n    if (guesses === undefined) {\n        guesses = [];\n    }\n    let cluesRevealed = 0;\n    clues.forEach(clue => {\n        if (clue.show) {\n            cluesRevealed++;\n        }\n    });\n    const correct = gradeTextQuestion(question, answer);\n    guesses.push({guess: answer, teamName: teamName, cluesRevealed: cluesRevealed, correct: correct});\n    question.guesses = guesses;\n    questionRef.set(question);\n    if (!correct) {\n        // Incorrect answer\n        return 0;\n    }\n    if (scoreType === 'clues_revealed') {\n        if (cluesRevealed === 0) {\n            // Guess before any clues are revealed?\n            return positionScoring[0];\n        } else {\n            return positionScoring[cluesRevealed-1];\n        }\n    }\n    if (scoreType === 'position') {\n        const correctAnswers = guesses.filter(guess => gradeTextQuestion(question, guess.guess));\n        if (correctAnswers.length > positionScoring.length) {\n            return 0;\n        } else {\n            return positionScoring[correctAnswers.length-1];\n        }\n    }\n}\n\nfunction updateScoring(guesses, positionScoring) {\n    const scoring = {};\n    guesses.forEach((guess, i) => {\n        const { num, teamName } = guess;\n        if (i > 0 && parseFloat(guesses[i-1].num) === parseFloat(num)) {\n            // 2 people have the same guess\n            scoring[teamName] = scoring[guesses[i-1].teamName];\n        }\n        else if (Object.keys(scoring).indexOf(teamName) === -1) {\n            if (i < positionScoring.length) {\n                scoring[teamName] = parseFloat(positionScoring[i])\n            } else {\n                scoring[teamName] = 0;\n            }\n        }\n    });\n    return scoring;\n}\n\nfunction sortByGuessDistance(a,b,numberAnswer) {\n    return Math.abs(parseFloat(a) - parseFloat(numberAnswer)) - Math.abs(parseFloat(b) - parseFloat(numberAnswer))\n}","import React from 'react';\nimport TextInput from \"./TextInput\";\nimport {Input} from \"antd\";\n\nexport default class MultipleAnswersInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer: props.multipleAnswers.map(() => ''),\n        };\n    }\n\n    updateAnswer = (e, i) => {\n        const { answer } = this.state;\n        answer[i] = e.target.value;\n        this.setState({\n            answer\n        })\n    };\n\n    render() {\n        const { multipleAnswers } = this.props;\n        const { answer } = this.state;\n        return multipleAnswers ? multipleAnswers.map((answer, i) => {\n            return <div style={{display: 'flex', flexDirection: 'row'}}>\n                Answer {i+1}: <Input value={answer[i]} onChange={e => this.updateAnswer(e,i)} />\n            </div>\n        }) : <div/>\n    }\n\n}","import React from 'react';\nimport firebase from 'firebase';\nimport { Select } from 'antd';\nimport {\n    Link,\n    useParams,\n    withRouter,\n} from \"react-router-dom\";\nimport TextInput from \"./user_input/TextInput\";\nimport NumberInput from \"./user_input/NumberInput\";\nimport MultipleChoice from \"./user_input/MultipleChoice\";\nimport SpeedClues from \"./speed_clues/SpeedClues\";\nimport {submitAnswer, submitSpeedAnswer} from \"../../helpers/AnswerPoster\";\nimport MultipleAnswersInput from \"./user_input/MultipleAnswersInput\";\n\nconst { Option } = Select;\n\nclass RoundTaker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            round: {},\n            userInputRefs: [],\n            selectedTeam: null,\n            teams: [],\n        };\n    }\n\n    componentDidMount() {\n        const { name, round } = this.props.match.params;\n        const self = this;\n        this.roundRef = firebase.database().ref('quizzes').child(name).child('rounds').child(round);\n        this.roundRef.on('value', snapshot => {\n            const round = snapshot.val();\n            self.setState({\n                round,\n                userInputRefs: round.questions.map(() => React.createRef()),\n            });\n        });\n        this.teamRef = firebase.database().ref('quizzes').child(name).child('teams');\n        this.teamRef.on('value', snapshot => {\n            const teams = snapshot.val();\n            self.setState({\n                teams,\n            });\n        });\n    }\n\n    userInput = (question, i) => {\n        const { questionType } = question;\n        const { userInputRefs } = this.state;\n        if (questionType === 'text') {\n            return <TextInput ref={userInputRefs[i]}/>\n        }\n        if (questionType === 'number' || questionType === 'closest') {\n            return <NumberInput ref={userInputRefs[i]}/>\n        }\n        if (questionType === 'multiple_choice') {\n            return <MultipleChoice choices={question.choices} ref={userInputRefs[i]}/>\n        }\n        if (questionType === 'speed') {\n            return <SpeedClues clues={question.clues} ref={userInputRefs[i]} submit={answer => this.submitSpeedQuestion(answer, i)}/>\n        }\n        if (questionType === 'multiple_answers') {\n            return <MultipleAnswersInput multipleAnswers={question.multipleAnswers} ref={userInputRefs[i]}/>\n        }\n    };\n\n    displayQuestion = (question, i) => {\n        if (question.questionType === 'speed' && !question.begin) {\n            return;\n        }\n        return <div style={{border: '2px solid black'}}>\n            <h4>Q{i+1}: {question.question} (type={question.questionType})</h4>\n            {this.userInput(question, i)}\n        </div>\n    };\n\n    submitSpeedQuestion = (answer, i) => {\n        const { name } = this.props.match.params;\n        const { round, selectedTeam } = this.state;\n        if (selectedTeam === null) {\n            return;\n        }\n        const answers = round.questions.map(() => null);\n        answers[i] = {\"answer\": answer};\n        submitAnswer(answers, name, round, this.roundRef, selectedTeam);\n    };\n\n    submitRound = () => {\n        const { name } = this.props.match.params;\n        const { round, userInputRefs, selectedTeam } = this.state;\n        if (selectedTeam === null) {\n            return;\n        }\n        const answers = [];\n        userInputRefs.forEach(ref => {\n            if (ref.current) {\n                answers.push(ref.current.state)\n            } else {\n                answers.push(null);\n            }\n        });\n        submitAnswer(answers, name, round, this.roundRef, selectedTeam);\n    };\n\n    changeSelectedTeam = (e) => {\n        this.setState({\n            selectedTeam: e,\n        })\n    };\n\n    selectTeam = () => {\n        const { selectedTeam, teams } = this.state;\n        return <Select value={selectedTeam} style={{width: 200, height: 40}} onChange={this.changeSelectedTeam}>\n            {Object.keys(teams).map(teamName => <Option value={teamName}>{teamName}</Option>)}\n        </Select>\n    };\n\n    render() {\n        const { round } = this.state;\n        this.userInputRefs = [];\n        return (\n            <div>\n                Select your team: {this.selectTeam()}\n                <h1>Round name here: {round && round.name}</h1>\n                {round && round.questions && round.questions.map((q, i) => this.displayQuestion(q,i))}\n                <button onClick={this.submitRound}>Submit all answers for this round</button>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(RoundTaker)","import React from 'react';\nimport firebase from 'firebase';\nimport { Input} from 'antd';\nimport {\n    withRouter,\n} from \"react-router-dom\";\n\nclass QuizTaker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quiz: {},\n            teamName: '',\n            teamMembers: [],\n            newTeamMember: '',\n        };\n    }\n\n    componentDidMount() {\n        const { name } = this.props.match.params;\n        const self = this;\n        this.quizRef = firebase.database().ref('quizzes').child(name);\n        this.quizRef.on('value', snapshot => {\n            self.setState({\n                quiz: snapshot.val(),\n            });\n        });\n    }\n\n    updateTeamName = (e) => {\n        this.setState({\n            teamName: e.target.value,\n        })\n    };\n\n    updateNewTeamMember = (e) => {\n        this.setState({\n            newTeamMember: e.target.value,\n        })\n    };\n\n    addTeamMember = () => {\n        const { teamMembers, newTeamMember } = this.state;\n        this.setState({\n            teamMembers: [...teamMembers, newTeamMember],\n            newTeamMember: '',\n        })\n    };\n\n    submitTeam = () => {\n        const { quiz, teamName, teamMembers} = this.state;\n        const { teams } = quiz;\n        if (!teams) {\n            quiz.teams = {};\n        }\n        quiz.teams[teamName] = {name: teamName, teamMembers: teamMembers};\n        this.quizRef.set(quiz);\n        this.setState({\n            teamMembers: [],\n            teamName: '',\n        })\n    };\n\n    render() {\n        const { quiz, teamName, teamMembers, newTeamMember } = this.state;\n        return (\n            <div>\n                <h1>Quiz name here: {quiz && quiz.name}</h1>\n                Team name: <Input value={teamName} onChange={this.updateTeamName} />\n                {teamMembers.map(member => <div>{member}</div>)}\n                Add Team Member: <Input onPressEnter={this.addTeamMember} value={newTeamMember} onChange={this.updateNewTeamMember} />\n                <button onClick={this.submitTeam}>Submit Team</button>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(QuizTaker)","import React from 'react';\nimport firebase from 'firebase';\nimport { Select, Table } from 'antd';\nimport {\n    Link,\n    useParams,\n    withRouter,\n} from \"react-router-dom\";\n\nconst { Option } = Select;\n\nconst teamNameColumn = {\n    title: 'Team Name',\n    dataIndex: 'teamName',\n    key: 'teamName',\n};\n\nconst totalColumn = {\n    title: 'Total',\n    dataIndex: 'total',\n    key: 'total',\n};\n\nclass Scoreboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quiz: {},\n        };\n    }\n\n    componentDidMount() {\n        const { name } = this.props.match.params;\n        console.log(name);\n        const self = this;\n        this.quizRef = firebase.database().ref('quizzes').child(name);\n        this.quizRef.on('value', snapshot => {\n            const quiz = snapshot.val();\n            self.setState({\n                quiz,\n            });\n        });\n    }\n\n    createTotalTeamScores = (teamScores) => {\n        teamScores.forEach(teamScore => {\n            let total = 0;\n            Object.keys(teamScore).filter(key => key !== 'teamName' && key !== 'total').forEach(key => {\n                total += parseFloat(teamScore[key]);\n            });\n            teamScore.total = total;\n        })\n    };\n\n    render() {\n        const { quiz } = this.state;\n        const { teams, rounds } = quiz;\n        let teamScores;\n        if (teams) {\n            teamScores = Object.keys(teams).map(teamName => {\n                return {teamName: teamName}\n            });\n        }\n        let roundNames = [];\n        if (rounds) {\n            roundNames = Object.keys(rounds);\n            Object.keys(rounds).forEach(roundName => {\n                const round = rounds[roundName];\n                if (round.questions) {\n                    round.questions.forEach(question => {\n                        if (question.scores) {\n                            Object.keys(question.scores).forEach(teamName => {\n                                let teamScore = teamScores.filter(elem => elem.teamName === teamName)[0];\n                                let score;\n                                if (isNaN(question.scores[teamName]) || question.scores[teamName] === '') {\n                                    score = 0;\n                                } else {\n                                    score = parseFloat(question.scores[teamName]);\n                                }\n                                if (teamScore.hasOwnProperty(round.name)) {\n                                    teamScore[round.name] += score;\n                                } else {\n                                    teamScore[round.name] = score;\n                                }\n                            })\n                        }\n                    })\n                }\n            })\n        }\n        const roundColumns = roundNames.map(roundName => {\n            return {\n                title: roundName,\n                dataIndex: roundName,\n                key: roundName,\n            }\n        });\n        if (teamScores) {\n            this.createTotalTeamScores(teamScores);\n            teamScores.sort((a,b) => b.total - a.total);\n        }\n        const columns = [teamNameColumn, ...roundColumns, totalColumn];\n        return (\n            <div>\n                <Table columns={columns} dataSource={teamScores}/>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Scoreboard)","import React from 'react';\nimport firebase from 'firebase';\nimport { Select, Table } from 'antd';\nimport {\n    Link,\n    useParams,\n    withRouter,\n} from \"react-router-dom\";\nimport Scoreboard from \"./Scoreboard\";\n\nconst { Option } = Select;\n\nconst renderAnswers = (record) => {\n    const { questionType } = record;\n    if (questionType === 'text' || questionType === 'speed') {\n        return <div>\n            {record.answerType.toUpperCase()} [{record.possibleAnswers.join(', ')}]\n        </div>\n    }\n    if (questionType === 'number' || questionType === 'closest') {\n        return <div>\n            {record.numberAnswer}\n            {record.margin && (' +- ' + record.margin)}\n        </div>\n    }\n    if (questionType === 'multiple_answers') {\n        return <div>\n            {record.multipleAnswers.map((answer, i) => {\n                return <div>\n                    {i+1}: {answer.answerType.toUpperCase()} [{answer.possibleAnswers.join(', ')}]\n                </div>\n            })}\n        </div>\n    }\n    if (questionType === 'multiple_choice') {\n        return <div>\n            {record.correctChoice.toUpperCase()} from [{record.choices.join(', ')}]\n        </div>\n    }\n    return record.possibleAnswers;\n};\n\nclass RoundResults extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            round: {},\n        };\n    }\n\n    componentDidMount() {\n        const { name, round } = this.props.match.params;\n        const self = this;\n        this.roundRef = firebase.database().ref('quizzes').child(name).child('rounds').child(round);\n        this.roundRef.on('value', snapshot => {\n            const round = snapshot.val();\n            self.setState({\n                round,\n            });\n        });\n    }\n\n    renderOtherInfo = (question, teamName) => {\n        let other;\n        if (question.questionType === 'speed') {\n            if (question.guesses) {\n                const filteredGuesses = question.guesses.filter(g => g.teamName === teamName);\n                if (filteredGuesses.length > 0) {\n                    const guess = filteredGuesses[0];\n                    if (guess.cluesRevealed) {\n                        return (guess.correct ? \"CORRECT after \" : \"INCORRECT after \") + guess.cluesRevealed + \" clue(s) revealed\";\n                    }\n                }\n            }\n            return 'Testing';\n        }\n\n    }\n\n    renderScores = (question, questionIndex) => {\n        const { columns } = this.props;\n        const { scores } = question;\n        const data = scores && Object.keys(scores).map((teamName, i) => {\n            const other = this.renderOtherInfo(question, teamName);\n            return {\n                teamName: teamName,\n                teamAnswer: question.userAnswer && question.userAnswer[teamName],\n                points: scores[teamName],\n                questionType: question.questionType,\n                questionIndex: questionIndex,\n                other\n            };\n        });\n        return <Table columns={columns} dataSource={data}/>\n    };\n\n    displayQuestion = (question, i) => {\n        return <div style={{border: '2px solid black'}}>\n            <h4>Q{i+1}: {question.question} (type={question.questionType})</h4>\n            {renderAnswers(question)}\n            {this.renderScores(question, i)}\n        </div>\n    };\n\n    render() {\n        const { round } = this.state;\n        return (\n            <div>\n                <h1>Round name here: {round && round.name}</h1>\n                {round && round.questions && round.questions.map((q, i) => this.displayQuestion(q,i))}\n                <Scoreboard />\n            </div>\n        );\n    }\n}\n\nexport default withRouter(RoundResults)","import React from 'react';\nimport firebase from 'firebase';\nimport {withRouter} from \"react-router-dom\";\nimport RoundResults from \"../../results/RoundResults\";\nimport { Input } from 'antd';\n\nclass HostRoundResults extends React.Component {\n\n    changePoints = (e, record) => {\n        const { name, round } = this.props.match.params;\n        console.log(name);\n        this.scoreRef = firebase.database().ref('quizzes').child(name).child('rounds').child(round).child('questions').child(record.questionIndex).child('scores').child(record.teamName);\n        console.log(e.target.value);\n        const score = e.target.value;\n        this.scoreRef.set(score);\n    };\n\n    getColumns = () => {\n        return [\n            {\n                title: 'Team Name',\n                dataIndex: 'teamName',\n                key: 'teamName',\n            },\n            {\n                title: 'Team Answer',\n                dataIndex: 'teamAnswer',\n                key: 'teamAnswer',\n            },\n            {\n                title: 'Other',\n                dataIndex: 'other',\n                key: 'other',\n            },\n            {\n                title: 'Points',\n                dataIndex: 'points',\n                key: 'points',\n            },\n            {\n                title: 'Update points',\n                dataIndex: 'updatePoints',\n                key: 'updatePoints',\n                render: (text,record) => {\n                    return <Input style={{width: 150}} value={record.points} onChange={e => this.changePoints(e,record)}/>\n                }\n            },\n        ];\n    };\n\n    render() {\n        return <RoundResults columns={this.getColumns()}/>\n    }\n}\n\nexport default withRouter(HostRoundResults)","import React from 'react';\nimport {withRouter} from \"react-router-dom\";\nimport RoundResults from \"../../results/RoundResults\";\n\nconst columns = [\n    {\n        title: 'Team Name',\n        dataIndex: 'teamName',\n        key: 'teamName',\n    },\n    {\n        title: 'Points',\n        dataIndex: 'points',\n        key: 'points',\n    },\n];\n\nclass ParticipantRoundResults extends React.Component {\n    render() {\n        return <RoundResults columns={columns}/>\n    }\n}\n\nexport default withRouter(ParticipantRoundResults)","import React from 'react';\nimport 'antd/dist/antd.css'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useParams\n} from \"react-router-dom\";\nimport HostHomePage from \"./host/HostHomePage\";\nimport QuizCreator from \"./host/QuizCreator\";\nimport ParticipantHomePage from \"./participant/ParticipantHomePage\";\nimport QuizTaker from \"./participant/QuizTaker\";\nimport RoundTaker from \"./participant/RoundTaker\";\nimport Register from \"./register/Register\";\nimport HostRoundResults from \"./host/results/HostRoundResults\";\nimport ParticipantRoundResults from \"./participant/results/ParticipantRoundResults\";\n\n\nexport default class HomePage extends React.Component {\n\n    render() {\n        return (\n            <Router>\n                <Route exact path=\"/participant\">\n                    <ParticipantHomePage/>\n                </Route>\n                <Route exact path=\"/\">\n                    <ParticipantHomePage/>\n                </Route>\n                <Route exact path=\"/host\">\n                    <HostHomePage firebase />\n                </Route>\n                <Route exact path=\"/host/:name\">\n                    <QuizCreator/>\n                </Route>\n                <Route exact path=\"/participant/:name\">\n                    <QuizTaker/>\n                </Route>\n                <Route exact path=\"/participant/:name/:round\">\n                    <RoundTaker/>\n                </Route>\n                <Route exact path=\"/participant/:name/:round/results\">\n                    <ParticipantRoundResults/>\n                </Route>\n                <Route exact path=\"/host/:name/:round/results\">\n                    <HostRoundResults/>\n                </Route>\n                <Route exact path=\"/participant/:name/:round/results/:teamName\">\n                    {/*<RoundTeamResults/>*/}\n                </Route>\n                <Route exact path=\"/register/:name\">\n                    <Register/>\n                </Route>\n\n            </Router>\n        );\n    }\n}\n\n\nfunction Child() {\n    // We can use the `useParams` hook here to access\n    // the dynamic pieces of the URL.\n    let { name } = useParams();\n\n    return (\n        <div>\n            <h3>Quiz name: {name}</h3>\n        </div>\n    );\n}","import React from 'react';\nimport HomePage from \"./components/HomePage\";\nimport app from 'firebase/app';\nimport 'antd/dist/antd.css'\n\nvar config = {\n    apiKey: \"AIzaSyBfCWC3nO4Dm6t_Mdi023zABHHKzrOdQkI\",\n    authDomain: \"trivia-7b47d.firebaseapp.com\",\n    databaseURL: \"https://trivia-7b47d.firebaseio.com\",\n    projectId: \"trivia-7b47d\",\n    storageBucket: \"trivia-7b47d.appspot.com\",\n    messagingSenderId: \"1017757056711\",\n};\n\napp.initializeApp(config);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <HomePage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}